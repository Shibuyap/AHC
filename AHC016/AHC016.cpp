#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <filesystem>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define srep(i, s, t) for (int i = s; i < t; ++i)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
using namespace std;
typedef long long int ll;
typedef pair<int, int> P;

const int dx[4] = { -1, 1, 0, 0 };
const int dy[4] = { 0, 0, -1, 1 };

namespace /* 乱数ライブラリ */
{
  static uint32_t Rand()
  {
    static uint32_t x = 123456789;
    static uint32_t y = 362436069;
    static uint32_t z = 521288629;
    static uint32_t w = 88675123;
    uint32_t t;

    t = x ^ (x << 11);
    x = y;
    y = z;
    z = w;
    return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
  }


  static double Rand01() {
    return (Rand() + 0.5) * (1.0 / UINT_MAX);
  }
}  // namespace

namespace
{
  // 共通変数
  double com[105][105];
  int MODE = 0;
  const int TURN = 100;
  int m, iEps;
  double eps;

  int n;
  int a[100][100][100];
  int b[100][100];

  int numSingleArr[1000];
  int numPairArr[1000][2];
  int numPairArrOK;

  int numThreeArr[1000][3];
  int numFourArr[1000][4];

  // ハイパラ調整用
  int hyperSolverNum;
  int hyperMinDiff = 10;
  int hyperMaxRound = 7;
  int hyperStep1 = 1;
  int hyperStep2 = 1;
}  // namespace

// ハイパラ
namespace
{
  int maxNumArray[100] = {
      50, 53, 49, 52, 48, 75, 47, 61, 46, 57, 81, 90, 77, 69, 43, 58, 42,
      59, 41, 82, 40, 54, 39, 76, 55, 63, 37, 64, 65, 33, 86, 66, 34, 67,
      73, 68, 32, 79, 31, 70, 30, 56, 29, 16, 11, 36, 27, 74, 26, 51, 25,
      62, 24, 78, 23, 44, 22, 38, 21, 5,  20, 99, 19, 60, 18, 83, 6,  84,
      72, 71, 15, 3,  88, 87, 13, 14, 12, 89, 28, 85, 10, 91, 9,  92, 96,
      93, 7,  94, 17, 95, 80, 8,  4,  97, 2,  98, 35, 45, 1,  100 };

  int real_real_maxNumArray[11][100] = {
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {28, 90, 72, 14, 63, 86, 59, 97, 46, 48, 45, 56, 44, 57, 43, 58, 42,
       1,  41, 60, 40, 61, 39, 62, 38, 64, 37, 79, 36, 47, 35, 66, 34, 67,
       33, 68, 32, 69, 31, 70, 30, 71, 29, 49, 50, 73, 27, 74, 26, 75, 25,
       76, 24, 77, 23, 78, 22, 5,  21, 80, 20, 81, 19, 82, 18, 83, 17, 3,
       16, 85, 15, 53, 52, 87, 13, 88, 12, 89, 11, 55, 10, 91, 9,  92, 8,
       93, 7,  94, 6,  54, 51, 96, 4,  95, 65, 98, 2,  99, 84, 100},
      {74, 40, 49, 52, 13, 99, 10, 97, 46, 86, 4,  56, 69, 57, 25, 58, 11,
       21, 93, 80, 51, 61, 39, 62, 38, 63, 37, 64, 36, 65, 47, 66, 34, 67,
       33, 68, 32, 44, 31, 70, 30, 71, 29, 42, 28, 73, 27, 50, 26, 75, 43,
       76, 24, 77, 23, 78, 22, 79, 59, 60, 20, 81, 19, 82, 18, 83, 17, 84,
       16, 85, 15, 55, 14, 87, 48, 88, 12, 89, 72, 90, 35, 91, 9,  92, 8,
       41, 7,  94, 6,  95, 53, 96, 45, 54, 3,  98, 2,  5,  1,  100},
      {26, 51, 49, 52,  48, 16, 94, 22, 64, 55, 45, 56, 6,  70, 68, 58, 31,
       59, 41, 28, 100, 61, 39, 62, 89, 63, 37, 77, 36, 65, 35, 66, 34, 67,
       33, 43, 32, 69,  42, 23, 30, 71, 29, 72, 60, 73, 27, 74, 50, 75, 25,
       76, 24, 46, 53,  78, 3,  54, 21, 80, 20, 81, 19, 82, 18, 83, 17, 84,
       57, 85, 15, 86,  14, 87, 13, 88, 12, 38, 11, 90, 10, 91, 9,  92, 8,
       93, 7,  47, 44,  95, 5,  96, 4,  97, 79, 98, 2,  99, 1,  40},
      {50, 51, 16, 85, 48, 53, 47, 66, 46, 15, 45, 56, 44, 72, 98, 58, 42,
       59, 41, 60, 40, 61, 39, 62, 38, 90, 37, 55, 36, 65, 92, 77, 34, 67,
       33, 68, 32, 69, 31, 70, 30, 71, 29, 57, 28, 73, 27, 74, 26, 75, 25,
       76, 24, 54, 23, 78, 22, 79, 49, 80, 20, 81, 19, 82, 18, 83, 17, 84,
       21, 8,  64, 86, 14, 87, 13, 88, 12, 89, 11, 63, 10, 91, 9,  35, 52,
       93, 7,  94, 6,  95, 5,  96, 4,  97, 3,  43, 2,  99, 1,  100},
      {50, 97, 49, 52, 48, 53, 47, 54, 46, 21, 45, 56, 7,  57, 43, 58, 42,
       59, 41, 1,  40, 61, 39, 62, 38, 63, 88, 64, 36, 65, 35, 83, 34, 67,
       33, 68, 87, 69, 31, 70, 98, 86, 29, 72, 28, 73, 17, 74, 26, 75, 25,
       76, 24, 77, 23, 78, 22, 79, 55, 80, 20, 51, 19, 82, 18, 66, 27, 84,
       16, 85, 15, 71, 14, 32, 13, 37, 12, 89, 11, 90, 10, 91, 9,  92, 8,
       93, 44, 94, 6,  95, 5,  96, 4,  81, 3,  30, 2,  99, 60, 100},
      {50, 51, 49, 11, 48, 53, 47, 54, 46, 55, 45, 56, 4,  57, 43, 18, 42,
       59, 8,  60, 40, 61, 39, 62, 44, 12, 84, 64, 98, 81, 35, 66, 34, 67,
       33, 68, 32, 69, 31, 70, 86, 71, 16, 72, 28, 73, 27, 74, 26, 75, 25,
       76, 95, 77, 92, 78, 94, 79, 21, 80, 20, 65, 19, 82, 58, 83, 17, 37,
       14, 85, 15, 30, 29, 87, 13, 88, 52, 89, 63, 90, 10, 91, 9,  23, 41,
       93, 7,  22, 6,  24, 5,  96, 38, 97, 3,  36, 2,  99, 1,  100},
      {50, 51, 49, 52, 39, 53, 47, 54, 46, 55, 45, 56, 44, 57, 43, 58, 42,
       92, 41, 60, 40, 61, 99, 62, 38, 63, 37, 91, 48, 94, 35, 66, 34, 67,
       33, 68, 32, 69, 31, 70, 30, 6,  29, 72, 64, 73, 27, 74, 26, 75, 25,
       76, 24, 77, 23, 78, 22, 79, 21, 80, 20, 2,  19, 82, 18, 83, 17, 84,
       16, 85, 15, 86, 14, 87, 13, 88, 12, 89, 11, 90, 10, 28, 9,  59, 8,
       93, 7,  65, 71, 95, 5,  96, 4,  97, 3,  98, 81, 36, 1,  100},
      {50, 42, 49, 52, 48, 53, 47, 54, 46, 55, 45, 56, 44, 57, 43, 97, 93,
       59, 41, 60, 2,  61, 39, 62, 38, 63, 37, 94, 36, 65, 9,  66, 34, 76,
       33, 40, 32, 69, 31, 70, 27, 71, 29, 5,  28, 73, 3,  74, 26, 75, 25,
       1,  24, 77, 23, 78, 22, 79, 92, 80, 20, 81, 19, 8,  18, 83, 17, 84,
       16, 85, 96, 86, 14, 87, 13, 88, 12, 89, 11, 51, 10, 91, 35, 21, 82,
       90, 7,  72, 6,  95, 30, 15, 4,  58, 67, 98, 68, 99, 64, 100},
      {77, 51, 49, 52, 48, 53, 47,  54, 46, 55, 45, 56, 44, 57, 43, 58, 73,
       59, 41, 60, 40, 61, 39, 62,  38, 63, 37, 64, 36, 65, 35, 94, 34, 97,
       33, 68, 32, 69, 31, 70, 30,  71, 29, 72, 28, 5,  27, 74, 26, 75, 25,
       76, 24, 1,  23, 78, 42, 79,  21, 80, 20, 81, 19, 82, 18, 99, 17, 84,
       16, 85, 15, 13, 4,  87, 100, 88, 12, 89, 11, 90, 10, 91, 9,  92, 8,
       2,  14, 50, 6,  95, 22, 96,  66, 67, 3,  98, 93, 83, 86, 7},
      {50, 51, 49, 52, 60, 53, 33, 54, 46, 55, 45, 56, 44, 57, 43, 58, 96,
       59, 41, 48, 40, 61, 39, 62, 38, 63, 37, 64, 36, 65, 22, 66, 2,  67,
       47, 16, 32, 69, 31, 70, 30, 71, 29, 72, 28, 73, 27, 74, 26, 75, 25,
       76, 24, 11, 23, 78, 35, 79, 21, 80, 20, 81, 19, 82, 18, 83, 17, 84,
       10, 85, 15, 86, 14, 87, 13, 88, 12, 89, 3,  90, 68, 91, 9,  92, 8,
       93, 7,  94, 6,  95, 5,  42, 4,  97, 77, 98, 34, 99, 1,  100} };

  int real_maxNumArray[100];

  int hyperN[101][41] = {
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {5,8,8,8,9,11,11,12,12,12,13,16,15,15,15,15,20,20,20,27,27,27,28,28,28,29,35,35,41,41,50,50,63,76,76,77,98,99,99,99,99},
 {5,8,8,9,9,11,11,12,12,13,13,16,15,15,15,20,20,20,20,27,27,28,28,28,29,29,35,35,41,41,41,51,61,69,82,82,89,99,99,99,100},
 {5,8,9,9,9,10,12,12,13,13,13,16,16,16,20,20,20,20,20,28,28,28,28,28,29,29,35,35,41,41,39,61,71,72,82,99,99,99,100,100,100},
 {5,9,9,10,10,10,10,13,13,13,14,16,16,16,20,20,20,20,28,28,28,29,28,29,29,29,35,41,41,41,41,61,71,82,86,99,99,100,100,100,100},
 {5,9,10,10,10,10,10,13,13,13,14,16,16,16,20,20,20,20,28,28,28,29,29,29,29,35,35,41,41,41,41,61,71,80,89,89,99,99,100,100,100},
 {5,10,10,10,10,10,10,13,13,14,14,16,16,16,20,20,20,20,28,28,28,29,29,29,35,35,35,35,41,41,41,56,56,80,89,100,100,100,100,99,99},
 {5,10,10,10,10,10,11,13,14,14,16,16,16,16,20,20,20,20,28,29,29,29,29,34,35,35,35,35,41,41,41,56,56,79,87,97,100,100,99,99,99},
 {6,10,10,11,11,11,11,11,14,16,16,16,16,16,20,20,20,20,20,29,29,29,33,33,33,35,35,41,41,44,44,56,56,79,97,97,100,100,99,99,99},
 {6,10,11,11,11,11,11,11,15,16,16,16,16,20,20,20,20,25,25,29,29,29,33,33,33,35,35,41,41,44,44,56,56,56,97,98,100,99,99,99,99},
 {6,10,11,12,12,11,13,15,15,16,16,16,16,20,20,20,20,25,25,25,33,33,33,33,35,35,35,44,44,44,50,56,68,92,97,98,100,99,99,99,99},
 {6,10,11,12,12,13,13,15,15,16,16,16,16,20,20,20,25,25,25,25,33,33,33,35,35,35,41,44,44,50,50,68,68,92,97,97,100,99,99,99,99},
 {6,10,12,12,12,12,12,12,15,16,16,18,18,20,20,20,25,25,25,25,33,33,33,35,35,35,35,35,50,50,50,68,68,68,97,97,99,99,99,99,99},
 {6,10,12,12,12,12,12,12,15,16,16,18,18,20,20,20,20,20,25,33,33,35,35,35,35,35,35,50,50,50,56,68,68,68,97,98,99,99,99,99,99},
 {6,10,12,12,12,12,12,15,16,16,16,18,20,20,20,20,20,26,25,33,33,35,35,35,35,35,43,50,50,56,56,68,68,98,98,100,99,99,99,99,99},
 {6,10,12,12,12,12,12,15,16,16,16,16,20,20,20,20,26,26,25,35,35,35,35,35,35,35,35,50,50,56,68,68,68,98,98,98,99,99,99,99,99},
 {6,12,12,12,13,12,12,16,16,16,16,20,20,20,20,20,26,26,26,35,35,35,35,35,35,35,46,46,55,56,56,68,68,98,98,98,99,99,99,99,99},
 {6,12,12,13,14,14,14,16,16,16,20,20,20,20,20,20,26,26,26,35,35,35,35,35,35,45,45,45,55,56,56,68,68,99,99,100,100,99,99,99,99},
 {6,12,13,13,13,14,16,16,16,16,20,20,20,20,20,24,24,24,35,35,35,35,35,35,34,45,46,46,56,68,68,68,68,99,99,100,99,99,99,99,99},
 {6,13,13,13,13,14,16,16,16,16,20,20,18,20,20,24,24,34,34,35,35,35,35,35,34,45,46,46,46,68,68,68,68,100,100,100,99,99,99,99,99},
 {6,13,13,13,13,14,16,16,16,16,20,20,20,20,20,20,24,34,34,34,34,34,34,34,46,46,46,55,56,56,68,68,91,100,100,100,99,99,99,99,99},
 {6,13,13,13,13,14,16,16,16,16,20,20,20,20,20,20,24,24,34,34,34,34,34,34,46,46,46,55,55,55,68,68,93,100,100,100,99,99,99,99,99},
 {6,13,13,14,13,14,16,17,17,20,20,20,20,20,24,24,24,24,34,34,34,34,34,42,42,46,46,55,55,55,68,68,90,90,100,100,99,99,99,99,99},
 {7,13,13,13,13,13,13,18,18,20,20,20,20,20,24,24,24,24,34,34,34,34,34,42,42,42,55,55,55,55,68,68,90,90,100,99,99,99,99,99,99},
 {7,13,13,13,15,15,17,18,20,20,20,20,20,21,24,24,24,24,34,34,34,34,34,43,42,42,55,55,55,55,68,68,90,90,100,99,99,99,99,99,99},
 {7,13,13,14,14,15,17,18,20,20,20,20,20,20,24,24,24,24,34,34,34,34,42,42,42,55,55,55,55,55,68,68,68,90,90,99,99,99,99,99,99},
 {7,14,14,14,14,15,18,18,20,20,20,20,20,20,24,24,24,32,34,34,34,34,42,42,42,42,42,55,55,55,68,68,96,90,90,90,99,99,99,99,99},
 {7,14,14,14,15,15,18,18,20,20,20,20,20,24,24,24,24,34,34,34,34,34,42,42,42,42,42,55,55,55,68,68,68,100,98,98,98,99,99,99,99},
 {7,14,14,14,15,15,18,18,20,20,20,20,24,24,24,24,24,34,34,34,34,42,42,42,42,42,55,55,55,68,68,68,96,95,95,95,95,98,99,99,99},
 {7,14,14,14,14,15,18,18,20,20,20,20,24,24,24,24,24,24,34,34,42,42,42,42,42,42,42,55,55,68,68,68,96,95,95,95,98,98,98,99,99},
 {7,14,14,14,15,16,18,18,18,20,20,20,24,24,24,24,24,34,34,42,42,42,42,42,42,42,42,65,68,68,68,68,95,95,98,95,98,98,99,99,99},
 {7,14,14,14,15,16,18,18,18,20,20,20,24,24,24,24,24,24,34,34,42,42,42,42,42,42,42,65,68,68,68,96,96,95,98,98,98,98,99,99,99},
 {7,14,14,15,15,16,18,18,18,20,20,20,24,24,24,24,24,24,34,34,42,42,42,42,42,42,65,65,66,66,66,96,96,98,98,98,98,98,99,99,99},
 {7,14,14,15,15,16,18,18,20,20,20,20,24,24,24,24,24,24,34,34,42,42,42,42,42,42,65,65,66,66,66,96,100,98,98,98,98,100,99,99,99},
 {7,15,15,15,15,16,18,18,20,20,20,22,24,24,24,24,24,34,34,42,42,42,42,42,42,42,65,65,66,66,66,82,100,98,98,98,98,98,100,99,99},
 {7,15,15,15,16,16,18,18,20,20,20,24,24,24,24,24,34,34,34,42,42,42,42,42,42,42,65,65,66,66,66,100,100,98,98,98,98,98,100,99,100},
 {7,15,15,15,16,17,16,20,20,20,21,24,24,28,28,31,34,31,34,34,42,42,42,42,42,42,66,65,66,66,82,82,98,98,98,98,98,98,100,100,100},
 {7,15,15,15,16,16,16,16,20,20,21,24,24,28,31,31,31,31,34,34,42,42,42,42,42,42,66,66,66,66,82,99,98,98,98,98,98,100,100,100,100},
 {7,15,15,15,16,16,16,16,20,21,21,24,24,24,31,31,38,31,31,42,42,42,42,42,42,42,66,66,66,66,66,82,98,98,98,98,98,100,100,100,100},
 {7,15,15,15,16,17,16,20,20,21,21,24,24,24,31,31,31,31,31,42,42,42,42,42,42,42,66,66,66,66,82,95,95,98,98,98,98,100,100,100,100},
 {7,15,15,16,16,16,16,20,20,20,20,24,24,24,24,33,31,31,42,42,42,42,42,42,42,66,66,66,66,66,82,94,100,98,98,98,100,100,100,100,100},
 {7,16,16,16,16,16,16,20,20,20,20,24,24,24,24,33,31,31,31,42,42,42,42,42,42,66,66,66,66,66,82,95,100,98,98,98,98,100,100,100,100},
 {7,16,16,16,16,16,16,20,20,20,23,24,24,24,24,33,33,33,34,45,42,42,42,61,62,62,66,66,66,82,82,95,100,100,98,98,100,100,100,100,100},
 {7,16,16,16,16,16,16,20,20,20,24,24,24,32,32,33,33,33,34,38,38,45,45,61,61,62,66,66,66,82,82,99,99,100,100,100,100,100,100,100,100},
 {7,16,16,16,16,16,16,21,21,21,21,24,24,32,32,33,33,33,33,38,38,38,45,61,61,66,66,66,66,82,82,82,100,100,98,100,100,100,100,100,100},
 {7,16,16,16,16,16,16,21,21,21,24,24,24,24,32,33,33,33,33,38,38,45,45,61,61,66,66,66,66,82,82,99,99,99,99,100,100,100,100,100,100},
 {7,16,16,16,17,16,16,22,21,21,24,24,24,24,24,33,33,33,38,38,38,45,45,61,61,61,61,61,82,82,82,99,99,99,98,98,100,100,100,100,100},
 {7,16,16,16,17,16,16,16,21,21,24,24,24,24,24,33,34,34,38,38,38,45,45,61,61,61,61,72,82,82,82,99,99,99,98,98,98,98,100,100,100},
 {7,16,16,17,17,16,21,21,21,24,24,24,24,24,24,34,34,34,36,38,38,45,44,61,61,61,61,82,82,82,82,99,99,99,98,98,98,98,100,98,98},
 {7,16,16,17,17,18,21,21,21,24,24,24,24,24,31,31,31,34,36,36,49,44,44,60,60,61,61,82,82,82,82,100,99,99,98,98,98,98,98,98,98},
 {7,16,17,17,17,18,21,21,21,21,24,27,24,27,31,31,36,36,36,36,44,44,44,60,60,61,61,82,82,82,82,100,99,98,98,98,98,98,99,99,99},
 {7,16,16,17,17,18,21,23,21,21,24,27,24,24,31,31,31,36,36,36,44,44,44,60,60,60,61,82,82,82,82,99,99,98,98,98,98,99,99,99,99},
 {7,17,17,17,18,18,21,21,21,25,25,25,24,24,31,31,31,36,44,43,44,45,44,60,60,60,61,74,82,82,82,99,99,98,100,98,98,99,99,99,99},
 {7,17,17,17,17,18,21,21,21,21,25,25,29,29,29,31,31,36,44,44,44,44,44,60,60,60,73,73,82,82,82,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,17,18,21,21,21,25,25,25,25,25,25,31,31,36,44,44,44,44,60,60,60,60,73,73,82,82,82,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,17,18,21,21,21,25,25,25,25,25,31,31,31,36,44,44,44,44,60,60,60,60,72,73,82,82,100,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,18,18,21,21,21,25,25,25,25,25,31,31,36,36,44,44,44,44,60,60,60,60,72,73,82,82,100,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,18,18,18,21,21,25,25,25,25,25,25,35,36,36,43,44,44,44,44,44,60,60,73,73,89,89,100,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,18,18,18,21,21,25,25,25,25,25,25,37,36,36,43,44,44,44,44,54,60,60,73,73,73,89,100,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,18,18,21,21,21,25,25,25,25,25,25,39,36,36,36,44,44,44,54,54,60,60,73,88,89,89,100,99,99,98,98,98,98,99,99,99,99},
 {8,17,17,17,18,18,21,21,21,25,25,25,25,25,36,36,36,36,36,44,44,44,54,54,60,60,73,88,89,89,100,99,99,98,98,98,99,99,99,99,99},
 {8,17,18,18,18,18,18,21,21,21,26,25,25,34,36,36,36,36,36,44,44,44,54,54,60,60,73,73,89,89,100,99,99,99,100,98,100,99,99,99,99},
 {8,18,18,18,18,18,18,21,21,21,26,25,25,25,35,35,35,36,44,44,44,44,44,60,60,60,73,73,88,89,100,99,99,99,98,98,100,99,99,99,99},
 {8,18,18,18,18,18,22,21,21,21,26,25,27,27,35,35,35,36,44,44,44,44,60,60,60,60,60,60,89,89,100,99,99,99,99,99,100,100,99,99,99},
 {8,18,18,18,18,18,22,21,22,26,25,25,27,30,30,35,36,36,44,44,44,44,60,60,60,60,60,89,89,89,89,99,99,99,99,99,100,100,100,99,99},
 {8,18,18,18,18,22,22,22,22,25,24,28,27,27,30,30,38,38,44,44,44,44,60,60,60,60,60,89,89,89,100,99,99,99,99,99,100,100,99,99,4},
 {8,18,18,18,18,18,22,22,22,25,25,30,30,30,30,35,38,38,44,44,44,44,60,60,60,60,60,89,89,89,100,99,99,99,99,99,100,100,100,100,4},
 {8,18,18,18,18,19,22,22,22,22,25,30,30,30,30,30,38,38,44,44,44,44,44,60,60,60,60,89,89,89,100,100,99,99,99,99,99,100,100,100,4},
 {8,18,18,18,18,19,22,24,24,25,25,30,30,30,30,30,38,38,43,44,44,44,44,60,60,60,60,89,89,89,100,99,99,99,99,99,99,99,100,100,4},
 {8,18,18,18,18,19,22,22,24,24,25,30,30,30,35,38,38,38,43,43,44,44,60,60,60,59,60,89,89,89,100,99,99,99,99,99,99,100,100,100,4},
 {8,18,18,18,18,19,22,24,24,24,24,24,30,30,30,34,38,38,44,43,44,60,60,60,60,60,60,89,90,90,100,99,99,98,98,99,99,99,100,100,4},
 {8,18,18,18,19,19,22,24,24,24,27,27,30,30,35,38,38,38,38,44,44,44,60,60,60,60,71,89,90,90,99,99,99,100,98,98,99,100,100,100,4},
 {8,18,18,18,19,19,24,25,25,24,27,27,30,30,30,38,38,38,38,44,44,44,60,60,60,60,71,89,90,90,99,99,99,99,99,100,100,100,100,100,4},
 {8,18,19,19,19,19,22,24,24,24,27,27,30,30,30,38,38,38,38,44,44,44,60,60,60,60,71,72,90,100,100,99,99,99,99,100,100,100,100,100,4},
 {8,18,19,19,19,19,19,24,24,24,27,27,30,30,30,38,38,38,44,44,44,44,60,62,62,62,71,72,90,90,99,99,99,99,99,100,100,100,100,100,4},
 {8,19,19,19,19,19,23,24,24,27,27,30,30,30,30,38,38,38,44,44,44,44,62,62,62,71,71,71,90,90,99,99,100,99,100,100,100,100,100,100,4},
 {8,19,19,19,19,19,19,24,24,26,27,30,30,30,30,38,38,44,44,44,44,44,62,62,62,71,71,72,100,99,99,99,99,100,100,100,100,100,100,100,100},
 {8,19,19,19,19,21,19,24,24,24,27,30,30,34,34,38,38,44,44,44,44,44,62,62,62,62,72,72,72,100,99,99,99,100,100,100,100,100,100,100,4},
 {8,19,19,19,21,21,19,24,24,27,27,30,30,30,34,34,44,44,44,44,44,62,62,62,62,62,72,72,97,97,99,99,99,99,100,100,100,100,100,100,4},
 {8,19,19,19,21,21,21,24,24,23,27,27,30,30,34,34,44,44,44,44,44,62,62,62,62,72,72,72,97,97,99,99,99,99,100,100,100,100,99,100,4},
 {8,19,19,19,21,21,21,24,24,25,27,27,30,30,34,34,44,44,44,44,44,62,62,62,62,72,72,72,72,97,99,99,99,100,100,100,100,100,100,100,4},
 {8,19,19,19,21,21,24,24,24,27,27,30,30,30,30,34,44,44,44,44,44,62,62,62,62,62,72,72,72,100,100,99,99,99,100,100,100,100,100,100,4},
 {8,19,19,19,20,20,24,24,24,27,27,30,30,30,30,40,44,44,44,44,44,62,62,62,62,72,72,72,72,99,99,99,100,100,100,100,100,100,100,100,4},
 {8,19,19,19,20,21,21,24,24,27,27,27,30,30,30,41,44,44,44,44,44,62,62,62,62,62,72,72,100,99,99,99,99,100,100,100,100,100,100,100,4},
 {8,19,19,20,20,20,21,24,24,27,27,27,30,30,30,42,42,44,44,44,44,62,62,62,62,62,72,72,99,100,99,100,99,100,100,100,100,100,100,100,4},
 {8,19,19,20,20,23,23,24,24,27,27,30,30,30,30,42,42,44,44,44,44,62,62,62,62,72,72,72,72,100,100,100,100,100,100,100,100,100,100,100,4},
 {8,19,20,20,20,20,24,24,24,27,27,30,30,30,30,42,42,44,44,44,62,62,62,62,62,72,72,72,72,100,100,100,100,100,100,100,100,100,100,100,4},
 {8,19,20,20,20,20,24,24,24,27,27,28,30,30,30,42,42,44,44,44,44,62,62,62,62,72,72,72,72,100,100,100,100,100,100,100,100,100,100,100,4},
 {8,19,20,20,20,21,24,24,24,27,27,30,30,30,30,42,42,42,44,44,62,62,62,62,62,72,72,72,72,100,100,100,100,100,100,100,100,100,100,100,4},
 {8,20,20,20,20,21,24,24,24,27,27,30,30,32,32,42,42,42,44,44,62,62,62,62,62,72,72,72,72,100,100,100,100,100,100,100,100,100,100,100,4},
 {8,20,20,20,20,20,24,24,24,27,27,32,30,32,32,32,42,42,44,44,62,62,62,62,62,72,72,96,100,100,100,100,100,100,100,100,100,100,100,100,4},
 {8,20,20,20,20,21,24,24,24,24,27,27,31,32,32,41,42,42,44,44,62,62,62,62,62,72,72,96,96,100,100,100,100,100,100,100,95,95,100,100,4} };

  double hyperMaxScore[101][41] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {2e+08,1.22059e+08,1.24265e+08,1.16243e+08,1.06536e+08,8.99522e+07,8.86364e+07,8.13708e+07,8.15278e+07,8.05792e+07,7.20385e+07,5.97188e+07,6.02667e+07,5.7513e+07,5.3962e+07,4.82233e+07,4.6325e+07,4.48861e+07,4.20336e+07,3.64815e+07,3.68313e+07,3.61111e+07,3.5e+07,3.44821e+07,3.36842e+07,3.17967e+07,2.62105e+07,2.6084e+07,2.25573e+07,2.13876e+07,1.912e+07,1.72084e+07,1.34132e+07,1.30117e+07,1.30031e+07,1.27273e+07,9.94092e+06,9.55354e+06,9.13131e+06,6.39016e+06,3.00542e+06},
  {2e+08,1.22059e+08,1.17237e+08,1.06356e+08,1.00883e+08,8.95455e+07,8.89952e+07,8.28431e+07,8.12917e+07,7.37652e+07,7.03376e+07,5.85594e+07,5.69437e+07,5.2665e+07,5.0647e+07,4.77079e+07,4.45919e+07,4.32892e+07,4.002e+07,3.66472e+07,3.64815e+07,3.53383e+07,3.51504e+07,3.5e+07,3.286e+07,3.14943e+07,2.66466e+07,2.62692e+07,2.24365e+07,2.17995e+07,2.06213e+07,1.57722e+07,1.30855e+07,1.32555e+07,1.21309e+07,1.12672e+07,1.01475e+07,9.33782e+06,8.38182e+06,3.92203e+06,1.24819e+06},
  {2e+08,1.18257e+08,1.08944e+08,1.0376e+08,1.01939e+08,9.48421e+07,8.20175e+07,8.15789e+07,7.20385e+07,7.19231e+07,6.91846e+07,6.06618e+07,5.64344e+07,5.36897e+07,4.88889e+07,4.77059e+07,4.42912e+07,4.27584e+07,4.0303e+07,3.57143e+07,3.53383e+07,3.55159e+07,3.49624e+07,3.46607e+07,3.31609e+07,3.26054e+07,2.66286e+07,2.48187e+07,2.35438e+07,2.18575e+07,2.0795e+07,1.47673e+07,1.34664e+07,1.26736e+07,1.15427e+07,1.0101e+07,1.0101e+07,7.76384e+06,5.36314e+06,3.28095e+06,688186},
  {2e+08,1.08995e+08,1.06528e+08,9.89474e+07,9.79474e+07,9.39444e+07,9.00255e+07,7.55656e+07,6.83808e+07,7.09231e+07,6.62406e+07,5.80559e+07,5.71691e+07,5.35395e+07,4.69211e+07,4.59444e+07,4.46706e+07,4.13961e+07,3.53383e+07,3.51786e+07,3.57143e+07,3.38742e+07,3.46607e+07,3.36714e+07,3.21942e+07,3.06207e+07,2.72129e+07,2.23904e+07,2.24534e+07,1.97954e+07,1.95855e+07,1.56831e+07,1.35957e+07,1.18354e+07,1.12209e+07,1.0101e+07,8.92929e+06,7.27902e+06,5.66146e+06,2.81283e+06,821201},
  {2e+08,1.08213e+08,1e+08,9.88889e+07,9.4745e+07,9.01695e+07,8.76611e+07,7.26923e+07,7.40556e+07,6.98808e+07,6.84484e+07,5.99632e+07,5.81618e+07,5.04509e+07,4.77079e+07,4.54652e+07,4.51053e+07,4.09884e+07,3.55159e+07,3.50179e+07,3.50179e+07,3.30629e+07,3.36714e+07,3.38742e+07,3.24983e+07,2.68129e+07,2.60571e+07,2.24247e+07,2.22956e+07,2.16789e+07,1.91404e+07,1.51459e+07,1.34217e+07,1.17119e+07,1.08811e+07,1.0324e+07,9.51515e+06,6.58477e+06,4.11496e+06,2.15135e+06,550086},
  {2e+08,1e+08,9.83889e+07,9.5245e+07,9.31765e+07,8.93278e+07,8.17105e+07,7.34008e+07,7.16238e+07,6.76429e+07,6.41692e+07,5.74963e+07,5.47022e+07,4.80865e+07,4.76765e+07,4.42316e+07,4.24959e+07,3.95442e+07,3.51504e+07,3.49624e+07,3.5119e+07,3.34686e+07,3.24544e+07,3.23593e+07,2.74603e+07,2.75966e+07,2.62692e+07,2.45344e+07,2.0894e+07,2.09318e+07,1.87247e+07,1.53798e+07,1.43632e+07,1.09882e+07,1.08614e+07,9.2795e+06,8.3391e+06,6.06651e+06,3.88655e+06,2.31251e+06,765126},
  {2e+08,9.89444e+07,9.64706e+07,9.67222e+07,9.2145e+07,8.76158e+07,8.27095e+07,7.23462e+07,6.79607e+07,6.35964e+07,5.82188e+07,5.68015e+07,5.42951e+07,5.14807e+07,4.5945e+07,4.56389e+07,4.28833e+07,3.84949e+07,3.50179e+07,3.40996e+07,3.37356e+07,3.26572e+07,3.286e+07,2.92484e+07,2.78571e+07,2.78992e+07,2.66984e+07,2.60902e+07,2.06489e+07,1.97359e+07,1.69176e+07,1.5797e+07,1.4591e+07,1.13118e+07,9.62361e+06,9.73413e+06,8.07594e+06,6.3137e+06,4.86635e+06,2.59163e+06,682805},
  {1.66667e+08,9.70588e+07,9.355e+07,9.04306e+07,8.87701e+07,8.46177e+07,8.15789e+07,7.61698e+07,6.6312e+07,5.99632e+07,5.86029e+07,5.37608e+07,5.27169e+07,4.79913e+07,4.59722e+07,4.27489e+07,4.10722e+07,4.09003e+07,3.69124e+07,3.26054e+07,3.27387e+07,3.19655e+07,2.99465e+07,2.92576e+07,2.93167e+07,2.63759e+07,2.61323e+07,2.1336e+07,1.98309e+07,2.02444e+07,1.83899e+07,1.61134e+07,1.41987e+07,1.17018e+07,1.02008e+07,9.79897e+06,8.47815e+06,6.09916e+06,4.52881e+06,2.31414e+06,743659},
  {1.66667e+08,9.46056e+07,9.09091e+07,8.95215e+07,8.83136e+07,8.35859e+07,8.1412e+07,7.75435e+07,6.40967e+07,6.07986e+07,5.61111e+07,5.30197e+07,5.13167e+07,4.725e+07,4.60975e+07,4.10517e+07,3.98893e+07,3.56318e+07,3.38546e+07,3.31609e+07,3.22123e+07,3.21207e+07,2.98246e+07,2.99841e+07,2.89697e+07,2.58381e+07,2.4356e+07,2.06885e+07,1.8504e+07,2.02085e+07,1.88807e+07,1.5126e+07,1.49551e+07,1.1654e+07,1.00567e+07,9.37194e+06,8.0829e+06,7.18528e+06,4.2355e+06,2.00491e+06,712363},
  {1.66667e+08,9.018e+07,8.95455e+07,8.06019e+07,8.04583e+07,8.19323e+07,7.26923e+07,6.5614e+07,6.48148e+07,5.6761e+07,5.32551e+07,5.21355e+07,5.08228e+07,4.71176e+07,4.49417e+07,4.10292e+07,3.9285e+07,3.574e+07,3.26706e+07,3.1031e+07,3.01347e+07,2.98246e+07,2.99663e+07,2.9798e+07,2.58095e+07,2.45462e+07,2.39894e+07,2.16627e+07,2.08739e+07,1.90898e+07,1.74958e+07,1.55037e+07,1.28563e+07,1.08696e+07,1.0188e+07,9.66387e+06,7.60957e+06,6.41877e+06,4.41431e+06,2.27338e+06,701496},
  {1.66667e+08,9.18833e+07,8.95215e+07,8.24561e+07,8.15789e+07,7.30324e+07,7.06115e+07,6.46632e+07,6.50333e+07,5.74632e+07,5.46111e+07,5.33803e+07,4.61048e+07,4.54447e+07,4.30158e+07,4.16797e+07,3.764e+07,3.75368e+07,3.25461e+07,3.27609e+07,2.99841e+07,2.99841e+07,2.95455e+07,2.78346e+07,2.61038e+07,2.38408e+07,2.02419e+07,2.18687e+07,2.06042e+07,1.86632e+07,1.76341e+07,1.36021e+07,1.3192e+07,1.07551e+07,1.03093e+07,9.64948e+06,7.24531e+06,7.15627e+06,4.96738e+06,2.26043e+06,762564},
  {1.66667e+08,9.02941e+07,8.33333e+07,8.20175e+07,8.07456e+07,7.85784e+07,7.27639e+07,6.87088e+07,6.27633e+07,5.91632e+07,5.66776e+07,5.22464e+07,5.00474e+07,4.40392e+07,4.24503e+07,4.11322e+07,3.73053e+07,3.48318e+07,3.31367e+07,3.21218e+07,2.98246e+07,2.98485e+07,2.91212e+07,2.71587e+07,2.56216e+07,2.51059e+07,2.33805e+07,2.05107e+07,1.89412e+07,1.815e+07,1.70031e+07,1.34232e+07,1.29731e+07,1.14302e+07,1.01031e+07,9.36031e+06,8.10077e+06,6.34321e+06,3.88577e+06,2.19604e+06,556360},
  {1.66667e+08,8.39765e+07,8.24561e+07,8.24561e+07,7.86167e+07,7.51004e+07,7.39846e+07,6.94295e+07,6.12537e+07,5.85906e+07,5.87434e+07,5.2155e+07,5.07525e+07,4.55265e+07,4.44892e+07,4.06658e+07,3.67452e+07,3.42486e+07,3.24946e+07,3.0303e+07,2.95455e+07,2.82353e+07,2.7916e+07,2.74118e+07,2.65002e+07,2.45432e+07,2.22552e+07,1.88937e+07,1.81961e+07,1.82471e+07,1.60288e+07,1.39697e+07,1.24952e+07,1.04055e+07,1.02008e+07,8.88293e+06,7.78058e+06,6.53665e+06,4.32392e+06,1.76697e+06,509475},
  {1.66667e+08,8.39706e+07,8.24561e+07,8.16667e+07,8.13725e+07,7.39042e+07,7.23009e+07,6.05633e+07,5.95588e+07,5.80556e+07,5.58191e+07,5.13961e+07,4.71176e+07,4.41885e+07,3.9852e+07,3.96166e+07,3.52243e+07,3.27138e+07,3.14223e+07,2.95455e+07,2.9681e+07,2.80672e+07,2.73635e+07,2.6012e+07,2.52957e+07,2.32336e+07,1.71916e+07,1.87889e+07,1.88353e+07,1.70395e+07,1.6297e+07,1.3936e+07,1.26665e+07,1.0084e+07,9.59694e+06,8.13237e+06,7.63825e+06,6.11554e+06,3.87582e+06,1.49544e+06,401693},
  {1.66667e+08,8.25061e+07,8.28704e+07,8.20614e+07,8.12917e+07,7.7549e+07,7.17329e+07,6.21633e+07,5.89474e+07,5.68094e+07,5.47832e+07,5.26747e+07,4.74412e+07,4.62353e+07,4.17634e+07,3.78038e+07,3.55882e+07,3.36599e+07,3.08018e+07,2.85714e+07,2.80357e+07,2.8e+07,2.74603e+07,2.60986e+07,2.46377e+07,2.33417e+07,2.11192e+07,1.92941e+07,1.89884e+07,1.63196e+07,1.39446e+07,1.34387e+07,1.24952e+07,1.01441e+07,9.96399e+06,9.28883e+06,7.39483e+06,6.24001e+06,3.23364e+06,1.39008e+06,356151},
  {1.66667e+08,8.33333e+07,8.20833e+07,8.17083e+07,7.53846e+07,7.82412e+07,6.59337e+07,5.97569e+07,5.65208e+07,5.61844e+07,5.4553e+07,4.83889e+07,4.68306e+07,4.45684e+07,4.12228e+07,3.77489e+07,3.51579e+07,3.28656e+07,3.1591e+07,2.77937e+07,2.79699e+07,2.7619e+07,2.67731e+07,2.50955e+07,2.35341e+07,2.10169e+07,2.03019e+07,2.06178e+07,1.77364e+07,1.65705e+07,1.59389e+07,1.34358e+07,1.22373e+07,1.00483e+07,9.75e+06,8.55474e+06,7.22598e+06,5.10872e+06,2.93057e+06,1.14692e+06,203982},
  {1.66667e+08,8.33333e+07,8.17083e+07,7.61134e+07,6.90873e+07,6.84874e+07,6.65357e+07,5.99265e+07,5.79656e+07,5.62105e+07,4.755e+07,4.79706e+07,4.65588e+07,4.26108e+07,3.91665e+07,3.77545e+07,3.47842e+07,3.35679e+07,3.14082e+07,2.82353e+07,2.80952e+07,2.65714e+07,2.66016e+07,2.58767e+07,2.40459e+07,2.18642e+07,2.15556e+07,2.07591e+07,1.76268e+07,1.66541e+07,1.59822e+07,1.29466e+07,1.23523e+07,9.99468e+06,9.46465e+06,7.7964e+06,6.78981e+06,4.72876e+06,3.21668e+06,1.15875e+06,233296},
  {1.66667e+08,8.24561e+07,7.64957e+07,7.64706e+07,7.50385e+07,6.89076e+07,6.13971e+07,5.80281e+07,5.8178e+07,5.58611e+07,4.84211e+07,4.51176e+07,4.47394e+07,4.18778e+07,3.83026e+07,3.40033e+07,3.50719e+07,3.16675e+07,2.8254e+07,2.82707e+07,2.79365e+07,2.76508e+07,2.65671e+07,2.46467e+07,2.2653e+07,2.17778e+07,2.06178e+07,2.00892e+07,1.71429e+07,1.41422e+07,1.39446e+07,1.30856e+07,1.22564e+07,9.99468e+06,9.57469e+06,7.96887e+06,6.72627e+06,4.98908e+06,3.52972e+06,1.29921e+06,271125},
  {1.66667e+08,7.69231e+07,7.61134e+07,7.64957e+07,7.52137e+07,6.70643e+07,6.13971e+07,5.75e+07,5.58424e+07,5.68974e+07,4.65778e+07,4.59412e+07,4.80308e+07,4.19067e+07,4.13212e+07,3.59283e+07,3.30525e+07,2.86765e+07,2.87191e+07,2.8e+07,2.73e+07,2.64216e+07,2.56843e+07,2.47536e+07,2.21079e+07,2.18889e+07,2.04604e+07,1.97587e+07,1.94055e+07,1.4109e+07,1.35054e+07,1.26038e+07,1.24087e+07,9.3695e+06,1e+07,8.264e+06,6.28539e+06,4.82938e+06,2.95398e+06,1.40976e+06,321310},
  {1.66667e+08,7.69231e+07,7.64957e+07,7.61134e+07,7.41388e+07,6.71429e+07,6.01042e+07,5.93388e+07,5.6773e+07,5.21692e+07,4.79412e+07,4.74118e+07,4.52029e+07,4.31198e+07,3.83686e+07,3.43912e+07,3.32738e+07,2.88382e+07,2.83971e+07,2.85948e+07,2.79739e+07,2.67183e+07,2.42322e+07,2.34024e+07,2.1413e+07,2.08937e+07,2.05252e+07,1.77273e+07,1.68938e+07,1.59153e+07,1.39044e+07,1.32313e+07,1.02363e+07,9.27842e+06,9.01667e+06,7.99721e+06,6.16995e+06,5.29267e+06,3.02199e+06,1.0547e+06,233443},
  {1.66667e+08,7.64957e+07,7.69231e+07,7.57692e+07,7.46154e+07,6.47857e+07,6.10662e+07,5.67105e+07,5.71146e+07,5.38326e+07,4.62722e+07,4.82647e+07,4.59694e+07,4.10002e+07,3.53229e+07,3.51604e+07,3.35011e+07,3.27261e+07,2.89628e+07,2.74303e+07,2.73359e+07,2.65917e+07,2.42979e+07,2.31124e+07,2.16247e+07,2.04783e+07,2.00725e+07,1.76718e+07,1.67166e+07,1.5896e+07,1.29069e+07,1.21729e+07,9.82151e+06,9.2795e+06,8.8225e+06,7.6302e+06,6.2764e+06,5.52267e+06,3.02451e+06,915679,179533},
  {1.66667e+08,7.69231e+07,7.57085e+07,7.10317e+07,7.46113e+07,6.64706e+07,5.59082e+07,5.72222e+07,5.36176e+07,4.82647e+07,4.73824e+07,4.48824e+07,4.18324e+07,4.14503e+07,3.76438e+07,3.49116e+07,3.42727e+07,3.05416e+07,2.86111e+07,2.80492e+07,2.68301e+07,2.51029e+07,2.59637e+07,2.17657e+07,1.97847e+07,2.03587e+07,1.90424e+07,1.75455e+07,1.73476e+07,1.60203e+07,1.30422e+07,1.20822e+07,1.05367e+07,9.93833e+06,9.33333e+06,7.23615e+06,6.38763e+06,4.5855e+06,2.36947e+06,940232,202057},
  {1.42857e+08,7.64957e+07,7.69231e+07,7.25911e+07,7.01923e+07,6.86073e+07,6.16121e+07,5.30556e+07,5.19923e+07,4.79706e+07,4.74676e+07,4.59971e+07,4.27853e+07,4.1297e+07,3.84714e+07,3.61184e+07,3.30689e+07,2.87217e+07,2.87197e+07,2.72779e+07,2.81209e+07,2.5799e+07,2.55031e+07,2.08751e+07,2.11589e+07,1.86123e+07,1.77273e+07,1.72299e+07,1.71444e+07,1.63209e+07,1.34211e+07,1.21429e+07,1.0268e+07,9.55172e+06,8.33813e+06,7.87528e+06,6.24937e+06,4.56386e+06,2.40029e+06,898237,161629},
  {1.42857e+08,7.64957e+07,7.33603e+07,6.99812e+07,6.37037e+07,6.26667e+07,5.78947e+07,5.34541e+07,5e+07,4.76765e+07,4.68278e+07,4.54971e+07,4.27755e+07,3.89608e+07,3.71998e+07,3.65011e+07,3.35434e+07,3.11593e+07,2.88927e+07,2.78382e+07,2.71799e+07,2.621e+07,2.48722e+07,2.05581e+07,2.04174e+07,1.88468e+07,1.76455e+07,1.75508e+07,1.61092e+07,1.59187e+07,1.32551e+07,1.20287e+07,1.03272e+07,9.79608e+06,9.15714e+06,7.77384e+06,6.19072e+06,4.21469e+06,2.4911e+06,821928,171914},
  {1.42857e+08,7.55656e+07,7.13765e+07,7.06349e+07,6.92857e+07,6.20596e+07,5.67183e+07,5.2716e+07,4.91667e+07,4.73824e+07,4.58921e+07,4.29692e+07,4.07989e+07,3.72565e+07,3.76471e+07,3.53479e+07,3.31494e+07,3.06795e+07,2.84477e+07,2.73359e+07,2.68685e+07,2.63039e+07,2.30702e+07,2.12644e+07,2.05075e+07,1.80861e+07,1.77364e+07,1.73369e+07,1.69182e+07,1.54729e+07,1.35866e+07,1.24408e+07,1.09727e+07,1.03211e+07,8.95012e+06,7.37204e+06,5.71572e+06,3.61476e+06,2.20844e+06,548204,128884},
  {1.42857e+08,7.14286e+07,7.10317e+07,7.06349e+07,6.93214e+07,6.17667e+07,5.40404e+07,5.29119e+07,4.88235e+07,4.78e+07,4.47e+07,4.14716e+07,3.99709e+07,3.62726e+07,3.70515e+07,3.64071e+07,3.41694e+07,2.7923e+07,2.78893e+07,2.72318e+07,2.59213e+07,2.40871e+07,2.2423e+07,2.17831e+07,2.06587e+07,1.93362e+07,1.63155e+07,1.7504e+07,1.67369e+07,1.55155e+07,1.35372e+07,1.25908e+07,1.00208e+07,9.70228e+06,9.09391e+06,6.70986e+06,4.87711e+06,3.27839e+06,1.71448e+06,626060,135875},
  {1.42857e+08,7.14286e+07,7.03571e+07,6.92857e+07,6.26667e+07,6.11633e+07,5.38889e+07,5.22415e+07,4.76765e+07,4.57059e+07,4.38089e+07,4.17976e+07,3.73527e+07,3.88235e+07,3.78897e+07,3.48801e+07,2.99608e+07,2.90061e+07,2.81518e+07,2.73676e+07,2.66955e+07,2.43876e+07,2.22168e+07,2.0993e+07,2.05291e+07,1.87109e+07,1.69175e+07,1.73476e+07,1.60051e+07,1.51587e+07,1.39289e+07,1.2373e+07,1.15152e+07,9.094e+06,7.79051e+06,6.14227e+06,4.5234e+06,3.02577e+06,1.75351e+06,516411,100427},
  {1.42857e+08,7.14286e+07,7.14286e+07,6.99248e+07,6.48519e+07,6.02078e+07,5.42593e+07,5.44152e+07,4.7075e+07,4.59184e+07,4.28003e+07,4.20601e+07,3.94562e+07,3.79782e+07,3.54487e+07,3.55442e+07,3.29714e+07,2.7741e+07,2.69219e+07,2.54458e+07,2.55501e+07,2.28968e+07,2.22354e+07,2.16856e+07,2.07989e+07,1.86899e+07,1.77778e+07,1.73369e+07,1.58496e+07,1.39273e+07,1.34343e+07,1.16012e+07,1.04167e+07,9.38731e+06,8.88984e+06,7.40302e+06,5.52696e+06,2.43607e+06,1.76746e+06,481858,91983.3},
  {1.42857e+08,7.14286e+07,7.14286e+07,7.10084e+07,6.95865e+07,6.39216e+07,5.44444e+07,5.19241e+07,4.81842e+07,4.54447e+07,4.54412e+07,4.09692e+07,3.97785e+07,3.90907e+07,3.76446e+07,3.64943e+07,3.19046e+07,2.99642e+07,2.58879e+07,2.54282e+07,2.29449e+07,2.31092e+07,2.2094e+07,2.2563e+07,1.98548e+07,1.90653e+07,1.76997e+07,1.63006e+07,1.56782e+07,1.36021e+07,1.29458e+07,1.18804e+07,1.02083e+07,9.47163e+06,9.26654e+06,7.16257e+06,4.59923e+06,2.23073e+06,849136,411391,90709.8},
  {1.42857e+08,7.14286e+07,7.14286e+07,6.9425e+07,6.25263e+07,5.85312e+07,5.32126e+07,5.23563e+07,5.13961e+07,4.70278e+07,4.36625e+07,3.86467e+07,4.07574e+07,3.89232e+07,3.7027e+07,3.36641e+07,3.61596e+07,2.55002e+07,2.67044e+07,2.35589e+07,2.33083e+07,2.30702e+07,2.2437e+07,2.20448e+07,2.08004e+07,1.93076e+07,1.65958e+07,1.52137e+07,1.36159e+07,1.31438e+07,1.2834e+07,1.18178e+07,1.01496e+07,9.62229e+06,8.69178e+06,7.45972e+06,3.78226e+06,2.05193e+06,1.2515e+06,476242,91860.8},
  {1.42857e+08,7.14286e+07,7.10084e+07,6.99248e+07,6.26281e+07,5.8352e+07,5.40657e+07,5.2716e+07,5.14056e+07,4.46097e+07,4.34031e+07,3.91766e+07,4.02206e+07,3.69653e+07,3.6098e+07,3.52353e+07,3.19398e+07,3.09486e+07,2.57105e+07,2.47119e+07,2.31298e+07,2.29832e+07,2.21429e+07,2.15492e+07,1.95371e+07,1.76455e+07,1.59562e+07,1.50769e+07,1.34429e+07,1.28592e+07,1.25761e+07,1.04167e+07,1e+07,9.55672e+06,7.76171e+06,6.59331e+06,4.7363e+06,2.55592e+06,1.40631e+06,456778,102050},
  {1.42857e+08,7.06767e+07,6.99624e+07,6.52619e+07,6.49275e+07,5.76941e+07,5.44444e+07,5.2463e+07,5.0913e+07,4.74382e+07,4.34408e+07,4.29111e+07,3.89452e+07,3.74539e+07,3.5691e+07,3.49404e+07,3.14535e+07,2.91934e+07,2.58296e+07,2.56683e+07,2.30423e+07,2.25384e+07,2.16106e+07,2.02808e+07,1.95229e+07,1.77456e+07,1.52227e+07,1.49231e+07,1.4362e+07,1.34501e+07,1.24841e+07,1e+07,1.02083e+07,8.80301e+06,8.2008e+06,6.65365e+06,4.61948e+06,2.08611e+06,1.19782e+06,392677,107964},
  {1.42857e+08,7.06349e+07,6.73179e+07,6.51538e+07,6.47e+07,5.91912e+07,5.32407e+07,5.29469e+07,4.68475e+07,4.81361e+07,4.42764e+07,4.05151e+07,3.85539e+07,3.73357e+07,3.81375e+07,3.45442e+07,3.08897e+07,2.9601e+07,2.7009e+07,2.38144e+07,2.28917e+07,2.19034e+07,2.10172e+07,2.12843e+07,1.95431e+07,1.64532e+07,1.53846e+07,1.5e+07,1.39983e+07,1.35177e+07,1.29643e+07,9.95312e+06,9.36e+06,9.41786e+06,7.64424e+06,5.5125e+06,4.22165e+06,2.92841e+06,1.34534e+06,379152,64096.2},
  {1.42857e+08,6.65432e+07,6.66667e+07,6.55556e+07,6.50667e+07,5.85312e+07,5.34954e+07,5.15722e+07,4.68947e+07,4.39352e+07,4.20897e+07,4.21292e+07,3.87269e+07,3.64752e+07,3.48769e+07,3.45689e+07,3.00691e+07,2.70663e+07,2.61285e+07,2.35294e+07,2.32262e+07,2.15656e+07,2.26036e+07,2.01873e+07,1.92832e+07,1.61882e+07,1.50769e+07,1.48413e+07,1.43266e+07,1.37781e+07,1.24725e+07,1.1206e+07,9.415e+06,8.98818e+06,7.69779e+06,6.26417e+06,4.08612e+06,2.04337e+06,1.26006e+06,419218,68690.2},
  {1.42857e+08,6.66667e+07,6.62745e+07,6.46667e+07,6.125e+07,5.73406e+07,5.30635e+07,5.04676e+07,4.74676e+07,4.35421e+07,4.22639e+07,3.8794e+07,3.60273e+07,4e+07,3.72346e+07,3.33579e+07,2.63392e+07,2.56799e+07,2.54001e+07,2.31955e+07,2.31614e+07,2.26942e+07,2.2437e+07,2.06032e+07,1.92027e+07,1.64555e+07,1.50077e+07,1.46239e+07,1.41987e+07,1.418e+07,1.24084e+07,9.805e+06,9.2795e+06,9.2261e+06,8.08577e+06,5.41867e+06,3.70229e+06,1.52106e+06,1.06982e+06,327351,57255.1},
  {1.42857e+08,6.66667e+07,6.62963e+07,6.62745e+07,6.09688e+07,5.63777e+07,5.59306e+07,4.64447e+07,4.69474e+07,4.40588e+07,4.20052e+07,3.87745e+07,3.67824e+07,3.40959e+07,3.42105e+07,2.91686e+07,2.7699e+07,2.75674e+07,2.44854e+07,2.35149e+07,2.26536e+07,2.23202e+07,2.23434e+07,2.15518e+07,1.88977e+07,1.79933e+07,1.45198e+07,1.47e+07,1.3512e+07,1.31979e+07,1.15556e+07,1.05326e+07,9.79538e+06,9.31973e+06,7.55221e+06,6.08805e+06,3.72621e+06,1.75405e+06,1.17484e+06,260592,46968.8},
  {1.42857e+08,6.62963e+07,6.62963e+07,6.5614e+07,6.07986e+07,5.76645e+07,5.68015e+07,4.97605e+07,4.54088e+07,4.27986e+07,4.2724e+07,3.76229e+07,3.80882e+07,3.29286e+07,3.05018e+07,2.95787e+07,2.73282e+07,2.74798e+07,2.6015e+07,2.41303e+07,2.32493e+07,2.29449e+07,2.11457e+07,2.0528e+07,1.89962e+07,1.74548e+07,1.47727e+07,1.45455e+07,1.36187e+07,1.34597e+07,1.10719e+07,9.43333e+06,9.22279e+06,8.94957e+06,8.2119e+06,6.25964e+06,3.3378e+06,2.53042e+06,1.02152e+06,231794,40860.2},
  {1.42857e+08,6.66667e+07,6.66667e+07,6.47e+07,5.94656e+07,5.84375e+07,5.53021e+07,4.97572e+07,4.59184e+07,4.38786e+07,4.31764e+07,3.68428e+07,3.60439e+07,3.35726e+07,3.09298e+07,3.0764e+07,2.51316e+07,2.60296e+07,2.47727e+07,2.36695e+07,2.28898e+07,2.17369e+07,2.12997e+07,1.89729e+07,1.87903e+07,1.67638e+07,1.49203e+07,1.42692e+07,1.35527e+07,1.31487e+07,1.22167e+07,1.0533e+07,9.33617e+06,9.13554e+06,7.6104e+06,6.07302e+06,3.77183e+06,2.27348e+06,824250,218450,35255.6},
  {1.42857e+08,6.66667e+07,6.59649e+07,6.53667e+07,6.03438e+07,5.58173e+07,5.51765e+07,4.66225e+07,4.5245e+07,4.48786e+07,4.17845e+07,3.87634e+07,3.75373e+07,3.41434e+07,3.08548e+07,2.93192e+07,2.83183e+07,2.56454e+07,2.53138e+07,2.35294e+07,2.31232e+07,2.20357e+07,2.22829e+07,1.90356e+07,1.81883e+07,1.71585e+07,1.47528e+07,1.41742e+07,1.38503e+07,1.33906e+07,1.09744e+07,9.95789e+06,9.37584e+06,8.43571e+06,7.76954e+06,6.35836e+06,3.39348e+06,2.66462e+06,844643,207628,42969.9},
  {1.42857e+08,6.59649e+07,6.53667e+07,6.09688e+07,5.99967e+07,5.80556e+07,5.44576e+07,4.70528e+07,4.6e+07,4.17708e+07,3.89541e+07,3.90441e+07,3.69804e+07,3.60245e+07,3.25884e+07,2.87235e+07,2.94567e+07,2.61997e+07,2.19167e+07,2.33135e+07,2.21905e+07,2.27778e+07,2.08375e+07,1.99299e+07,1.90379e+07,1.49242e+07,1.44781e+07,1.45455e+07,1.36407e+07,1.28682e+07,1.11329e+07,1.05131e+07,8.86255e+06,8.01938e+06,7.45716e+06,5.51976e+06,4.65658e+06,2.25574e+06,813383,182473,30562.4},
  {1.42857e+08,6.25e+07,6.25e+07,6.15461e+07,5.83849e+07,5.68316e+07,5.54826e+07,4.75278e+07,4.40134e+07,4.32389e+07,4.1915e+07,3.93981e+07,3.58884e+07,3.31909e+07,3.14302e+07,2.97113e+07,2.80066e+07,2.77147e+07,2.62456e+07,2.29574e+07,2.26942e+07,2.16516e+07,2.0791e+07,1.99399e+07,1.72089e+07,1.4899e+07,1.48039e+07,1.45365e+07,1.3779e+07,1.34323e+07,1.12378e+07,1.01053e+07,8.9795e+06,8.44016e+06,7.11292e+06,5.03924e+06,3.05818e+06,2.17888e+06,909843,182867,35845.9},
  {1.42857e+08,6.21528e+07,6.15625e+07,6.12812e+07,6.04514e+07,5.74031e+07,5.5527e+07,4.6e+07,4.45194e+07,4.43613e+07,4.09348e+07,3.73338e+07,3.51919e+07,3.33127e+07,3.15522e+07,2.88182e+07,2.93418e+07,2.81786e+07,2.52933e+07,2.17778e+07,2.2619e+07,2.1295e+07,1.96942e+07,1.62209e+07,1.6129e+07,1.54839e+07,1.45215e+07,1.42337e+07,1.38503e+07,1.17954e+07,1.138e+07,9.91579e+06,8.58655e+06,7.43594e+06,6.59931e+06,5.18528e+06,4.33584e+06,2.14339e+06,926001,165505,33606.1},
  {1.42857e+08,6.25e+07,6.25e+07,6.15132e+07,6.13971e+07,5.56418e+07,5.54826e+07,4.5695e+07,4.54139e+07,4.31291e+07,3.98819e+07,3.73284e+07,3.60245e+07,2.92647e+07,3.02961e+07,2.92576e+07,2.90431e+07,2.80191e+07,2.39374e+07,2.39183e+07,2.21913e+07,1.96444e+07,1.728e+07,1.62113e+07,1.62006e+07,1.40614e+07,1.48148e+07,1.42026e+07,1.3628e+07,1.17276e+07,1.09299e+07,9.7138e+06,9.22172e+06,7.30727e+06,5.83348e+06,6.00199e+06,3.79967e+06,2.18339e+06,630990,162975,25005.3},
  {1.42857e+08,6.25e+07,6.18421e+07,6.125e+07,5.88438e+07,5.8816e+07,5.13875e+07,4.68922e+07,4.4119e+07,4.39574e+07,4.25539e+07,3.73622e+07,3.61088e+07,3.06328e+07,2.96324e+07,2.96651e+07,2.91212e+07,2.81333e+07,2.71886e+07,2.40336e+07,2.30008e+07,2.1338e+07,1.844e+07,1.62209e+07,1.59617e+07,1.47121e+07,1.44159e+07,1.38198e+07,1.32489e+07,1.15661e+07,1.11829e+07,1.06965e+07,8.37254e+06,7.51889e+06,5.80426e+06,5.59805e+06,3.77109e+06,1.6897e+06,731190,130876,29630.3},
  {1.42857e+08,6.25e+07,6.21528e+07,6.15461e+07,6.10294e+07,5.53688e+07,5.12376e+07,4.66667e+07,4.44048e+07,4.42063e+07,3.78935e+07,3.81127e+07,3.46611e+07,3.25851e+07,2.99836e+07,2.96651e+07,2.86818e+07,2.75423e+07,2.71852e+07,2.36332e+07,2.32798e+07,1.96444e+07,1.67044e+07,1.60656e+07,1.58449e+07,1.47608e+07,1.39815e+07,1.37145e+07,1.28578e+07,1.14499e+07,1.14515e+07,9.56061e+06,8.94293e+06,7.90581e+06,6.74997e+06,4.92579e+06,3.63735e+06,1.62772e+06,684641,132495,23371.1},
  {1.42857e+08,6.25e+07,6.15625e+07,6.15132e+07,5.70882e+07,5.61771e+07,5.27628e+07,4.47368e+07,4.43137e+07,4.38571e+07,3.95098e+07,3.72034e+07,3.46601e+07,3.36898e+07,3.12012e+07,2.94091e+07,2.90909e+07,2.83333e+07,2.49381e+07,2.47515e+07,2.28993e+07,1.804e+07,1.85604e+07,1.62113e+07,1.62209e+07,1.54007e+07,1.42322e+07,1.3319e+07,1.20026e+07,1.17001e+07,1.11985e+07,9.7138e+06,8.91893e+06,8.52356e+06,5.35667e+06,4.06831e+06,3.16317e+06,1.53546e+06,509946,129370,27390},
  {1.42857e+08,6.25e+07,6.21528e+07,6.18056e+07,5.75851e+07,5.8125e+07,5.34191e+07,4.73227e+07,4.44974e+07,4.2224e+07,3.77149e+07,3.61233e+07,3.45293e+07,3.34771e+07,2.87733e+07,2.95455e+07,2.78578e+07,2.56565e+07,2.54386e+07,2.36788e+07,2.23497e+07,1.728e+07,1.66418e+07,1.59098e+07,1.60291e+07,1.47295e+07,1.52364e+07,1.2e+07,1.18164e+07,1.14695e+07,1.07586e+07,9.59596e+06,9.4593e+06,7.63773e+06,5.4101e+06,4.05177e+06,2.52234e+06,1.01652e+06,427038,130879,24150.4},
  {1.42857e+08,6.25e+07,6.21528e+07,5.76471e+07,5.73824e+07,5.71678e+07,4.66416e+07,4.68672e+07,4.3754e+07,3.94653e+07,3.89232e+07,3.78729e+07,3.4493e+07,3.21265e+07,2.84753e+07,2.76471e+07,2.80277e+07,2.62892e+07,2.32842e+07,2.42051e+07,2.22126e+07,1.808e+07,1.82596e+07,1.59918e+07,1.60483e+07,1.53279e+07,1.45884e+07,1.19512e+07,1.19309e+07,1.13226e+07,1.07696e+07,9.5601e+06,8.96313e+06,8.50491e+06,5.46806e+06,4.11715e+06,2.5858e+06,904765,418209,61842.1,14161.7},
  {1.42857e+08,6.18421e+07,6.21528e+07,5.79412e+07,5.74394e+07,5.12654e+07,4.73545e+07,4.55291e+07,4.51629e+07,4.00926e+07,3.79748e+07,3.78897e+07,3.37305e+07,3.188e+07,3.14991e+07,2.92903e+07,2.81113e+07,2.61242e+07,2.32601e+07,2.31487e+07,1.99082e+07,1.84656e+07,1.87635e+07,1.63417e+07,1.61863e+07,1.52115e+07,1.44882e+07,1.20668e+07,1.18164e+07,1.14634e+07,1.1276e+07,8.79924e+06,9.05404e+06,8.03568e+06,5.59357e+06,3.70806e+06,2.14628e+06,869251,237173,82737,15720.1},
  {1.42857e+08,6.15625e+07,5.84967e+07,5.76471e+07,5.78947e+07,5.07778e+07,4.69048e+07,4.58897e+07,4.47354e+07,4.335e+07,3.96505e+07,3.55741e+07,3.51112e+07,3.20234e+07,2.92742e+07,3.00484e+07,2.59722e+07,2.52617e+07,2.32912e+07,2.2698e+07,1.9773e+07,1.93076e+07,1.78813e+07,1.64035e+07,1.62368e+07,1.55009e+07,1.40689e+07,1.19919e+07,1.1605e+07,1.13347e+07,1.1103e+07,9.1795e+06,8.74883e+06,6.98401e+06,5.90768e+06,3.78296e+06,2.486e+06,883728,433653,99238,22486.9},
  {1.42857e+08,6.18421e+07,6.10281e+07,5.88235e+07,5.59706e+07,5.13503e+07,4.63659e+07,4.17826e+07,4.39952e+07,4.27607e+07,3.91435e+07,3.42224e+07,3.39563e+07,3.12435e+07,2.95806e+07,2.91435e+07,2.82729e+07,2.49657e+07,2.28739e+07,2.32667e+07,2.08824e+07,1.88691e+07,1.88393e+07,1.63417e+07,1.60614e+07,1.56992e+07,1.40034e+07,1.17415e+07,1.18364e+07,1.14566e+07,1.04313e+07,9.36364e+06,8.89197e+06,7.19781e+06,5.6637e+06,4.53395e+06,2.08736e+06,1.30609e+06,491000,124082,24354.8},
  {1.42857e+08,5.88235e+07,5.82043e+07,5.75851e+07,5.36389e+07,5.13753e+07,4.68672e+07,4.59384e+07,4.44837e+07,3.95789e+07,3.81263e+07,3.55147e+07,3.34465e+07,3.13316e+07,3.06631e+07,2.91903e+07,2.93631e+07,2.49249e+07,2.16364e+07,2.2e+07,2.00732e+07,1.92444e+07,1.79291e+07,1.64815e+07,1.63417e+07,1.53583e+07,1.43655e+07,1.25108e+07,1.14634e+07,1.13094e+07,1.05155e+07,8.99415e+06,8.70667e+06,7.13569e+06,5.20367e+06,4.49662e+06,2.10719e+06,1.21911e+06,403767,106868,14692.1},
  {1.42857e+08,5.88235e+07,5.84967e+07,5.79412e+07,5.77855e+07,5.21083e+07,4.59762e+07,4.55291e+07,4.48122e+07,4.48459e+07,3.85089e+07,3.49078e+07,3.15227e+07,3.23124e+07,2.98872e+07,2.96711e+07,2.79023e+07,2.51139e+07,2.13505e+07,2.10341e+07,2.00696e+07,1.87704e+07,1.72329e+07,1.64167e+07,1.5525e+07,1.55492e+07,1.28836e+07,1.21665e+07,1.18354e+07,1.15083e+07,1.04467e+07,9.19463e+06,8.69697e+06,6.59864e+06,5.49851e+06,4.24053e+06,2.06409e+06,1.13002e+06,416493,110150,19115.6},
  {1.25e+08,5.88235e+07,5.82043e+07,5.88235e+07,5.70557e+07,5.20806e+07,4.66892e+07,4.45658e+07,4.44586e+07,3.83368e+07,3.84667e+07,3.55012e+07,3.39875e+07,3.21143e+07,3.05458e+07,3.01774e+07,2.84669e+07,2.40904e+07,2.10885e+07,2.07524e+07,1.94763e+07,1.97206e+07,1.64706e+07,1.60833e+07,1.575e+07,1.539e+07,1.3226e+07,1.25747e+07,1.15244e+07,1.15495e+07,1.04217e+07,9.37273e+06,8.51625e+06,7.40192e+06,5.35347e+06,4.03223e+06,2.50348e+06,1.08874e+06,412409,84791.4,15402.6},
  {1.25e+08,5.88235e+07,5.82043e+07,5.84967e+07,5.65294e+07,5.25586e+07,4.69048e+07,4.59148e+07,4.4381e+07,3.84889e+07,3.76844e+07,3.64212e+07,3.27634e+07,3.12024e+07,2.98871e+07,2.87065e+07,2.83365e+07,2.49943e+07,2.12968e+07,2.06439e+07,1.95934e+07,1.8841e+07,1.64157e+07,1.62843e+07,1.55167e+07,1.52992e+07,1.33333e+07,1.2535e+07,1.14872e+07,1.12798e+07,9.234e+06,8.90253e+06,8.60718e+06,7.05666e+06,5.67825e+06,4.89851e+06,2.54257e+06,1.26193e+06,325662,96212.5,17021},
  {1.25e+08,5.88235e+07,5.84967e+07,5.82043e+07,5.39167e+07,5.23977e+07,4.6373e+07,4.56583e+07,4.41855e+07,3.75768e+07,3.71768e+07,3.46042e+07,3.31242e+07,3.22735e+07,2.92832e+07,2.91274e+07,2.46325e+07,2.43577e+07,2.1533e+07,2.15508e+07,1.96807e+07,1.98123e+07,1.64815e+07,1.62281e+07,1.57667e+07,1.54065e+07,1.33333e+07,1.24643e+07,1.10671e+07,1.0808e+07,8.95755e+06,8.90271e+06,8.53308e+06,6.74918e+06,5.31937e+06,4.22309e+06,2.34231e+06,824496,403810,95040.9,17202.9},
  {1.25e+08,5.88235e+07,5.88235e+07,5.81699e+07,5.38889e+07,5.21333e+07,4.95425e+07,4.46867e+07,4.44262e+07,3.86118e+07,3.63756e+07,3.50094e+07,3.35773e+07,2.89337e+07,2.85183e+07,2.70588e+07,2.57042e+07,2.43694e+07,2.12735e+07,2.08957e+07,1.92084e+07,1.96044e+07,1.87906e+07,1.61963e+07,1.63056e+07,1.54065e+07,1.27863e+07,1.28753e+07,1.05281e+07,1.01511e+07,9.05305e+06,8.45747e+06,7.92332e+06,6.98437e+06,5.99271e+06,3.88382e+06,2.12616e+06,1.03984e+06,400747,86181.6,17533.1},
  {1.25e+08,5.88235e+07,5.88235e+07,5.76471e+07,5.34167e+07,5.21836e+07,5.16049e+07,4.5213e+07,4.22619e+07,3.88471e+07,3.78e+07,3.59506e+07,3.43352e+07,3.08584e+07,2.78045e+07,2.61111e+07,2.5614e+07,2.54168e+07,2.19058e+07,2.06204e+07,1.92823e+07,1.7958e+07,1.68865e+07,1.64265e+07,1.57843e+07,1.52618e+07,1.28904e+07,1.26085e+07,1.21566e+07,1.01314e+07,9.41125e+06,8.6052e+06,7.91892e+06,6.72867e+06,4.9619e+06,3.74917e+06,2.09079e+06,851413,342569,95622.5,18267.3},
  {1.25e+08,5.88235e+07,5.79412e+07,5.73824e+07,5.4386e+07,5.20806e+07,4.68922e+07,4.49024e+07,4.46405e+07,3.71768e+07,3.71978e+07,3.588e+07,3.30346e+07,3.23287e+07,2.86262e+07,2.42308e+07,2.53922e+07,2.5091e+07,2.30251e+07,2.12749e+07,1.95722e+07,1.89627e+07,1.66149e+07,1.53836e+07,1.56917e+07,1.47567e+07,1.30564e+07,1.12374e+07,1.0573e+07,1.0191e+07,9.04143e+06,8.93036e+06,7.85805e+06,6.46615e+06,5.3886e+06,3.52723e+06,1.94451e+06,980622,374250,79068.1,16416.8},
  {1.25e+08,5.82043e+07,5.79412e+07,5.72755e+07,5.36086e+07,5.28395e+07,4.71164e+07,4.4119e+07,4.30777e+07,3.83529e+07,3.59958e+07,3.39889e+07,3.26038e+07,2.99109e+07,2.70216e+07,2.67284e+07,2.51361e+07,2.47178e+07,2.33928e+07,2.12943e+07,2.02794e+07,1.89426e+07,1.60292e+07,1.60885e+07,1.57281e+07,1.51567e+07,1.28912e+07,1.11111e+07,1.06985e+07,1.04315e+07,9.01429e+06,9.01722e+06,7.6994e+06,6.50433e+06,5.41067e+06,3.43304e+06,1.8335e+06,882937,333198,74610.7,18003.4},
  {1.25e+08,5.79412e+07,5.55556e+07,5.46784e+07,5.38596e+07,5.18028e+07,5.11053e+07,4.47354e+07,4.34976e+07,3.93298e+07,3.57885e+07,3.50613e+07,3.31859e+07,2.74149e+07,2.68194e+07,2.57903e+07,2.54784e+07,2.38793e+07,2.41785e+07,2.03048e+07,1.9833e+07,1.84581e+07,1.68566e+07,1.62438e+07,1.61765e+07,1.49895e+07,1.27048e+07,1.28691e+07,1.08394e+07,1.03197e+07,9.15e+06,8.52694e+06,8.15824e+06,6.90353e+06,4.21621e+06,3.39253e+06,1.27815e+06,838765,287221,69813.4,14520.5},
  {1.25e+08,5.52469e+07,5.52469e+07,5.55556e+07,5.4386e+07,5.04167e+07,4.82037e+07,4.67787e+07,4.27751e+07,3.91353e+07,3.56109e+07,3.68212e+07,3.14426e+07,3.01692e+07,2.80952e+07,2.77143e+07,2.68857e+07,2.50577e+07,1.9824e+07,2.07536e+07,1.98135e+07,1.8059e+07,1.80561e+07,1.59904e+07,1.5525e+07,1.50333e+07,1.29521e+07,1.27733e+07,1.1048e+07,1.04719e+07,9.42857e+06,8.91621e+06,7.70855e+06,7.00632e+06,4.73211e+06,3.25246e+06,1.12263e+06,751450,235134,64437.3,14689.8},
  {1.25e+08,5.55556e+07,5.55556e+07,5.44444e+07,5.4386e+07,5.31173e+07,4.44385e+07,4.44974e+07,4.28254e+07,4.00526e+07,3.6448e+07,3.51462e+07,3.08354e+07,3.06105e+07,2.76842e+07,2.76692e+07,2.68578e+07,2.39387e+07,1.91377e+07,2.08952e+07,1.98086e+07,1.87985e+07,1.63889e+07,1.62306e+07,1.58922e+07,1.48904e+07,1.38594e+07,1.25758e+07,1.07747e+07,1.03134e+07,9.2e+06,9.05641e+06,7.56363e+06,7.41425e+06,5.31891e+06,3.66156e+06,1.22339e+06,498840,229833,70307.9,13022.5},
  {1.25e+08,5.55556e+07,5.52469e+07,5.47222e+07,5.41228e+07,5.16049e+07,4.44976e+07,4.37333e+07,4.26341e+07,3.62288e+07,3.76706e+07,3.60682e+07,3.30781e+07,2.995e+07,2.953e+07,2.70429e+07,2.55539e+07,2.42583e+07,1.84944e+07,2.16711e+07,1.94693e+07,1.83172e+07,1.62583e+07,1.58095e+07,1.55833e+07,1.4998e+07,1.45451e+07,1.10645e+07,1.05973e+07,1.03838e+07,9.92253e+06,8.96976e+06,7.95858e+06,7.4636e+06,5.08034e+06,3.33022e+06,1.33848e+06,473018,151781,57611.7,15496.9},
  {1.25e+08,5.55556e+07,5.52469e+07,5.41667e+07,5.39444e+07,4.47368e+07,4.42584e+07,4.41136e+07,4.19593e+07,3.828e+07,3.64156e+07,3.29286e+07,3.27907e+07,3.18842e+07,2.79653e+07,2.67414e+07,2.44591e+07,2.36434e+07,2.20588e+07,2.04407e+07,1.95494e+07,1.87311e+07,1.64368e+07,1.60667e+07,1.61863e+07,1.54907e+07,1.41628e+07,1.09994e+07,1.05381e+07,1.04719e+07,9.01667e+06,8.67424e+06,8.11262e+06,6.34385e+06,5.36782e+06,3.24218e+06,905456,428253,209478,45133.9,8456.6},
  {1.25e+08,5.55556e+07,5.55556e+07,5.46784e+07,5.46784e+07,5.26889e+07,4.5202e+07,4.34545e+07,4.11091e+07,3.75158e+07,3.71978e+07,3.18889e+07,3.04796e+07,2.90633e+07,2.74622e+07,2.68571e+07,2.40482e+07,2.36677e+07,2.06352e+07,2.125e+07,1.91106e+07,1.93142e+07,1.60784e+07,1.61765e+07,1.55196e+07,1.44717e+07,1.35861e+07,1.09403e+07,1.05441e+07,1.02815e+07,9.42857e+06,8.69803e+06,8.11182e+06,6.35595e+06,5.12825e+06,3.25102e+06,1.23048e+06,376681,117921,33266.6,8116.03},
  {1.25e+08,5.55556e+07,5.55556e+07,5.49708e+07,5.41667e+07,4.79532e+07,4.43182e+07,4.41136e+07,4.19833e+07,4.02455e+07,3.59347e+07,3.14815e+07,3.13922e+07,2.97359e+07,2.86335e+07,2.70452e+07,2.40775e+07,2.40643e+07,2.16866e+07,2.11459e+07,1.91256e+07,1.85562e+07,1.66154e+07,1.54575e+07,1.56078e+07,1.46106e+07,1.30072e+07,1.10053e+07,1.06736e+07,1.05282e+07,9.17143e+06,8.66e+06,8.00819e+06,7.31037e+06,5.10509e+06,2.97199e+06,1.31942e+06,351591,201560,40705.7,8288.25},
  {1.25e+08,5.52469e+07,5.52469e+07,5.46784e+07,5.36667e+07,4.83132e+07,4.47727e+07,4.02292e+07,3.95175e+07,3.83529e+07,3.67722e+07,3.185e+07,3.09807e+07,2.86235e+07,2.86481e+07,2.56789e+07,2.43129e+07,2.37936e+07,2.20563e+07,2.09192e+07,1.82943e+07,1.88035e+07,1.61152e+07,1.60454e+07,1.53324e+07,1.39905e+07,1.28416e+07,1.09238e+07,1.06348e+07,1.06411e+07,9.065e+06,8.8463e+06,7.78422e+06,7.14963e+06,4.99492e+06,3.1286e+06,1.56934e+06,594733,125636,34041.1,8061.48},
  {1.25e+08,5.52469e+07,5.52469e+07,5.39444e+07,5.28333e+07,4.855e+07,4.45455e+07,4.46524e+07,3.91169e+07,3.84103e+07,3.66947e+07,3.14035e+07,2.95568e+07,3.0178e+07,2.58316e+07,2.54986e+07,2.51754e+07,2.35868e+07,2.19884e+07,2.17907e+07,1.93126e+07,1.83673e+07,1.61667e+07,1.54991e+07,1.50056e+07,1.51908e+07,1.29658e+07,1.09551e+07,1.05837e+07,1.01014e+07,9.62e+06,8.57694e+06,7.62859e+06,6.65263e+06,5.30319e+06,3.40156e+06,1.5276e+06,454271,118064,30549.6,7914.27},
  {1.25e+08,5.49708e+07,5.49708e+07,5.44444e+07,5.29532e+07,4.92895e+07,4.5202e+07,4.04412e+07,3.87269e+07,3.84375e+07,3.7344e+07,3.62475e+07,3.06268e+07,2.87933e+07,2.78466e+07,2.72485e+07,2.4883e+07,2.32659e+07,2.07261e+07,2.17368e+07,1.89172e+07,1.64912e+07,1.62963e+07,1.55833e+07,1.51992e+07,1.41413e+07,1.25526e+07,1.10112e+07,1.03606e+07,1.00439e+07,8.46e+06,8.59798e+06,7.60934e+06,5.79452e+06,3.84502e+06,3.21849e+06,1.29867e+06,296979,113701,32947.6,8161.27},
  {1.25e+08,5.55556e+07,5.52469e+07,5.40936e+07,5.13421e+07,4.90859e+07,4.5202e+07,4.00694e+07,4.03009e+07,3.75877e+07,3.51462e+07,3.37231e+07,3.09981e+07,2.95368e+07,2.53167e+07,2.50263e+07,2.50111e+07,2.31553e+07,2.22633e+07,1.91004e+07,1.84869e+07,1.81272e+07,1.64815e+07,1.58158e+07,1.50851e+07,1.4672e+07,1.30986e+07,1.11111e+07,1.02743e+07,9.98713e+06,9.39718e+06,9.26407e+06,7.40843e+06,5.3174e+06,4.2241e+06,2.64652e+06,1.30967e+06,329816,127294,27491.8,8399.47},
  {1.25e+08,5.55556e+07,5.41667e+07,5.38012e+07,5.20468e+07,4.82868e+07,4.10307e+07,3.97647e+07,3.864e+07,3.86623e+07,3.56173e+07,3.35867e+07,3.09981e+07,2.8565e+07,2.83391e+07,2.53864e+07,2.38132e+07,2.41551e+07,2.3181e+07,2.04737e+07,1.88879e+07,1.79265e+07,1.64706e+07,1.55833e+07,1.54074e+07,1.51066e+07,1.23403e+07,1.11177e+07,1.0538e+07,1.02099e+07,9.41869e+06,9.02883e+06,7.47742e+06,6.59895e+06,4.2679e+06,2.84144e+06,1.13087e+06,348828,109780,27141.6,7921.31},
  {1.25e+08,5.49708e+07,5.24618e+07,5.11053e+07,5.09677e+07,5.01548e+07,4.43182e+07,3.98125e+07,3.92982e+07,3.70583e+07,3.53216e+07,3.46091e+07,3.13519e+07,2.79763e+07,2.82695e+07,2.52493e+07,2.34066e+07,2.26913e+07,2.32278e+07,2.04629e+07,1.89095e+07,1.83226e+07,1.5736e+07,1.5902e+07,1.51333e+07,1.46454e+07,1.21319e+07,1.13799e+07,1.04611e+07,1e+07,9.8e+06,9.10241e+06,8.32096e+06,6.92496e+06,4.2791e+06,2.90281e+06,1.21617e+06,328869,165310,54237.1,8311.6},
  {1.25e+08,5.49708e+07,5.24721e+07,5.15789e+07,5.15789e+07,4.91813e+07,4.70763e+07,3.97368e+07,3.89013e+07,3.79669e+07,3.45e+07,3.32359e+07,2.99281e+07,2.84093e+07,2.77808e+07,2.51316e+07,2.34541e+07,2.41551e+07,2.03798e+07,1.88609e+07,1.98555e+07,1.80264e+07,1.64035e+07,1.49118e+07,1.44049e+07,1.31214e+07,1.23582e+07,1.05241e+07,1.03795e+07,9.73778e+06,9.4596e+06,8.72863e+06,8.291e+06,6.59593e+06,4.29524e+06,2.21737e+06,1.16463e+06,428242,247585,48530.3,8088.76},
  {1.25e+08,5.25439e+07,5.23392e+07,5.18283e+07,5.13421e+07,4.94183e+07,4.2151e+07,3.98937e+07,3.84354e+07,3.45704e+07,3.5e+07,3.21667e+07,3.13148e+07,2.9302e+07,2.77368e+07,2.53251e+07,2.45574e+07,2.3025e+07,2.08957e+07,2.09345e+07,1.88016e+07,1.78436e+07,1.569e+07,1.537e+07,1.46832e+07,1.33177e+07,1.23414e+07,1.07918e+07,1.03606e+07,9.68722e+06,9.75253e+06,9.05901e+06,7.16412e+06,6.58201e+06,4.01602e+06,2.63278e+06,1.10638e+06,487144,155042,45830.9,8033.6},
  {1.25e+08,5.26316e+07,5.20468e+07,5.16053e+07,5.00526e+07,4.90093e+07,4.59555e+07,4.00694e+07,3.82456e+07,3.73462e+07,3.48584e+07,3.1715e+07,3.03268e+07,3.01278e+07,2.75293e+07,2.52005e+07,2.43238e+07,2.13278e+07,2.11717e+07,1.99559e+07,1.87528e+07,1.77463e+07,1.54499e+07,1.48292e+07,1.41498e+07,1.31612e+07,1.21558e+07,1.12051e+07,1e+07,9.92276e+06,9.68102e+06,8.98822e+06,8.46902e+06,5.53544e+06,4.02718e+06,2.52196e+06,1.1387e+06,439916,162755,41413.1,12267.3},
  {1.25e+08,5.26316e+07,5.26316e+07,5.18421e+07,5.04709e+07,4.57937e+07,4.53102e+07,3.92687e+07,3.86437e+07,3.80396e+07,3.52389e+07,3.22807e+07,3.05667e+07,2.78105e+07,2.71309e+07,2.45382e+07,2.37922e+07,2.16854e+07,2.09078e+07,2.01024e+07,1.82759e+07,1.7476e+07,1.53169e+07,1.47133e+07,1.45517e+07,1.35753e+07,1.28188e+07,1.23677e+07,1.16433e+07,9.85714e+06,9.69697e+06,9.23182e+06,8.14399e+06,6.53022e+06,3.9779e+06,2.42719e+06,1.07569e+06,404215,161122,45371.1,8165.68},
  {1.25e+08,5.26316e+07,5.23392e+07,5.20776e+07,4.52646e+07,4.43571e+07,4.66346e+07,3.9838e+07,3.92982e+07,3.57115e+07,3.5037e+07,3.17037e+07,3.02983e+07,2.98844e+07,2.67304e+07,2.57618e+07,2.20588e+07,2.11237e+07,2.15508e+07,2.02235e+07,1.88712e+07,1.5798e+07,1.56282e+07,1.49014e+07,1.43992e+07,1.25197e+07,1.26089e+07,1.16192e+07,1.01465e+07,9.98372e+06,9.46465e+06,9.01711e+06,7.93703e+06,6.56163e+06,3.65609e+06,2.49166e+06,1.06077e+06,341294,183040,39777.5,8299.22},
  {1.25e+08,5.26316e+07,5.23392e+07,5.16053e+07,4.70868e+07,4.4411e+07,4.3754e+07,3.92982e+07,3.84167e+07,3.55628e+07,3.42366e+07,3.25428e+07,2.96123e+07,2.86733e+07,2.6331e+07,2.48391e+07,2.18939e+07,2.18561e+07,2.04279e+07,2.00615e+07,1.80487e+07,1.59498e+07,1.54211e+07,1.49742e+07,1.40451e+07,1.32847e+07,1.26961e+07,1.15743e+07,9.99946e+06,9.95361e+06,9.51465e+06,8.88912e+06,8.39734e+06,6.55339e+06,4.17358e+06,2.24767e+06,1.07151e+06,256421,96147.5,41770.3,8127.82},
  {1.25e+08,5.26316e+07,5.26316e+07,5.18421e+07,4.6416e+07,4.34085e+07,4.23509e+07,3.97059e+07,3.85162e+07,3.61453e+07,3.38809e+07,3.30085e+07,2.92938e+07,2.80535e+07,2.67755e+07,2.55196e+07,2.22028e+07,2.12189e+07,1.98208e+07,1.94129e+07,1.81296e+07,1.59393e+07,1.57258e+07,1.47275e+07,1.44492e+07,1.33796e+07,1.25664e+07,1.17498e+07,1.07496e+07,9.98372e+06,8.92126e+06,8.56747e+06,7.10377e+06,4.65153e+06,3.9196e+06,2.15228e+06,963676,343226,143678,38530.3,7965.33},
  {1.25e+08,5.26316e+07,5.26316e+07,5.15789e+07,4.63228e+07,4.45378e+07,4.05324e+07,4.01134e+07,3.91206e+07,3.52037e+07,3.51442e+07,3.17895e+07,2.90774e+07,2.72168e+07,2.61039e+07,2.52593e+07,2.19913e+07,2.11932e+07,2.07273e+07,2.00745e+07,1.77523e+07,1.60394e+07,1.57258e+07,1.4966e+07,1.44884e+07,1.34891e+07,1.24747e+07,1.19106e+07,1.06193e+07,9.8e+06,9.22e+06,8.3322e+06,6.85932e+06,5.661e+06,3.54766e+06,2.31635e+06,1.08319e+06,298761,129919,38942.1,7973.99},
  {1.25e+08,5.26316e+07,5.15789e+07,5.20468e+07,4.85e+07,4.597e+07,3.9838e+07,3.90208e+07,3.81274e+07,3.5692e+07,3.423e+07,3.05983e+07,3.06463e+07,2.80685e+07,2.53682e+07,2.38671e+07,2.16502e+07,2.15778e+07,2.04834e+07,1.9846e+07,1.74638e+07,1.55645e+07,1.56282e+07,1.5e+07,1.36771e+07,1.33542e+07,1.27439e+07,1.25564e+07,1.09824e+07,9.5101e+06,9.27775e+06,8.22318e+06,6.92231e+06,5.05937e+06,3.49536e+06,2.08735e+06,966284,370707,69899.9,31040.8,7777.59},
  {1.25e+08,5.26316e+07,5.23392e+07,5.08421e+07,4.84474e+07,4.56583e+07,4.32985e+07,3.98542e+07,3.925e+07,3.59259e+07,3.49688e+07,3.33713e+07,3.09373e+07,2.9108e+07,2.67572e+07,2.34222e+07,2.17998e+07,2.10468e+07,2.00374e+07,2.04606e+07,1.98222e+07,1.58602e+07,1.55108e+07,1.44211e+07,1.44867e+07,1.33473e+07,1.23636e+07,1.18766e+07,1e+07,9.72447e+06,9.27581e+06,8.63743e+06,6.94078e+06,4.55446e+06,3.08755e+06,2.06211e+06,1.02976e+06,281160,59151.8,29092.1,7745.3},
  {1.25e+08,5.20776e+07,5.15789e+07,4.94737e+07,4.89694e+07,4.67529e+07,4.25452e+07,4.04412e+07,3.78877e+07,3.57407e+07,3.45352e+07,3.29611e+07,3.04368e+07,2.91743e+07,2.68116e+07,2.31955e+07,2.32193e+07,2.09187e+07,2.00712e+07,2.09091e+07,1.91684e+07,1.60342e+07,1.56546e+07,1.53975e+07,1.39078e+07,1.273e+07,1.29729e+07,1.16162e+07,9.1849e+06,9.6e+06,9.0899e+06,8.10586e+06,6.66871e+06,4.81161e+06,3.0044e+06,2.11414e+06,839453,280456,60675.3,16165.7,7708.87},
  {1.25e+08,5.20776e+07,5.10526e+07,4.9e+07,4.80833e+07,4.32367e+07,4.27918e+07,3.88125e+07,3.80764e+07,3.59259e+07,3.45185e+07,3.14372e+07,3.03686e+07,2.73873e+07,2.74116e+07,2.34524e+07,2.32937e+07,2.11631e+07,2.04154e+07,2.00359e+07,1.86617e+07,1.55018e+07,1.53056e+07,1.48629e+07,1.43245e+07,1.33069e+07,1.25651e+07,1.20024e+07,1.06844e+07,9.4e+06,8.516e+06,7.994e+06,6.33528e+06,4.70493e+06,2.85931e+06,2.29139e+06,751983,239336,47659.1,14704,7978.67},
  {1.25e+08,5.18421e+07,5e+07,4.9025e+07,4.86842e+07,4.58921e+07,4.01961e+07,3.95592e+07,3.87269e+07,3.54115e+07,3.57115e+07,3.12483e+07,3.01211e+07,2.72711e+07,2.48784e+07,2.33333e+07,2.31481e+07,2.09648e+07,2.03384e+07,1.92848e+07,1.6129e+07,1.55433e+07,1.55153e+07,1.49058e+07,1.38851e+07,1.34722e+07,1.25679e+07,1.15614e+07,1.06386e+07,9.22e+06,8.716e+06,6.85357e+06,5.04462e+06,4.56513e+06,3.97985e+06,2.08579e+06,761986,259423,57175.6,16166.6,7923.89},
  {1.25e+08,5.18421e+07,5e+07,4.94118e+07,4.75278e+07,4.61225e+07,4.01961e+07,3.90789e+07,3.91435e+07,3.48333e+07,3.46481e+07,3.28155e+07,3.01965e+07,2.68344e+07,2.54797e+07,2.27381e+07,2.31232e+07,2.02097e+07,2.02235e+07,1.96102e+07,1.83628e+07,1.57258e+07,1.4871e+07,1.49016e+07,1.37756e+07,1.33845e+07,1.26144e+07,1.09903e+07,1.0581e+07,8.82e+06,9e+06,7.33698e+06,6.2254e+06,5.2084e+06,3.56701e+06,2.08236e+06,756326,188000,60973.2,17205.3,7770.61},
  {1.25e+08,5.20776e+07,4.97222e+07,4.925e+07,4.855e+07,4.4208e+07,3.88729e+07,4.03056e+07,3.89013e+07,3.53216e+07,3.3963e+07,3.17895e+07,2.76837e+07,2.94909e+07,2.79049e+07,2.30107e+07,2.2807e+07,2.26655e+07,1.97166e+07,1.87376e+07,1.59393e+07,1.5798e+07,1.57706e+07,1.45908e+07,1.39422e+07,1.30111e+07,1.26961e+07,1.13119e+07,9.90726e+06,9.258e+06,8.858e+06,6.35396e+06,5.82486e+06,4.65568e+06,3.84409e+06,2.00347e+06,675887,145862,60178,14675.9,7802.78},
  {1.25e+08,5e+07,4.94737e+07,4.97059e+07,4.81842e+07,4.3881e+07,4.09946e+07,3.97059e+07,3.87039e+07,3.38382e+07,3.38928e+07,3.16667e+07,2.97926e+07,2.75699e+07,2.57883e+07,2.33333e+07,2.24561e+07,2.20714e+07,1.97319e+07,1.94548e+07,1.59677e+07,1.56197e+07,1.53306e+07,1.50887e+07,1.35598e+07,1.30177e+07,1.23113e+07,1.17856e+07,1.0187e+07,9.6e+06,8.66e+06,7.02918e+06,6.02295e+06,4.8063e+06,2.38275e+06,1.6819e+06,700120,150431,62163,17731.9,7580.38},
  {1.25e+08,5e+07,5e+07,4.92105e+07,4.91471e+07,4.56725e+07,4.01961e+07,3.99561e+07,3.89352e+07,3.50206e+07,3.31444e+07,2.77252e+07,3.00961e+07,2.78538e+07,2.5663e+07,2.41393e+07,2.25815e+07,2.19631e+07,1.94797e+07,1.93766e+07,1.58744e+07,1.60394e+07,1.5382e+07,1.47482e+07,1.37531e+07,1.28859e+07,1.28567e+07,1.00439e+07,9.8e+06,9.2e+06,9.42e+06,7.1604e+06,6.09351e+06,4.29442e+06,3.39198e+06,1.99181e+06,656055,137113,44853.1,17198.7,7836.39},
  {1.25e+08,4.97222e+07,5e+07,4.89474e+07,4.855e+07,4.44974e+07,4.03009e+07,3.91435e+07,3.84722e+07,3.78114e+07,3.3313e+07,3.33238e+07,2.94355e+07,2.75009e+07,2.68879e+07,2.02442e+07,2.30576e+07,2.28431e+07,2.00178e+07,1.88281e+07,1.57796e+07,1.59498e+07,1.55518e+07,1.43722e+07,1.42003e+07,1.34792e+07,1.19245e+07,9.98355e+06,9.34549e+06,9.1845e+06,8.66e+06,6.53353e+06,5.42373e+06,5.47869e+06,3.13141e+06,2.1387e+06,629789,152490,56150,16422.5,7403.22} };

  int hyperSolver[101][41] = {
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {148,2193,2193,2193,1186,1196,1196,1186,1187,1187,1186,1186,1196,1196,1196,1196,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2132,2132,106,2131,2131,1111,1134,1114,1114,1114,1114},
  {148,2193,2193,2193,2193,1196,1196,1186,1187,1186,1186,1186,1196,1196,1196,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,115,2131,1131,1131,2132,1114,1114,1114,127},
  {1208,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,126,1131,1134,1131,1114,1114,1114,127,127,105},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1196,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1121,1131,1131,127,1114,1114,126,127,127,127},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1196,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1121,1131,127,2132,2132,1114,2131,127,127,127},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1196,1196,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,127,2132,127,127,127,127,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1196,1196,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,126,2131,127,127,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1196,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,2131,2131,127,127,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1196,1186,1186,1186,1186,2184,2184,2184,2184,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2131,127,2184,2184,2184,2184},
  {1208,2193,2193,2183,2183,2193,2193,1196,1196,1186,1186,1186,1186,2184,2184,2184,2184,2194,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2131,2131,127,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,2184,2184,2184,2194,2194,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2131,2132,127,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1196,1197,1197,1186,1186,1186,1186,1186,2194,2194,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2132,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1196,1197,1197,1186,1186,1186,1186,1186,1186,1186,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2131,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,2194,2184,2184,2184,2184,2184,2184,2184,1131,2184,2184,2184,2184,2184,2184,2131,2131,1131,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1197,1197,1197,1197,1186,1186,1186,1186,1186,1186,2194,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2131,2131,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1197,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2131,2131,2131,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2183,2183,2183,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2132,2132,1131,1134,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1197,1197,1197,1197,1186,1186,1186,1186,1186,1186,2194,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2132,2132,1131,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1197,1197,1197,1197,1186,1186,1187,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,1134,1134,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1197,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,1131,1134,1134,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1197,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,1131,1134,1134,2184,2184,2184,2184,2184},
  {1208,2193,2193,2183,2193,2183,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2183,2183,1196,1186,1186,1186,1186,1186,1186,1187,1186,1186,1186,1186,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1135,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2183,2183,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2183,2183,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2183,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1135,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2183,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,1131,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,1131,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1131,139,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,139,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1197,1186,1186,2194,2194,1186,1186,1186,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1186,1186,1197,1186,1186,2194,1186,1186,1186,1186,2194,2194,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1186,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,2184,1186,1186,1152,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,2184,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1134,139,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1196,1186,1186,1186,1186,2184,2184,2184,1186,1134,2184,2184,2184,2184,1134,1134,2184,2184,2184,2184,2184,1134,139,139,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1152,1186,2184,2184,2184,1186,2184,2184,1134,1134,2184,2184,1131,2184,2184,2184,2184,2184,2132,2132,139,139,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1196,1196,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,139,139,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,1134,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,1134,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,1186,2184,1186,1186,2184,2184,2184,1134,1134,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,1134,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1186,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,1186,1134,1186,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,2184,1186,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1196,1186,1186,1187,1187,1187,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,139,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1186,1186,1186,1186,1186,1186,1196,1186,1186,2184,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2131,2184,2184,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2131,2184,2184,1134,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,2194,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,1186,2184,1186,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1186,1186,2184,2184,2184,1186,1152,1186,1186,1186,1186,2184,2184,2184,2184,2184,2131,2184,1134,2184,2184,2184,2184,2184,1186,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1197,1196,1196,1196,1186,1186,1196,1196,2184,2184,2184,1186,1152,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,1186,1186,2184,2184,2184},
  {1208,2193,2193,2193,2193,2193,1197,1196,1197,1186,1186,1186,1196,1186,1186,2184,1186,1186,1152,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1186,1186,1186,2184,2184},
  {1208,2193,2193,2193,2193,1197,1197,1197,1197,1186,1196,1186,1196,1196,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,1186,1186,2194,2194,148},
  {1208,2193,2193,2193,2193,2193,1197,1197,1197,1186,1186,1186,1186,1186,1186,1152,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1197,1197,1197,1197,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,1134,1134,2184,2184,2184,2184,2184,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1197,1186,1187,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,2184,2184,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1197,1197,1187,1187,1186,1186,1186,1186,1152,1186,1186,1186,2184,2184,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,2184,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1197,1186,1187,1187,1196,1196,1186,1186,1186,1187,1186,1186,1186,2184,1186,2184,2184,2184,2184,2184,2184,2184,2132,2132,1134,2184,2184,1186,1186,2184,2184,2194,1186,1186,148},
  {1208,2193,2193,2193,2183,2183,1197,1186,1187,1187,1186,1186,1186,1186,1152,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2132,2132,2184,2184,2184,1186,1186,1186,2184,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2193,1186,1186,1186,1187,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2132,2132,2184,2184,2184,2184,2184,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2193,1197,1186,1187,1187,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,1186,2132,1134,1134,2184,2184,2184,2184,1186,1186,1186,2184,2184,148},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1187,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,1186,2132,2132,2184,2184,2184,2184,2184,1186,1186,1186,2184,2184,148},
  {1208,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2132,2132,2184,2184,2184,2184,1186,1186,1186,2184,2184,2184,148},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1197,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,1186,1186,1186,1186,2184,2184,2184,2184},
  {1208,2193,2193,2193,2193,2183,2193,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,2184,1186,1186,1186,2184,2184,148},
  {1208,2193,2193,2193,2183,2183,2193,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1186,1186,1186,1186,2184,2184,148},
  {1208,2193,2193,2193,2183,2183,2183,1186,1186,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1186,1186,1186,1186,2184,2184,148},
  {1208,2193,2193,2193,2183,2183,2183,1186,1186,1196,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1186,2183,1186,1186,2184,2184,2184,148},
  {1208,2193,2193,2193,2183,2183,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,2184,2184,2184,2183,1186,1186,2184,2184,2184,148},
  {1208,2193,2193,2193,2183,2183,1186,1186,1186,1186,1186,1186,1186,1186,1186,2194,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,2184,1186,1186,2183,1186,1186,1186,1186,2184,148},
  {1208,2193,2193,2193,2193,2183,2193,1186,1186,1186,1186,1186,1186,1186,1186,2194,1186,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,1134,2184,2184,2184,2184,1186,1186,1186,1186,1186,1186,2184,148},
  {1208,2193,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,137,1134,2184,2184,2184,1186,1186,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,1196,1197,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,1134,1186,1186,1186,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2193,1186,1186,1186,1186,1186,1186,1186,1186,1186,2184,2184,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,1134,1134,1186,2183,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2193,1186,1186,1196,1186,1186,1186,1186,1186,1186,2184,2184,1186,1186,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,1134,1186,1186,1186,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1186,1196,1196,1186,1186,1186,1186,1186,1186,2184,2184,2184,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,1134,1134,1186,1186,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1196,1196,1196,1186,1186,1186,1186,1186,1186,2184,2184,2184,1186,1186,2184,2184,2184,2184,2184,2184,2184,2184,2184,1134,1134,1134,1186,1186,1186,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2193,1196,1196,1196,1186,1186,1152,1186,1186,1186,1186,2184,2184,1186,1186,2184,2184,2184,2184,2184,2184,2184,1152,1134,1134,1134,1134,1186,1186,1186,1186,1186,1186,1186,1186,148},
  {1208,2193,2193,2193,2193,2183,1196,1196,1196,1196,1186,1186,2184,1186,1186,1152,2184,2184,1186,1186,2184,2184,2184,2184,2184,2184,2184,1152,1152,1134,1134,1134,1134,1186,1186,1186,1186,1186,1186,1186,148} };

  int hyperMinDiffArr[101][41] = {
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10},
  {10,4,4,4,2,0,0,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,9,9,9,9},
  {10,4,4,6,6,0,0,4,4,4,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,1,1,1,9,9,9,9,13},
  {9,4,6,6,6,0,4,4,4,4,4,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,1,9,9,9,13,13,13},
  {9,6,6,0,0,0,0,4,4,4,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,9,9,12,13,13,13},
  {9,6,0,0,0,0,0,4,4,4,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,9,12,13,13,13},
  {9,0,0,0,0,0,0,4,4,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,13,13,13,13,0,0},
  {9,0,0,0,0,0,0,4,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,13,13,0,0,0},
  {0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,0,0,0},
  {0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,6,0,0,13,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,6,0,0,13,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,1,1,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,0,1,1,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,6,0,0,0,0,0,0,1,1,1,1,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,6,6,8,8,8,0,0,1,1,1,1,1,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,6,6,8,8,8,0,7,1,1,1,1,0,0,0,0},
  {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,6,6,8,8,8,13,7,1,1,1,1,1,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,6,6,8,8,8,7,7,1,1,1,1,1,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,1,1,0,0,0,0,0,0,8,6,8,8,13,13,1,1,1,1,1,1,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,1,1,0,0,0,0,0,0,8,8,8,8,13,12,1,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,8,8,8,8,8,13,1,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,8,8,8,8,13,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,0,0,0,0,8,8,8,8,8,13,7,7,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,8,8,8,8,8,13,0,7,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,13,13,0,7,7,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,13,13,0,0,7,7,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,13,13,13,7,7,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,13,13,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,0,0,0,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,13,13,13,0,0,0,1,1,1,1,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,0,0,0,1,1,1,1,0,1,1},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,7,0,0,1,1,1,1,1,1,1},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,7,0,1,1,1,1,1,0,0,0},
  {0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,13,13,13,0,0,1,0,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,13,13,13,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,13,13,13,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,13,13,5,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,13,13,5,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,5,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,5,1,6,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,1,1,6,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0},
  {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,5},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,14},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,10},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,10},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,10},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,0,0,6,6,18},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,6,6,6,9},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,3},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,13},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,13},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,4,4,1,0,0,0,0,0,0,11},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,4,4,0,0,0,0,0,0,6,0,15},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,4,4,0,0,0,0,0,6,0,13},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,11,0,0,0,4,0,0,0,0,0,6,6,9},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,5},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,13},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,13},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,10},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,8} };

  int hyperMaxRoundArr[101][41] = {
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
  {7,6,6,6,7,8,8,7,5,5,6,2,9,9,9,9,7,7,7,16,16,16,16,16,16,14,14,14,3,3,3,3,3,5,5,5,20,18,18,18,18},
  {7,6,6,7,7,8,8,7,5,6,6,2,9,9,9,7,7,7,7,16,16,16,16,16,14,14,14,14,3,3,3,3,13,5,5,5,18,18,18,18,20},
  {4,6,7,7,7,7,7,7,6,6,6,2,2,2,7,7,7,7,7,16,16,16,16,16,14,14,14,14,3,3,2,9,7,5,5,18,18,18,20,20,6},
  {4,7,7,7,7,7,7,6,6,6,3,2,2,2,7,7,7,7,16,16,16,14,16,14,14,14,14,3,3,3,3,16,7,5,17,18,18,3,20,20,20},
  {4,7,7,7,7,7,7,6,6,6,3,2,2,2,7,7,7,7,16,16,16,14,14,14,14,14,14,3,3,3,3,16,7,7,8,8,18,3,20,20,20},
  {4,7,7,7,7,7,7,6,6,3,3,2,2,2,7,7,7,7,16,16,16,14,14,14,14,14,14,14,3,3,3,11,11,7,8,20,20,20,20,19,19},
  {4,7,7,7,7,7,6,6,3,3,2,2,2,2,7,7,7,7,16,14,14,14,14,12,14,14,14,14,3,3,3,11,11,12,5,6,20,20,19,19,19},
  {2,7,7,6,6,6,6,6,3,2,2,2,2,2,7,7,7,7,7,14,14,14,13,13,13,14,14,3,3,11,11,11,11,12,6,6,20,20,19,19,19},
  {2,7,6,6,6,6,6,6,3,2,2,2,2,7,7,7,7,4,4,14,14,14,13,13,13,14,14,3,3,11,11,11,11,11,6,8,20,19,19,19,19},
  {2,7,6,4,4,6,3,3,3,2,2,2,2,7,7,7,7,4,4,4,13,13,13,13,14,14,14,11,11,11,11,11,8,6,6,8,20,19,19,19,19},
  {2,7,6,4,4,3,3,3,3,2,2,2,2,7,7,7,4,4,4,4,13,13,13,14,14,14,3,11,11,11,11,8,8,6,6,9,20,19,19,19,19},
  {2,7,4,4,4,4,4,4,3,2,2,1,1,1,1,1,4,4,4,4,13,13,13,14,14,14,14,14,11,11,11,8,8,8,6,9,19,19,19,19,19},
  {2,7,4,4,4,4,4,4,3,2,2,1,1,1,1,1,1,1,4,13,13,14,14,14,14,14,14,11,11,11,11,8,8,8,6,8,19,19,19,19,19},
  {2,7,4,4,4,4,4,3,2,2,2,1,1,1,1,1,1,15,4,13,13,14,14,14,14,14,13,11,11,11,11,8,8,8,8,7,19,19,19,19,19},
  {2,7,4,4,4,4,4,3,2,2,2,2,1,1,1,1,15,15,4,15,14,14,14,14,14,14,14,11,11,11,8,8,8,8,8,8,19,19,19,19,19},
  {2,4,4,4,3,4,4,2,2,2,2,1,1,1,1,1,15,15,15,14,14,14,14,14,14,14,9,9,9,11,11,8,8,8,8,8,19,19,19,19,19},
  {2,4,4,3,3,3,3,2,2,2,1,1,1,1,1,1,15,15,15,14,14,14,14,14,14,8,8,8,9,11,11,8,8,5,5,7,7,19,19,19,19},
  {2,4,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,14,14,14,14,14,14,15,8,9,9,11,8,8,8,8,5,5,7,19,19,19,19,19},
  {2,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,15,15,14,14,14,14,14,15,8,9,9,9,8,8,8,8,7,7,7,19,19,19,19,19},
  {2,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,15,15,15,15,15,15,15,9,9,9,9,11,11,8,8,4,7,7,7,19,19,19,19,19},
  {2,3,3,3,3,3,2,2,2,2,1,1,1,1,1,1,1,1,15,15,15,15,15,15,9,9,9,9,9,9,8,8,3,7,7,7,19,19,19,19,19},
  {2,3,3,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,15,15,15,15,15,12,12,9,9,9,9,9,8,8,7,7,7,7,19,19,19,19,19},
  {7,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,12,12,12,9,9,9,9,8,8,7,7,7,19,19,19,19,19,19},
  {7,3,3,3,1,1,3,1,1,1,1,1,1,1,8,1,1,1,15,15,15,15,15,13,12,12,9,9,9,9,8,8,7,7,7,19,19,19,19,19,19},
  {7,3,3,1,1,1,3,1,1,1,1,1,1,1,9,9,9,1,15,15,15,15,12,12,12,9,9,9,9,9,8,8,8,7,7,19,19,19,19,19,19},
  {7,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,8,15,15,15,15,12,12,12,12,12,9,9,9,8,8,17,7,7,7,19,19,19,19,19},
  {7,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,15,15,15,15,15,12,12,12,12,12,9,9,9,8,8,8,17,12,12,12,19,19,19,19},
  {7,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,15,15,15,15,12,12,12,12,12,9,9,9,8,8,8,17,17,17,17,17,12,19,19,19},
  {7,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,15,15,12,12,12,12,12,12,12,9,9,8,8,8,17,17,17,17,12,12,12,19,19},
  {7,1,1,1,1,2,1,1,1,1,1,1,9,9,9,9,2,2,2,12,12,12,12,12,12,12,12,11,8,8,8,8,17,17,12,17,12,12,19,19,19},
  {7,1,1,1,1,2,1,1,1,1,1,1,9,9,9,9,2,2,2,2,12,12,12,12,12,12,12,11,8,8,8,17,17,17,12,12,12,12,19,19,19},
  {7,1,1,3,3,2,1,1,1,1,1,1,9,9,9,2,2,2,2,2,12,12,12,12,12,12,11,11,11,11,11,17,17,12,12,12,12,12,19,19,19},
  {7,1,1,3,3,2,1,1,1,1,1,1,9,9,2,2,2,2,2,2,12,12,12,12,12,12,11,11,11,11,11,17,17,12,12,12,12,13,19,19,19},
  {7,3,3,3,3,2,1,1,1,1,1,1,9,9,9,2,2,2,2,12,12,12,12,12,12,12,11,11,11,11,11,12,17,12,12,12,12,12,13,19,19},
  {2,3,3,3,2,2,1,1,1,1,1,2,2,9,2,2,2,2,2,12,12,12,12,12,12,12,11,11,11,11,11,17,17,12,12,12,12,12,13,19,13},
  {2,3,3,3,2,2,2,1,1,1,1,2,2,8,8,5,2,5,2,2,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13},
  {2,3,3,3,2,2,2,2,1,1,1,2,2,8,5,5,5,5,2,2,12,12,12,12,12,12,11,11,11,11,12,18,12,12,12,12,12,13,13,13,13},
  {2,3,3,3,2,2,2,2,1,1,1,2,2,2,5,5,4,5,5,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13},
  {2,3,3,3,2,2,2,1,1,1,1,2,2,2,5,5,5,5,5,12,12,12,12,12,12,12,11,11,11,11,12,18,18,12,12,12,12,13,13,13,13},
  {2,3,3,2,2,2,2,1,1,1,1,2,2,2,2,8,5,5,8,12,12,12,12,12,12,11,11,11,11,11,12,18,17,12,12,12,13,13,13,13,13},
  {2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,8,5,5,5,12,12,12,12,12,12,11,11,11,11,11,12,18,17,12,12,12,12,13,13,13,13},
  {2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,8,6,6,6,7,12,12,12,7,7,7,11,11,11,12,12,18,17,17,12,12,13,13,13,13,13},
  {2,2,2,2,2,2,2,1,1,1,2,2,2,7,7,6,6,6,6,7,7,7,7,7,7,7,11,11,11,12,12,17,17,17,17,13,13,13,13,13,13},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,7,7,6,6,6,6,7,7,7,7,7,7,11,11,11,11,12,12,12,17,17,12,13,13,13,13,13,13},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,7,6,6,6,6,7,7,7,7,7,7,11,11,11,11,12,12,15,15,15,15,13,13,13,13,13,13},
  {2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,6,6,6,7,7,7,7,7,7,7,7,7,7,12,12,12,15,15,15,12,12,13,13,13,13,13},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,7,7,7,7,7,7,7,7,7,11,12,12,12,15,15,15,12,12,12,12,13,13,13},
  {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,8,7,7,7,4,7,7,7,7,12,12,12,12,15,15,15,12,12,12,12,13,12,12},
  {2,2,2,2,2,1,2,2,2,2,2,2,2,2,7,7,7,6,6,6,7,4,4,8,8,7,7,12,12,12,12,17,15,15,12,12,12,12,12,12,12},
  {2,2,2,2,2,1,2,2,2,2,2,7,2,6,7,7,6,6,6,6,4,4,4,8,8,7,7,12,12,12,12,17,15,12,12,12,12,12,15,15,15},
  {2,2,2,2,2,1,2,2,2,2,2,7,2,2,7,7,7,6,6,6,4,4,4,8,8,8,7,12,12,12,12,15,15,12,12,12,12,15,15,15,15},
  {2,2,2,2,1,1,2,2,2,2,2,2,2,2,7,7,7,5,4,3,4,7,4,8,8,8,7,7,12,12,12,15,15,12,17,12,12,15,15,15,15},
  {2,2,2,2,2,1,2,2,2,2,2,2,1,1,1,7,7,5,4,4,4,4,4,8,8,8,5,5,12,12,12,15,15,12,12,12,12,15,15,15,15},
  {2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,7,7,5,4,4,4,4,8,8,8,8,5,5,12,12,12,15,15,12,12,12,12,15,15,15,15},
  {2,2,2,2,2,1,2,2,2,2,2,2,2,2,7,7,7,5,4,4,4,4,8,8,8,8,5,5,12,12,15,15,15,12,12,12,12,15,15,15,15},
  {2,2,2,2,1,1,2,2,2,2,2,2,2,2,7,7,5,5,4,4,4,4,8,8,8,8,5,5,12,12,15,15,15,12,12,12,12,15,15,15,15},
  {6,2,2,2,1,1,1,2,2,2,2,2,2,2,2,5,5,5,5,4,4,4,4,4,8,8,5,5,1,1,15,15,15,12,12,12,12,15,15,15,15},
  {6,2,2,2,1,1,1,2,2,2,2,2,2,2,2,5,5,5,5,4,4,4,4,11,8,8,5,5,5,1,1,15,15,12,12,12,12,15,15,15,15},
  {6,2,2,2,1,1,2,2,2,2,2,2,2,2,2,8,5,5,5,4,4,4,11,11,8,8,5,1,1,1,1,15,15,12,12,12,12,15,15,15,15},
  {6,2,2,2,1,1,2,2,2,2,2,2,2,2,5,5,5,5,5,4,4,4,11,11,8,8,5,1,1,1,1,15,15,12,12,12,15,15,15,15,15},
  {6,2,1,1,1,1,1,2,2,2,2,2,2,1,5,5,5,5,5,4,4,4,11,11,8,8,5,4,1,1,1,15,15,15,15,12,15,15,15,15,15},
  {6,1,1,1,1,1,1,2,2,2,2,2,2,2,4,4,4,5,4,4,4,4,4,8,8,8,5,4,1,1,1,15,15,15,12,12,15,15,15,15,15},
  {6,1,1,1,1,1,2,2,2,2,2,2,1,1,4,4,4,5,4,4,4,4,8,8,8,8,8,8,1,1,1,15,15,15,15,15,15,15,15,15,15},
  {6,1,1,1,1,1,2,2,2,2,2,2,1,7,7,4,5,5,4,4,4,4,8,8,8,8,8,1,1,1,1,15,15,15,15,15,15,15,15,15,15},
  {6,1,1,1,1,2,2,2,2,2,1,3,1,1,7,7,3,3,4,4,4,4,8,8,8,8,8,1,1,1,1,15,15,15,15,15,15,15,14,14,2},
  {6,1,1,1,1,1,2,2,2,2,2,7,7,7,7,2,3,3,4,4,4,4,8,8,8,8,8,1,1,1,1,15,15,15,15,15,15,15,15,15,14},
  {6,1,1,1,1,2,2,2,2,2,2,7,7,7,7,7,3,3,4,4,4,4,4,8,8,8,8,1,1,1,1,1,15,15,15,15,15,15,15,15,10},
  {6,1,1,1,1,2,2,2,1,2,2,7,7,7,7,7,3,3,3,4,4,4,4,8,8,8,8,1,1,1,1,15,15,15,15,15,15,15,15,15,10},
  {6,1,1,1,1,2,2,2,1,1,2,7,7,7,6,3,3,3,3,3,4,4,8,8,8,8,8,1,1,1,1,15,15,15,15,15,15,15,15,15,10},
  {6,1,1,1,1,2,2,2,1,1,1,1,7,7,7,3,3,3,4,3,4,8,8,8,8,8,8,1,1,1,1,15,15,16,16,15,15,16,15,15,7},
  {6,1,1,1,2,2,2,2,1,1,2,2,7,7,6,3,3,3,3,4,4,4,8,8,8,8,19,1,1,1,1,1,15,15,16,16,15,15,15,15,2},
  {6,1,1,1,1,1,2,2,2,1,2,2,7,7,7,3,3,3,3,4,4,4,8,8,8,8,19,1,1,1,1,1,15,15,15,13,13,15,15,15,4},
  {6,1,1,1,1,1,2,2,1,1,2,2,7,7,7,3,3,3,3,4,4,4,8,8,8,8,19,9,1,1,1,1,1,1,15,13,13,15,15,15,6},
  {6,1,1,1,1,1,1,2,2,1,2,2,7,7,7,3,3,3,4,4,4,4,8,8,8,8,19,9,1,1,1,1,1,1,1,13,13,13,15,15,5},
  {6,1,1,1,1,1,3,2,2,2,2,7,7,7,7,3,3,3,4,4,4,4,8,8,8,19,19,19,1,1,1,1,1,1,13,13,13,15,15,15,6},
  {6,1,1,1,1,1,1,2,2,2,2,7,7,7,7,3,3,4,4,4,4,4,8,8,8,19,19,13,1,1,1,1,1,13,13,13,13,15,15,15,15},
  {6,1,1,1,1,1,1,2,2,2,2,7,7,4,4,3,3,4,4,4,4,4,8,8,8,8,13,13,13,1,1,1,1,1,1,13,13,13,15,15,2},
  {6,1,1,1,1,1,1,2,2,2,2,7,7,7,4,4,4,4,4,4,4,8,8,8,8,8,13,13,1,1,1,1,1,1,13,13,13,13,15,15,4},
  {6,1,1,1,1,1,1,2,2,1,2,2,7,7,4,4,4,4,4,4,4,8,8,8,8,13,13,13,1,1,1,1,1,1,13,13,13,15,13,15,5},
  {6,1,1,1,1,1,1,2,2,2,2,2,7,7,4,4,4,4,4,4,4,8,8,8,8,13,13,13,13,1,1,1,1,14,16,13,13,15,15,15,8},
  {6,1,1,1,1,1,2,2,2,2,2,7,7,7,7,4,4,4,4,4,4,8,8,8,8,8,13,13,13,1,1,1,1,14,16,13,13,15,15,15,2},
  {6,1,1,1,2,2,2,2,2,2,2,7,7,7,7,7,4,4,4,4,4,8,8,8,8,13,13,13,13,1,1,1,14,14,16,13,13,13,15,15,14},
  {6,1,1,1,1,1,1,2,2,2,2,2,7,7,7,4,4,4,4,4,4,8,8,8,8,8,13,13,1,1,1,1,1,14,14,13,13,13,15,15,18},
  {6,1,1,1,1,1,1,2,2,2,2,2,7,7,7,3,3,4,4,4,4,8,8,8,8,8,13,13,14,1,1,1,1,14,14,13,13,13,15,15,5},
  {6,1,1,1,1,3,1,2,2,2,2,7,7,7,7,3,3,4,4,4,4,8,8,8,8,13,13,13,13,1,1,1,14,14,14,15,13,13,15,15,12},
  {6,1,1,1,1,1,2,2,2,2,2,7,7,7,7,3,3,4,4,4,8,8,8,8,8,13,13,13,13,1,1,1,1,14,16,15,13,13,15,15,14},
  {6,1,1,1,1,1,2,2,2,2,2,3,7,7,7,3,3,4,4,4,4,8,8,8,8,13,13,13,13,1,1,1,14,15,15,15,15,15,15,15,2},
  {6,1,1,1,1,1,2,2,2,2,2,7,7,7,7,3,3,3,4,4,8,8,8,8,8,13,13,13,13,1,1,1,1,14,15,15,15,15,15,15,9},
  {6,1,1,1,1,1,2,2,2,2,2,7,7,7,7,3,3,3,4,4,8,8,8,8,8,13,13,13,13,1,1,1,2,14,14,15,15,15,15,15,2},
  {6,1,1,1,1,1,2,2,2,2,2,2,7,7,7,7,3,3,4,4,8,8,8,8,8,13,13,14,1,1,1,1,2,14,15,15,15,15,15,15,2},
  {6,1,1,1,1,1,2,2,2,2,2,2,4,7,7,7,3,3,4,4,8,8,8,8,8,13,13,14,14,1,1,1,1,15,15,15,9,9,15,15,2} };

  int hyperStep1Arr[101][41] = {
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,4,4,4,3,3,3,3,3,3,5,5,4,4,4,8,8,8,9,9,9,9,9},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,4,4,3,3,3,3,3,3,3,5,5,5,4,4,9,6,6,8,9,9,9,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,5,5,4,4,5,6,6,9,9,9,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,5,5,5,5,4,5,6,6,9,9,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,5,5,5,5,4,5,5,6,6,9,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,5,5,5,4,4,5,6,6,6,6,6,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,5,5,5,4,4,4,5,5,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,4,4,4,4,4,5,5,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,4,4,4,4,4,5,5,6,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,6,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,5,4,4,4,4,4,4,5,5,5,6,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,3,3,3,3,3,3,3,2,4,4,4,4,4,4,5,5,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,2,3,3,3,4,4,4,4,4,4,4,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,2,3,3,3,3,4,4,4,4,4,4,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,3,4,4,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,8,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,8,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,8,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,4,4,3,4,4,4,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,4,4,4,3,6,6,6,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,4,4,4,3,4,4,4,4,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,4,4,4,3,4,4,4,6,6,6,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,6,4,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,4,4,4,3,3,4,6,6,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,6,6,6,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,6,6,6,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,3,6,6,6,6,6,6,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,6,6,6,6,6,6,8,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,6,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,3,6,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,6,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,4,3,3,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,4,3,3,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,4,3,3,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,4,4,3,3,3,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,4,4,3,3,3,3,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,4,3,3,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,4,4,4,4,4,4,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,4,4,4,4,4,4,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,4,4,4,4,4,4,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,4,4,4,4,4,4,4,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,4,4,4,4,3,4,4,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,4,4,4,4,3,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,4,4,4,4,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,2,2,2,2,2,4,4,4,4,4,6,5,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,2,4,4,5,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,2,4,4,5,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,5,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2,4,4,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,2,2,2,3,2,2,2,4,4,4,5,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,2,2,2,4,4,4,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,4,3,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,6,6,6,6,6,5},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,4,2,2,2,3,3,3,4,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,2,4,2,2,3,3,3,3,3,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,2,2,2,2,2,3,3,3,3,6,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,2,2,2,2,3,3,3,3,6,6,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,2,2,2,2,3,3,3,3,3,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,2,2,2,2,3,3,3,3,6,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,2,2,2,2,2,3,3,3,3,6,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,2,4,4,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,4,4,6,6,6,6,6,2},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,4,4,4,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,4,4,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,2,2,3,2,2,2,2,4,4,6,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,4,4,4,4,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,4,4,4,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,2,2,2,2,2,2,2,2,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,2,2,2,2,2,2,2,4,4,4,4,4,6,6,6,7},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,2,2,4,2,2,2,2,4,4,4,4,4,6,6,6,7},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,3,2,2,4,4,2,2,2,2,4,4,4,4,4,6,6,6} };

  int hyperStep2Arr[101][41] = {
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,7,7,7,2,2,2,3,3,3,3,3,3,5,5,6,6,4,9,9,8,7,7,7,7,7},
  {1,2,2,1,1,1,1,1,1,1,1,1,2,2,2,7,7,7,7,2,2,3,3,3,3,3,3,3,5,5,5,6,2,9,8,8,6,7,7,7,6},
  {1,2,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,3,3,3,3,3,3,3,3,3,5,5,4,4,7,6,8,7,7,7,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,3,3,3,3,3,3,3,3,3,5,5,5,5,4,7,8,6,7,7,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,3,3,3,3,3,3,3,3,3,5,5,5,5,4,7,5,6,6,7,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,3,3,3,3,3,3,3,3,3,3,5,5,5,4,4,5,6,6,6,6,6,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,3,3,3,3,3,3,3,3,3,3,5,5,5,4,4,6,5,11,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,3,3,3,3,3,3,3,3,5,5,4,4,4,4,6,11,11,6,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,3,3,3,3,3,3,3,3,5,5,4,4,4,4,4,11,11,6,8,8,8,8},
  {1,1,1,1,1,1,2,1,1,1,1,1,1,7,7,7,7,7,7,7,3,3,3,3,3,3,3,4,4,4,4,4,4,11,11,11,6,8,8,8,8},
  {1,1,1,2,2,2,2,1,1,1,1,1,1,7,7,7,7,7,7,7,3,3,3,3,3,3,5,4,4,4,4,4,4,11,11,11,6,8,8,8,8},
  {1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,7,7,7,7,3,3,3,3,3,3,3,3,4,4,4,4,4,4,11,11,8,8,8,8,8},
  {1,1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,7,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,11,11,8,8,8,8,8},
  {1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,4,7,3,3,3,3,3,3,3,4,4,4,4,4,4,4,11,11,10,8,8,8,8,8},
  {1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,4,4,7,4,3,3,3,3,3,3,3,4,4,4,4,4,4,11,11,11,8,8,8,8,8},
  {1,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,4,4,4,3,3,3,3,3,3,3,4,4,4,4,4,4,4,11,11,11,8,8,8,8,8},
  {1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,3,3,3,3,3,3,4,4,4,4,4,4,4,4,10,10,10,10,8,8,8,8},
  {1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,10,10,10,8,8,8,8,8},
  {1,2,2,2,2,1,1,1,1,1,1,1,2,1,1,2,2,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,10,10,10,8,8,8,8,8},
  {1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,10,10,10,8,8,8,8,8},
  {1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,10,10,10,8,8,8,8,8},
  {1,2,2,1,2,1,1,1,1,1,1,1,1,1,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,10,8,8,8,8,8},
  {1,2,2,2,2,2,2,1,1,1,1,1,1,1,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,8,8,8,8,8,8},
  {1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,10,8,8,8,8,8,8},
  {1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,10,10,8,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,10,10,10,8,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,4,4,4,8,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,9,9,9,9,4,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,9,9,9,4,4,4,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,1,4,4,4,4,4,4,4,4,6,4,4,4,4,9,9,4,9,4,4,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,1,1,4,4,4,4,4,4,4,6,4,4,4,8,8,9,4,4,4,4,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,1,1,4,4,4,4,4,4,6,6,6,6,6,8,8,4,4,4,4,4,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,2,2,3,3,3,3,1,1,4,4,4,4,4,4,6,6,6,6,6,8,7,4,4,4,4,6,8,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,3,3,1,1,4,4,4,4,4,4,4,6,6,6,6,6,3,7,4,4,4,4,4,6,8,8},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,1,4,4,4,4,4,4,4,6,6,6,6,6,7,7,4,4,4,4,4,6,8,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,4,4,4,4,4,4,6,6,6,6,3,3,4,4,4,4,4,4,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,1,1,4,4,4,4,4,4,6,6,6,6,3,5,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,3,3,4,4,4,4,4,4,4,6,6,6,6,6,3,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,4,4,4,4,4,4,6,6,6,6,3,6,6,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,1,4,4,4,4,4,4,6,6,6,6,6,3,6,7,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,4,4,4,4,4,4,6,6,6,6,6,3,6,7,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,4,4,4,3,3,3,6,6,6,3,3,6,7,7,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,6,6,6,3,3,7,7,7,7,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,6,6,6,6,3,3,3,7,7,4,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,6,6,6,6,3,3,4,4,4,4,6,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,4,4,4,4,4,4,4,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,6,4,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,4,4,4,4,4,4,4,4,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,4,4,4,4,4,4,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,2,3,1,3,3,3,3,3,3,3,3,3,3,3,4,4,4,6,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,2,3,3,3,3,3,3,3,3,4,3,3,3,3,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,2,2,3,3,3,3,3,3,3,3,4,3,3,3,3,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,2,2,1,3,3,3,3,3,3,3,3,3,4,4,3,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,3,3,3,3,1,3,3,3,3,3,4,4,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,3,3,3,1,1,3,3,3,4,4,4,4,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,1,1,3,3,3,4,4,4,4,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,1,1,3,3,3,3,4,4,4,4,4,4,3,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,6,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,6,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,4,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,4,4,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,4,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,3,3,3,2,4,4,4,4,4,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,2,4,4,4,4,4,4,4,4,4,4,6,6,6,5},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,2,3,4,4,4,4,4,4,4,4,4,6,6,6,7},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,2,3,4,4,4,4,4,4,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,2,2,4,4,4,4,5,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,2,3,4,4,4,4,4,4,4,4,4,6,6,6,6},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,1,3,3,3,4,4,4,4,5,5,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,3,3,4,4,4,4,4,4,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,3,3,3,4,4,4,4,4,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,3,3,3,3,4,4,4,4,3,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,3,3,3,4,4,4,4,3,4,4,4,6,6,6,2},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,3,3,3,3,4,4,4,3,3,4,4,4,4,6,6,3},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,3,3,4,4,4,4,4,3,3,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,1,3,3,2,4,4,5,4,3,3,4,4,4,6,6,4},
  {1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,3,3,3,3,4,4,4,3,3,3,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,3,3,3,3,4,4,4,4,3,4,4,4,4,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,3,3,3,3,4,4,4,3,4,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,3,3,3,3,4,4,4,4,3,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,3,3,3,3,4,4,4,5,3,3,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1,1,3,3,2,4,4,4,4,5,3,4,4,4,6,6,6,4},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,1,1,1,1,1,3,3,2,2,4,4,4,4,4,4,4,4,4,6,6,4} };












}  // namespace

// Input（m, eps, iEpsの設定）
namespace
{
  int judgeArr[100];
  void Input(int mode, int problemNum = 0)
  {
    if (mode == 0) {
      cin >> m;
      string sEps;
      cin >> sEps;
      iEps = (sEps[2] - '0') * 10 + (sEps[3] - '0');
      eps = (double)iEps / 100.0;
    }
    else if (mode == 1000) {
      string fileNameIfs = "./in/";
      string strNum;
      rep(i, 4)
      {
        strNum += (char)(problemNum % 10 + '0');
        problemNum /= 10;
      }
      reverse(strNum.begin(), strNum.end());
      fileNameIfs += strNum + ".txt";

      ifstream ifs(fileNameIfs);

      ifs >> m;
      string sEps;
      ifs >> sEps;
      iEps = (sEps[2] - '0') * 10 + (sEps[3] - '0');
      eps = (double)iEps / 100.0;

      rep(i, 100) ifs >> judgeArr[i];
    }
    else if (mode == 100 || mode == 110) {
      m = Rand() % 91 + 10;
      // m = Rand() % 41 + 10;
      iEps = Rand() % 41;
      // iEps = Rand() % 11 + 30;
      eps = iEps / 100.0;
      rep(i, 100) judgeArr[i] = Rand() % m;
    }
    else if (mode == 333) {
      m = problemNum * 10;
      iEps = 40;
      eps = iEps / 100.0;
      rep(i, 100) judgeArr[i] = Rand() % m;
    }
  }
}  // namespace

// Output
namespace
{
  ofstream ofs1000Out;
  void OpenOfs1000Out(int problemNum)
  {
    string fileNameOfs = "./out/";
    string strNum;
    rep(i, 4)
    {
      strNum += (char)(problemNum % 10 + '0');
      problemNum /= 10;
    }
    reverse(strNum.begin(), strNum.end());
    fileNameOfs += strNum + ".txt";

    ofs1000Out.open(fileNameOfs);
  }

  void CloseOfs1000Out() { ofs1000Out.close(); }

  void OutputArrayAsString(int mode)
  {
    if (mode == 0) {
      cout << n << endl;
      rep(i, m)
      {
        string s;
        rep(j, n)
        {
          srep(k, j + 1, n) { s += (char)(a[i][j][k] + '0'); }
        }
        cout << s << endl;
      }
      fflush(stdout);
    }
    else if (mode == 1000) {
      ofs1000Out << n << endl;
      ofs1000Out << "# n = " << n << endl;
      ofs1000Out << "# hyperSolverNum = " << hyperSolverNum << endl;
      ofs1000Out << "# hyperMinDiff = " << hyperMinDiff << endl;
      ofs1000Out << "# hyperMaxRound = " << hyperMaxRound << endl;
      ofs1000Out << "# hyperStep1 = " << hyperStep1 << endl;
      ofs1000Out << "# hyperStep2 = " << hyperStep2 << endl;
      rep(i, m)
      {
        string s;
        rep(j, n)
        {
          srep(k, j + 1, n) { s += (char)(a[i][j][k] + '0'); }
        }
        ofs1000Out << s << endl;
        ofs1000Out << "# " << numPairArr[i][0] << ' ' << numPairArr[i][1] << endl;
      }
    }
  }

  int answersFor1000Out[TURN];
  void OutputAnsToOfs1000Out()
  {
    rep(i, 100) { ofs1000Out << answersFor1000Out[i] << endl; }
  }

  void OutputHaipara()
  {
    rep(i, 101)
    {
      rep(j, 41)
      {
        if (hyperSolver[i][j] / 10 == 10 || hyperSolver[i][j] / 10 == 12) {
          hyperStep2Arr[i][j] = hyperStep1Arr[i][j];
        }
      }
    }
    ofstream ofs("Haipara.txt");
    ofs << "int hyperN[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperN[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs << "double hyperMaxScore[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperMaxScore[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs << "int hyperSolver[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperSolver[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs << "int hyperMinDiffArr[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperMinDiffArr[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs << "int hyperMaxRoundArr[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperMaxRoundArr[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs << "int hyperStep1Arr[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperStep1Arr[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs << "int hyperStep2Arr[101][41] = {" << endl;
    rep(i, 101)
    {
      ofs << "{";
      rep(j, 41)
      {
        ofs << hyperStep2Arr[i][j];
        if (j == 40)
          ofs << "}";
        else
          ofs << ",";
      }
      if (i == 100) {
        ofs << "};" << endl;
      }
      else {
        ofs << ',' << endl;
      }
    }
    ofs << endl;
    ofs.close();
  }
}  // namespace

void RandmizeGraph(int x)
{
  rep(j, n)
  {
    srep(k, j + 1, n)
    {
      b[j][k] = a[x][j][k];
      if (Rand01() < eps) {
        b[j][k] = 1 - b[j][k];
      }
      b[k][j] = b[j][k];
    }
  }
}

int judgeNum;
void InitB(int mode, int turn = 0)
{
  rep(i, n)
  {
    rep(j, n) { b[i][j] = 0; }
  }
  if (mode == 0) {
    string s;
    cin >> s;
    int ite = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        b[i][j] = s[ite] - '0';
        b[j][i] = b[i][j];
        ite++;
      }
    }
  }
  else {
    int judge = judgeArr[turn];
    judgeNum = judge;
    RandmizeGraph(judge);
  }
}

// numArray
namespace
{
  int numArr[100];
  void InitNumArray1()
  {
    if (n % 2 == 0) {
      int cnt = 0;
      drep(i, n / 2)
      {
        numArr[cnt] = i + 1;
        cnt++;
        numArr[cnt] = n - i;
        cnt++;
      }
    }
    else {
      int cnt = 0;
      numArr[cnt] = n / 2 + 1;
      cnt++;
      drep(i, n / 2)
      {
        numArr[cnt] = i + 1;
        cnt++;
        numArr[cnt] = n - i;
        cnt++;
      }
    }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray2()
  {
    rep(i, 100) { numArr[i] = maxNumArray[i]; }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray3()
  {
    rep(i, 100) { numArr[i] = real_real_maxNumArray[(m + 9) / 10][i]; }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray4()
  {
    rep(i, 100) numArr[i] = 0;
    rep(i, 20) { numArr[i] = (i + 1) * 5; }
    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray5()
  {
    if (n % 2 == 0) {
      int cnt = 0;
      drep(i, n / 2)
      {
        if (i % 2 == 1) continue;
        numArr[cnt] = i + 1;
        cnt++;
        numArr[cnt] = n - i;
        cnt++;
      }
      drep(i, n / 2)
      {
        if (i % 2 == 0) continue;
        numArr[cnt] = i + 1;
        cnt++;
        numArr[cnt] = n - i;
        cnt++;
      }
    }
    else {
      int cnt = 0;
      numArr[cnt] = n / 2 + 1;
      cnt++;
      drep(i, n / 2)
      {
        if (i % 2 == 0) continue;
        numArr[cnt] = i + 1;
        cnt++;
        numArr[cnt] = n - i;
        cnt++;
      }
      drep(i, n / 2)
      {
        if (i % 2 == 1) continue;
        numArr[cnt] = i + 1;
        cnt++;
        numArr[cnt] = n - i;
        cnt++;
      }
    }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray6()
  {
    if (n % 2 == 0) {
      int cnt = 0;
      rep(j, 3)
      {
        drep(i, n / 2)
        {
          if (i % 3 != j) continue;
          numArr[cnt] = i + 1;
          cnt++;
          numArr[cnt] = n - i;
          cnt++;
        }
      }
    }
    else {
      int cnt = 0;
      numArr[cnt] = n / 2 + 1;
      cnt++;
      srep(j, 2, 5)
      {
        drep(i, n / 2)
        {
          if (i % 3 != j % 3) continue;
          numArr[cnt] = i + 1;
          cnt++;
          numArr[cnt] = n - i;
          cnt++;
        }
      }
    }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray7()
  {
    if (n % 2 == 0) {
      int cnt = 0;
      drep(i, n / 2)
      {
        numArr[cnt] = i + 1;
        cnt++;
      }
      drep(i, n / 2)
      {
        numArr[cnt] = n - i;
        cnt++;
      }
    }
    else {
      int cnt = 0;
      numArr[cnt] = n / 2 + 1;
      cnt++;
      drep(i, n / 2)
      {
        numArr[cnt] = i + 1;
        cnt++;
      }
      drep(i, n / 2)
      {
        numArr[cnt] = n - i;
        cnt++;
      }
    }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num <= j) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray8()
  {
    int cnt = 0;
    drep(i, n)
    {
      numArr[cnt] = i + 1;
      cnt++;
    }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray9()
  {
    int cnt = 0;
    srep(j, 1, 3)
    {
      drep(i, n)
      {
        if (i % 2 != j % 2) continue;
        numArr[cnt] = i + 1;
        cnt++;
      }
    }

    rep(i, m)
    {
      int num = numArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray10()
  {
    numPairArrOK = 1;
    int cnt = 0;
    for (int i = n; i > 0; i -= hyperStep1) {
      numPairArr[cnt][0] = i;
      numPairArr[cnt][1] = 0;
      cnt++;
      int j = n - i;
      while (j >= i + hyperMinDiff) {
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        cnt++;
        j -= hyperStep1;
      }
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }

  void InitNumArray11()
  {
    numPairArrOK = 1;
    int cnt = 0;
    for (int i = n; i > 0; i -= hyperStep1) {
      numPairArr[cnt][0] = i;
      numPairArr[cnt][1] = 0;
      cnt++;
      int j = n - i;
      while (j >= i + hyperMinDiff) {
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        cnt++;
        j -= hyperStep2;
      }
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }

  void InitNumArray12()
  {
    numPairArrOK = 1;
    int cnt = 0;
    int one = 1;
    for (int i = n; i > 0; i -= hyperStep1) {
      int j = n - i;
      while (j >= i + hyperMinDiff) {
        one = 0;
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        cnt++;
        j -= hyperStep1;
      }
      if (one) {
        numPairArr[cnt][0] = i;
        numPairArr[cnt][1] = 0;
        cnt++;
      }
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }

  void InitNumArray13()
  {
    numPairArrOK = 1;
    int cnt = 0;
    int one = 1;
    for (int i = n; i > 0; i -= hyperStep1) {
      int j = n - i;
      while (j >= i + hyperMinDiff) {
        one = 0;
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        cnt++;
        j -= hyperStep2;
      }
      if (one) {
        numPairArr[cnt][0] = i;
        numPairArr[cnt][1] = 0;
        cnt++;
      }
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }

  void InitNumArray14()
  {
    rep(i, m)
    {
      int cnt = 0;
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (cnt < i) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
          cnt++;
        }
      }
    }
  }

  void InitNumArray15()
  {
    numPairArrOK = 0;
    int minn = 4;
    int cnt = 0;
    set<int> iset;
    set<P> jset;
    while (true) {
      cnt = 0;
      int k = minn;
      while (k <= n) {
        int j = k + hyperMinDiff;
        while (j <= n) {
          int i = j + hyperMinDiff;
          while (i <= n) {
            // 1クラ
            if (iset.find(i) == iset.end()) {
              iset.insert(i);
              cnt++;
            }
            // 2クラ
            if (i + j <= n) {
              if (jset.find(P(i, j)) == jset.end()) {
                jset.insert(P(i, j));
                cnt++;
              }
            }

            // 3クラ
            if (i + j + k <= n) {
              cnt++;
            }
            i += hyperStep1;
          }
          j += hyperStep2;
        }
        k += hyperStep2;
        if (cnt >= m) break;
      }
      iset.clear();
      jset.clear();
      if (cnt >= m) {
        minn++;
        numPairArrOK = 1;
      }
      else {
        break;
      }
    }
    minn--;

    {
      cnt = 0;
      int k = minn;
      while (k <= n) {
        int j = k + hyperMinDiff;
        while (j <= n) {
          int i = j + hyperMinDiff;
          while (i <= n) {
            // 1クラ
            if (iset.find(i) == iset.end()) {
              iset.insert(i);
              numThreeArr[cnt][0] = i;
              numThreeArr[cnt][1] = 0;
              numThreeArr[cnt][2] = 0;
              cnt++;
            }
            // 2クラ
            if (i + j <= n) {
              if (jset.find(P(i, j)) == jset.end()) {
                jset.insert(P(i, j));
                numThreeArr[cnt][0] = i;
                numThreeArr[cnt][1] = j;
                numThreeArr[cnt][2] = 0;
                cnt++;
              }
            }

            // 3クラ
            if (i + j + k <= n) {
              numThreeArr[cnt][0] = i;
              numThreeArr[cnt][1] = j;
              numThreeArr[cnt][2] = k;
              cnt++;
            }
            i += hyperStep1;
            if (cnt >= 500) break;
          }
          j += hyperStep2;
          if (cnt >= 500) break;
        }
        k += hyperStep2;
        if (cnt >= 500) break;
      }
    }

    rep(i, cnt / 2)
    {
      swap(numThreeArr[i][0], numThreeArr[cnt - 1 - i][0]);
      swap(numThreeArr[i][1], numThreeArr[cnt - 1 - i][1]);
      swap(numThreeArr[i][2], numThreeArr[cnt - 1 - i][2]);
    }

    rep(i, m)
    {
      int num1 = numThreeArr[i][0];
      int num2 = numThreeArr[i][1];
      int num3 = numThreeArr[i][2];
      // cout << "a" << num1 << ' ' << num2 << ' ' << num3 << ' ' << endl;
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 + num2 <= j && k < num1 + num2 + num3) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  void InitNumArray16()
  {
    numPairArrOK = 0;
    int minn = 4;
    int cnt = 0;
    set<int> iset;
    set<P> jset;
    while (true) {
      cnt = 0;
      int k = minn;
      while (k <= n) {
        int j = k + hyperMinDiff;
        while (j <= n) {
          int i = j + hyperMinDiff;
          while (i <= n) {
            // 1クラ
            // if (iset.find(i) == iset.end()) {
            //  iset.insert(i);
            //  cnt++;
            //}
            // 2クラ
            // if (i + j <= n) {
            //  if (jset.find(P(i, j)) == jset.end()) {
            //    jset.insert(P(i, j));
            //    cnt++;
            //  }
            //}

            // 3クラ
            if (i + j + k <= n) {
              cnt++;
            }
            i += hyperStep1;
          }
          j += hyperStep2;
        }
        k += hyperStep2;
        if (cnt >= m) break;
      }
      iset.clear();
      jset.clear();
      if (cnt >= m) {
        minn++;
        numPairArrOK = 1;
      }
      else {
        break;
      }
    }
    minn--;

    {
      cnt = 0;
      int k = minn;
      while (k <= n) {
        int j = k + hyperMinDiff;
        while (j <= n) {
          int i = j + hyperMinDiff;
          while (i <= n) {
            //// 1クラ
            // if (iset.find(i) == iset.end()) {
            //   iset.insert(i);
            //   numThreeArr[cnt][0] = i;
            //   numThreeArr[cnt][1] = 0;
            //   numThreeArr[cnt][2] = 0;
            //   cnt++;
            // }
            //// 2クラ
            // if (i + j <= n) {
            //   if (jset.find(P(i, j)) == jset.end()) {
            //     jset.insert(P(i, j));
            //     numThreeArr[cnt][0] = i;
            //     numThreeArr[cnt][1] = j;
            //     numThreeArr[cnt][2] = 0;
            //     cnt++;
            //   }
            // }

            // 3クラ
            if (i + j + k <= n) {
              numThreeArr[cnt][0] = i;
              numThreeArr[cnt][1] = j;
              numThreeArr[cnt][2] = k;
              cnt++;
            }
            i += hyperStep1;
            if (cnt >= 500) break;
          }
          j += hyperStep2;
          if (cnt >= 500) break;
        }
        k += hyperStep2;
        if (cnt >= 500) break;
      }
    }

    rep(i, cnt / 2)
    {
      swap(numThreeArr[i][0], numThreeArr[cnt - 1 - i][0]);
      swap(numThreeArr[i][1], numThreeArr[cnt - 1 - i][1]);
      swap(numThreeArr[i][2], numThreeArr[cnt - 1 - i][2]);
    }

    rep(i, m)
    {
      int num1 = numThreeArr[i][0];
      int num2 = numThreeArr[i][1];
      int num3 = numThreeArr[i][2];
      // cout << "a" << num1 << ' ' << num2 << ' ' << num3 << ' ' << endl;
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 + num2 <= j && k < num1 + num2 + num3) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  // 4コア
  void InitNumArray17()
  {
    numPairArrOK = 0;
    int minn = 4;
    int cnt = 0;
    set<int> iset;
    set<P> jset;
    set<pair<P, P>> kset;
    pair<P, P> p;
    p.second.second = 0;
    while (true) {
      cnt = 0;
      int l = minn;
      while (l <= n) {
        int k = l + hyperMinDiff;
        while (k <= n) {
          int j = k + hyperMinDiff;
          while (j <= n) {
            int i = j + hyperMinDiff;
            while (i <= n) {
              // 1クラ
              if (iset.find(i) == iset.end()) {
                iset.insert(i);
                cnt++;
              }
              // 2クラ
              if (i + j <= n) {
                if (jset.find(P(i, j)) == jset.end()) {
                  jset.insert(P(i, j));
                  cnt++;
                }
              }

              // 3クラ
              if (i + j + k <= n) {
                p.first.first = i;
                p.first.second = j;
                p.second.first = k;
                if (kset.find(p) == kset.end()) {
                  kset.insert(p);
                  cnt++;
                }
              }
              // 4クラ
              if (i + j + k + l <= n) {
                cnt++;
              }
              i += hyperStep1;
            }
            j += hyperStep1;
          }
          k += hyperStep2;
          if (cnt >= m) break;
        }
        l += hyperStep2;
        if (cnt >= m) break;
      }

      iset.clear();
      jset.clear();
      kset.clear();
      if (cnt >= m) {
        minn++;
        numPairArrOK = 1;
      }
      else {
        break;
      }
    }
    minn--;

    if (numPairArrOK == 0) return;

    {
      cnt = 0;
      int l = minn;
      while (l <= n) {
        int k = l + hyperMinDiff;
        while (k <= n) {
          int j = k + hyperMinDiff;
          while (j <= n) {
            int i = j + hyperMinDiff;
            while (i <= n) {
              // 1クラ
              if (iset.find(i) == iset.end()) {
                iset.insert(i);
                numFourArr[cnt][0] = i;
                numFourArr[cnt][1] = 0;
                numFourArr[cnt][2] = 0;
                numFourArr[cnt][3] = 0;
                cnt++;
              }
              // 2クラ
              if (i + j <= n) {
                if (jset.find(P(i, j)) == jset.end()) {
                  jset.insert(P(i, j));
                  numFourArr[cnt][0] = i;
                  numFourArr[cnt][1] = j;
                  numFourArr[cnt][2] = 0;
                  numFourArr[cnt][3] = 0;
                  cnt++;
                }
              }

              // 3クラ
              if (i + j + k <= n) {
                p.first.first = i;
                p.first.second = j;
                p.second.first = k;
                if (kset.find(p) == kset.end()) {
                  kset.insert(p);
                  numFourArr[cnt][0] = i;
                  numFourArr[cnt][1] = j;
                  numFourArr[cnt][2] = k;
                  numFourArr[cnt][3] = 0;
                  cnt++;
                }
              }

              // 4クラ
              if (i + j + k + l <= n) {
                numFourArr[cnt][0] = i;
                numFourArr[cnt][1] = j;
                numFourArr[cnt][2] = k;
                numFourArr[cnt][3] = l;
                cnt++;
              }
              i += hyperStep1;
              if (cnt >= 500) break;
            }
            j += hyperStep1;
            if (cnt >= 500) break;
          }
          k += hyperStep2;
          if (cnt >= 500) break;
        }
        l += hyperStep2;
        if (cnt >= 500) break;
      }
    }

    rep(i, cnt / 2)
    {
      swap(numFourArr[i][0], numFourArr[cnt - 1 - i][0]);
      swap(numFourArr[i][1], numFourArr[cnt - 1 - i][1]);
      swap(numFourArr[i][2], numFourArr[cnt - 1 - i][2]);
      swap(numFourArr[i][3], numFourArr[cnt - 1 - i][3]);
    }

    rep(i, m)
    {
      int num1 = numFourArr[i][0];
      int num2 = numFourArr[i][1];
      int num3 = numFourArr[i][2];
      int num4 = numFourArr[i][3];
      // cout << "a" << num1 << ' ' << num2 << ' ' << num3  << ' ' << num4 <<
      // endl;
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 + num2 <= j && k < num1 + num2 + num3) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 + num2 + num3 <= j && k < num1 + num2 + num3 + num4) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
        }
      }
    }
  }

  // 13表裏
  int omoteArr[1000];
  void InitNumArray18()
  {
    rep(i, 1000)omoteArr[i] = 0;
    numPairArrOK = 1;
    int cnt = 0;
    int one = 1;
    for (int i = n; i > 0; i -= hyperStep1) {
      int j = n - i;
      while (j >= i + hyperMinDiff) {
        one = 0;
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        omoteArr[cnt] = 0;
        cnt++;
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        omoteArr[cnt] = 1;
        cnt++;
        j -= hyperStep2;
      }
      if (one) {
        numPairArr[cnt][0] = i;
        numPairArr[cnt][1] = 0;
        omoteArr[cnt] = 0;
        cnt++;
        numPairArr[cnt][0] = i;
        numPairArr[cnt][1] = 0;
        omoteArr[cnt] = 1;
        cnt++;
      }
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      int omote = omoteArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
          if (omote) {
            a[i][j][k] = 1 - a[i][j][k];
            a[i][k][j] = 1 - a[i][k][j];
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }

  // 10表裏
  void InitNumArray19()
  {
    rep(i, 1000)omoteArr[i] = 0;
    numPairArrOK = 1;
    int cnt = 0;
    for (int i = n; i > 0; i -= hyperStep1) {
      numPairArr[cnt][0] = i;
      numPairArr[cnt][1] = 0;
      omoteArr[cnt] = 0;
      cnt++;
      numPairArr[cnt][0] = i;
      numPairArr[cnt][1] = 0;
      omoteArr[cnt] = 1;
      cnt++;
      int j = n - i;
      while (j >= i + hyperMinDiff) {
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        omoteArr[cnt] = 0;
        cnt++;
        numPairArr[cnt][0] = j;
        numPairArr[cnt][1] = i;
        omoteArr[cnt] = 1;
        cnt++;
        j -= hyperStep1;
      }
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      int omote = omoteArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else if (num1 <= j && k < num1 + num2) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
          if (omote) {
            a[i][j][k] = 1 - a[i][j][k];
            a[i][k][j] = 1 - a[i][k][j];
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }

  // 0.0用
  vector<vector<P>> zeroPairs;
  vector<int> dfsvec;
  void dfs(int sum, int x)
  {
    if (dfsvec.size()) {

      if (dfsvec.size() == 1) {
        int num1 = dfsvec[0];
        srep(i, num1 - 1, num1 * (num1 - 1) / 2 + 1)
        {
          vector<P> vp;
          vp.push_back(P(num1, i));
          zeroPairs.push_back(vp);
        }
      }
      if (dfsvec.size() == 2) {
        int num1 = dfsvec[0];
        int num2 = dfsvec[1];
        srep(i, num1 - 1, num1 * (num1 - 1) / 2 + 1)
        {
          srep(j, num2 - 1, num2 * (num2 - 1) / 2 + 1)
          {
            vector<P> vp;
            vp.push_back(P(num1, i));
            vp.push_back(P(num2, j));
            zeroPairs.push_back(vp);
          }
        }
      }
    }

    srep(i, x + 1, 10)
    {
      if (sum + i <= n) {
        dfsvec.push_back(i);
        dfs(sum + i, i);
        dfsvec.pop_back();
      }
    }
  }
  void InitNumArray20()
  {
    zeroPairs.clear();
    numPairArrOK = 0;
    dfs(0, 1);
    if (zeroPairs.size() >= m) {
      numPairArrOK = 1;
      rep(i, m)
      {
        rep(j, n)
        {
          rep(k, n)
          {
            a[i][j][k] = 0;
          }
        }
      }
      rep(i, m)
      {
        vector<P> vp = zeroPairs[i];
        int sz = vp.size();
        int sum = 0;
        rep(j, sz)
        {
          int sq = vp[j].first;
          int hon = vp[j].second;
          int cnt = 0;
          srep(k, sum, sum + sq)
          {
            srep(l, k + 1, sum + sq)
            {
              if (cnt < hon) {
                a[i][k][l] = 1;
                a[i][l][k] = 1;
                cnt++;
              }
            }
          }
          sum += sq;
        }
      }
    }
  }

  // 1コア
  void InitNumArray21()
  {
    rep(i, 1000)omoteArr[i] = 0;
    numPairArrOK = 1;
    int cnt = 0;
    for (int i = n; i > 0; i -= hyperStep1) {
      numSingleArr[cnt] = i;
      omoteArr[cnt] = 0;
      cnt++;
      numSingleArr[cnt] = i;
      omoteArr[cnt] = 1;
      cnt++;
      if (cnt > 200) break;
    }

    rep(i, m)
    {
      int num1 = numSingleArr[i];
      int omote = omoteArr[i];
      rep(j, n)
      {
        srep(k, j + 1, n)
        {
          if (k < num1) {
            a[i][j][k] = 1;
            a[i][k][j] = 1;
          }
          else {
            a[i][j][k] = 0;
            a[i][k][j] = 0;
          }
          if (omote) {
            a[i][j][k] = 1 - a[i][j][k];
            a[i][k][j] = 1 - a[i][k][j];
          }
        }
      }
    }
    if (cnt < m) numPairArrOK = 0;
  }


  void InitNumArray(int mode)
  {
    numPairArrOK = 1;
    int ra = hyperSolverNum % 1000 / 10;

    if (ra == 1) {
      InitNumArray1();
    }
    else if (ra == 2) {
      n = 100;
      InitNumArray2();
    }
    else if (ra == 3) {
      n = 100;
      InitNumArray3();
    }
    else if (ra == 4) {
      n = 100;
      InitNumArray4();
    }
    else if (ra == 5) {
      InitNumArray5();
    }
    else if (ra == 6) {
      InitNumArray6();
    }
    else if (ra == 7) {
      InitNumArray7();
    }
    else if (ra == 8) {
      InitNumArray8();
    }
    else if (ra == 9) {
      InitNumArray9();
    }
    else if (ra == 10) {
      InitNumArray10();
    }
    else if (ra == 11) {
      InitNumArray11();
    }
    else if (ra == 12) {
      InitNumArray12();
    }
    else if (ra == 13) {
      InitNumArray13();
    }
    else if (ra == 14) {
      InitNumArray14();
    }
    else if (ra == 15) {
      InitNumArray15();
    }
    else if (ra == 16) {
      InitNumArray16();
    }
    else if (ra == 17) {
      InitNumArray17();
    }
    else if (ra == 18) {
      InitNumArray18();
    }
    else if (ra == 19) {
      InitNumArray19();
    }
    else if (ra == 20) {
      InitNumArray20();
    }
    else if (ra == 21) {
      InitNumArray21();
    }
  }

}  // namespace

int Solver1()
{
  vector<int> keep[110];

  int cnt[100] = {};
  rep(i, n)
  {
    rep(j, n) { cnt[i] += b[i][j]; }
  }

  rep(i, m)
  {
    int num = numArr[i];
    double e0 = ((double)n - 1) * eps;
    double e1 = ((double)num - 1) + ((double)n - num) * eps - ((double)num - 1) * eps;
    int kijun = round(e0 + (e1 - e0) / 2.0);
    int count = 0;
    rep(j, 100)
    {
      if (cnt[j] >= kijun) {
        count++;
      }
    }
    keep[abs(num - count)].push_back(i);
  }

  int res = -1;
  rep(i, 110)
  {
    if (keep[i].size()) {
      int sz = keep[i].size();
      res = keep[i][sz / 2];
      break;
    }
  }

  return res;
}

int Solver2()
{
  int cnt[100] = {};
  int f[100] = {};
  int res = n;
  rep(i, n)
  {
    rep(j, n) { cnt[i] += b[i][j]; }
    f[i] = 1;
  }

  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }

  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num = numArr[i];
    if (abs(num - res) < diff) {
      diff = abs(num - res);
      argRes = i;
    }
  }

  return argRes;
}

int Solver3()
{
  vector<int> vec[2];
  int f[100];
  rep(i, n)
  {
    if (i == 0) {
      vec[0].push_back(i);
      f[i] = 0;
    }
    else {
      if (b[0][i]) {
        vec[0].push_back(i);
        f[i] = 0;
      }
      else {
        vec[1].push_back(i);
        f[i] = 1;
      }
    }
  }
  rep(_, 100)
  {
    if (vec[0].empty() || vec[1].empty()) break;
    double cnt[110][2];
    rep(i, n) rep(j, 2) cnt[i][j] = 0;
    vector<int> nxt[2];
    rep(i, n)
    {
      rep(j, n)
      {
        if (i == j) {
          cnt[i][0]++;
        }
        else if (b[i][j]) {
          if (f[i] == f[j]) {
            cnt[i][0]++;
          }
          else {
            cnt[i][1]++;
          }
        }
      }
      int sz = vec[f[i]].size();
      if (cnt[i][0] / sz >= cnt[i][1] / ((double)n - sz)) {
        nxt[f[i]].push_back(i);
      }
      else {
        nxt[1 - f[i]].push_back(i);
      }
    }

    rep(i, 2) vec[i] = nxt[i];
  }
  int res = min(vec[0].size(), vec[1].size());
  // cout << res << endl;
  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num = numArr[i];
    if (abs(num - res) < diff) {
      diff = abs(num - res);
      argRes = i;
    }
  }

  return argRes;
}

int Solver4()
{
  int cnt[100] = {};
  int f[100] = {};
  int res = n;
  rep(i, n)
  {
    rep(j, n) { cnt[i] += b[i][j]; }
    f[i] = 1;
  }

  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }

  if (res >= 20) {
    int res2 = 0;
    vector<int> vec;
    rep(i, n)
    {
      if (f[i]) {
        vec.push_back(i);
      }
    }
    int ff[100] = {};
    double kijun = (eps * eps + (1.0 - eps) * (1.0 - eps)) / 2.0;
    rep(i, n)
    {
      int tri[2] = {};
      rep(j, res)
      {
        int jj = vec[j];
        if (jj == i) continue;
        srep(k, j + 1, res)
        {
          int kk = vec[k];
          if (kk == i) continue;
          tri[1]++;
          if (b[i][jj] && b[i][kk]) {
            tri[0]++;
          }
        }
      }
      if ((double)tri[0] / tri[1] >= kijun) {
        ff[i] = 1;
        res2++;
      }
    }
    res = res2;
  }

  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num = numArr[i];
    if (abs(num - res) < diff) {
      diff = abs(num - res);
      argRes = i;
    }
  }

  return argRes;
}

int Solver5()
{
  int cnt[100] = {};
  int f[100] = {};
  int res = n;
  rep(i, n)
  {
    rep(j, n) { cnt[i] += b[i][j]; }
    f[i] = 1;
  }

  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }

  int res1 = res;
  res = n - res;
  rep(i, n) { f[i] = 1 - f[i]; }
  rep(i, n) { cnt[i] = 0; }
  rep(i, n)
  {
    rep(j, n)
    {
      if (f[i] && f[j]) cnt[i] += b[i][j];
    }
  }
  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }
  int res2 = res;
  if (res2 <= hyperMaxRound) res2 = 0;
  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numPairArr[i][0];
    int num2 = numPairArr[i][1];
    if (abs(num1 - res1) + abs(num2 - res2) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2);
      argRes = i;
    }
  }

  return argRes;
}

int Solver6()
{
  int cnt[100] = {};
  int f[100] = {};
  int ff[100] = {};
  int res = n;
  rep(i, n)
  {
    rep(j, n) { cnt[i] += b[i][j]; }
    f[i] = 1;
  }

  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }

  int res1 = res;
  res = n - res;
  rep(i, n) { f[i] = 1 - f[i]; }
  rep(i, n)
  {
    if (f[i] == 0) ff[i] = 1;
  }
  rep(i, n) { cnt[i] = 0; }
  rep(i, n)
  {
    rep(j, n)
    {
      if (f[i] && f[j]) cnt[i] += b[i][j];
    }
  }
  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }
  int res2 = res;
  if (res2 <= hyperMaxRound) {
    res2 = 0;
    rep(i, n) f[i] = 0;
  }
  rep(i, n)
  {
    if (f[i]) ff[i] = 2;
  }

  rep(i, n) f[i] = ff[i];

  int score = 0;
  rep(i, n)
  {
    srep(j, i + 1, n)
    {
      if (f[i] == 0 && f[j] == 0) {
        score += 1 - b[i][j];
      }
      else {
        if ((f[i] == f[j]) == (b[i][j])) {
          score++;
        }
      }
    }
  }

  bitset<100> bif[3] = {}, bib[100] = {};
  rep(i, n)
  {
    if (f[i] > 0) {
      bif[f[i]][i] = 1;
    }
  }

  rep(i, n)
  {
    rep(j, n) { bib[i][j] = b[i][j]; }
  }

  bitset<100> bione(0);
  rep(i, n) { bione[i] = 1; }

  int flipLoop = 1000;
  if (MODE == 0) flipLoop = 10000;
  rep(_, flipLoop)
  {
    int x = Rand() % n;
    int ra = Rand() % 3;
    while (ra == f[x]) {
      ra = Rand() % 3;
    }
    if (res2 = 0) {
      ra = 1 - f[x];
    }
    int tmp = score;
    int keep = f[x];

    // tmpからxの点を引く
    if (f[x] == 0) {
      tmp -= n - bib[x].count();
      tmp++;  // 自分の分
    }
    else {
      tmp -= (bif[f[x]] & bib[x]).count();
      tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    bif[f[x]][x] = 0;
    f[x] = ra;
    bif[f[x]][x] = 1;
    // tmpからraの点を足す
    if (f[x] == 0) {
      tmp += n - bib[x].count();
      tmp--;  // 自分の分
    }
    else {
      tmp += (bif[f[x]] & bib[x]).count();
      tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    if (tmp >= score) {
      score = tmp;
    }
    else {
      bif[f[x]][x] = 0;
      f[x] = keep;
      bif[f[x]][x] = 1;
    }
  }
  res1 = 0;
  res2 = 0;
  rep(i, n)
  {
    if (f[i] == 1) res1++;
    if (f[i] == 2) res2++;
  }

  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numPairArr[i][0];
    int num2 = numPairArr[i][1];
    if (abs(num1 - res1) + abs(num2 - res2) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2);
      argRes = i;
    }
  }

  return argRes;
}

int Solver7()
{
  int cnt[100] = {};
  int f[100] = {};
  int ff[100] = {};
  int res = n;
  rep(i, n)
  {
    rep(j, n) { cnt[i] += b[i][j]; }
    f[i] = 1;
  }

  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }

  int res1 = res;
  res = n - res;
  rep(i, n) { f[i] = 1 - f[i]; }
  rep(i, n)
  {
    if (f[i] == 0) ff[i] = 1;
  }
  rep(i, n) { cnt[i] = 0; }
  rep(i, n)
  {
    rep(j, n)
    {
      if (f[i] && f[j]) cnt[i] += b[i][j];
    }
  }
  while (res > 1) {
    int mi = 1000;
    int arg = -1;
    rep(i, n)
    {
      if (f[i] && cnt[i] < mi && cnt[i] < (res + 1) / 2) {
        mi = cnt[i];
        arg = i;
      }
    }
    if (arg == -1) break;
    rep(i, n)
    {
      if (i == arg) continue;
      if (f[i] && b[i][arg]) {
        cnt[i]--;
      }
    }
    res--;
    f[arg] = 0;
  }
  int res2 = res;
  if (res2 <= hyperMaxRound) {
    res2 = 0;
    rep(i, n) f[i] = 0;
  }
  rep(i, n)
  {
    if (f[i]) ff[i] = 2;
  }

  rep(i, n) f[i] = ff[i];

  int score = 0;
  rep(i, n)
  {
    srep(j, i + 1, n)
    {
      if (f[i] == 0 && f[j] == 0) {
        score += 1 - b[i][j];
      }
      else {
        if ((f[i] == f[j]) == (b[i][j])) {
          score++;
        }
      }
    }
  }

  bitset<100> bif[3] = {}, bib[100] = {};
  rep(i, n)
  {
    if (f[i] > 0) {
      bif[f[i]][i] = 1;
    }
  }

  rep(i, n)
  {
    rep(j, n) { bib[i][j] = b[i][j]; }
  }

  bitset<100> bione(0);
  rep(i, n) { bione[i] = 1; }

  int flipLoop = 1000;
  if (MODE == 0) flipLoop = 10000;
  rep(_, flipLoop)
  {
    int x = Rand() % n;
    int ra = Rand() % 3;
    while (ra == f[x]) {
      ra = Rand() % 3;
    }
    if (res2 == 0) {
      ra = 1 - f[x];
    }
    int tmp = score;
    int keep = f[x];

    // tmpからxの点を引く
    if (f[x] == 0) {
      tmp -= n - bib[x].count();
      tmp++;  // 自分の分
    }
    else {
      tmp -= (bif[f[x]] & bib[x]).count();
      tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    bif[f[x]][x] = 0;
    f[x] = ra;
    bif[f[x]][x] = 1;
    // tmpからraの点を足す
    if (f[x] == 0) {
      tmp += n - bib[x].count();
      tmp--;  // 自分の分
    }
    else {
      tmp += (bif[f[x]] & bib[x]).count();
      tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    if (tmp >= score) {
      score = tmp;
    }
    else {
      bif[f[x]][x] = 0;
      f[x] = keep;
      bif[f[x]][x] = 1;
    }
  }
  res1 = 0;
  res2 = 0;
  rep(i, n)
  {
    if (f[i] == 1) res1++;
    if (f[i] == 2) res2++;
  }

  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numPairArr[i][0];
    int num2 = numPairArr[i][1];
    if (abs(num1 - res1) + abs(num2 - res2) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2);
      argRes = i;
    }
  }

  return argRes;
}

int Solver8()
{
  int cnt = 0;
  rep(i, n)
  {
    srep(j, i + 1, n) { cnt += b[i][j]; }
  }
  cnt = min(cnt, m - 1);
  return cnt;
}

int Solver9()
{
  map<P, int> mp;
  int fff[10][100];
  P kp[10];

  int kcnt[100] = {};
  rep(i, n)
  {
    rep(j, n) { kcnt[i] += b[i][j]; }
  }

  rep(_, 10)
  {
    int cnt[100] = {};
    int f[100] = {};
    int ff[100] = {};
    int res = n;

    rep(i, n)
    {
      cnt[i] = kcnt[i];
      f[i] = 1;
    }

    while (res > 1) {
      int mi = 1000;
      vector<int> arv;
      rep(i, n)
      {
        if (f[i] && cnt[i] <= mi && cnt[i] < (res + 1) / 2) {
          if (cnt[i] == mi) {
            arv.push_back(i);
          }
          else {
            arv.clear();
            arv.push_back(i);
          }
          mi = cnt[i];
        }
      }
      if (arv.empty()) break;
      int arg = arv[Rand() % arv.size()];
      rep(i, n)
      {
        if (i == arg) continue;
        if (f[i] && b[i][arg]) {
          cnt[i]--;
        }
      }
      res--;
      f[arg] = 0;
    }

    int res1 = res;
    res = n - res;
    rep(i, n) { f[i] = 1 - f[i]; }
    rep(i, n)
    {
      if (f[i] == 0) ff[i] = 1;
    }
    rep(i, n) { cnt[i] = 0; }
    rep(i, n)
    {
      rep(j, n)
      {
        if (f[i] && f[j]) cnt[i] += b[i][j];
      }
    }
    while (res > 1) {
      int mi = 1000;
      vector<int> arv;
      rep(i, n)
      {
        if (f[i] && cnt[i] <= mi && cnt[i] < (res + 1) / 2) {
          if (cnt[i] == mi) {
            arv.push_back(i);
          }
          else {
            arv.clear();
            arv.push_back(i);
          }
          mi = cnt[i];
        }
      }
      if (arv.empty()) break;
      int arg = arv[Rand() % arv.size()];
      rep(i, n)
      {
        if (i == arg) continue;
        if (f[i] && b[i][arg]) {
          cnt[i]--;
        }
      }
      res--;
      f[arg] = 0;
    }
    int res2 = res;
    if (res2 <= hyperMaxRound) {
      res2 = 0;
      rep(i, n) f[i] = 0;
    }
    rep(i, n)
    {
      if (f[i]) ff[i] = 2;
    }

    rep(i, n) f[i] = ff[i];

    rep(i, n) { fff[_][i] = f[i]; }
    mp[P(res1, res2)]++;
    kp[_] = P(res1, res2);
  }

  int ma = 0;
  P maxP;
  for (auto elem : mp) {
    if (elem.second > ma) {
      ma = elem.second;
      maxP = elem.first;
    }
  }

  int f[100] = {};
  int res1, res2;
  res1 = maxP.first;
  res2 = maxP.second;
  rep(i, 10)
  {
    if (maxP == kp[i]) {
      rep(j, 100) { f[j] = fff[i][j]; }
    }
  }

  int score = 0;
  rep(i, n)
  {
    srep(j, i + 1, n)
    {
      if (f[i] == 0 && f[j] == 0) {
        score += 1 - b[i][j];
      }
      else {
        if ((f[i] == f[j]) == (b[i][j])) {
          score++;
        }
      }
    }
  }

  bitset<100> bif[3] = {}, bib[100] = {};
  rep(i, n)
  {
    if (f[i] > 0) {
      bif[f[i]][i] = 1;
    }
  }

  rep(i, n)
  {
    rep(j, n) { bib[i][j] = b[i][j]; }
  }

  bitset<100> bione(0);
  rep(i, n) { bione[i] = 1; }

  int flipLoop = 1000;
  if (MODE == 0) flipLoop = 10000;
  rep(_, flipLoop)
  {
    int x = Rand() % n;
    int ra = Rand() % 3;
    while (ra == f[x]) {
      ra = Rand() % 3;
    }
    if (res2 == 0) {
      ra = 1 - f[x];
    }
    int tmp = score;
    int keep = f[x];

    // tmpからxの点を引く
    if (f[x] == 0) {
      tmp -= n - bib[x].count();
      tmp++;  // 自分の分
    }
    else {
      tmp -= (bif[f[x]] & bib[x]).count();
      tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    bif[f[x]][x] = 0;
    f[x] = ra;
    bif[f[x]][x] = 1;
    // tmpからraの点を足す
    if (f[x] == 0) {
      tmp += n - bib[x].count();
      tmp--;  // 自分の分
    }
    else {
      tmp += (bif[f[x]] & bib[x]).count();
      tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    if (tmp >= score) {
      score = tmp;
    }
    else {
      bif[f[x]][x] = 0;
      f[x] = keep;
      bif[f[x]][x] = 1;
    }
  }
  res1 = 0;
  res2 = 0;
  rep(i, n)
  {
    if (f[i] == 1) res1++;
    if (f[i] == 2) res2++;
  }

  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numPairArr[i][0];
    int num2 = numPairArr[i][1];
    if (abs(num1 - res1) + abs(num2 - res2) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2);
      argRes = i;
    }
  }

  return argRes;
}

int Solver10()
{
  map<P, int> mp;
  int fff[31][100];
  P kp[31];

  int kcnt[100] = {};
  rep(i, n)
  {
    rep(j, n) { kcnt[i] += b[i][j]; }
  }

  rep(_, 31)
  {
    int cnt[100] = {};
    int f[100] = {};
    int ff[100] = {};
    int res = n;

    rep(i, n)
    {
      cnt[i] = kcnt[i];
      f[i] = 1;
    }

    while (res > 1) {
      int mi = 1000;
      vector<int> arv;
      rep(i, n)
      {
        if (f[i] && cnt[i] <= mi && cnt[i] < (res + 1) / 2) {
          if (cnt[i] == mi) {
            arv.push_back(i);
          }
          else {
            arv.clear();
            arv.push_back(i);
          }
          mi = cnt[i];
        }
      }
      if (arv.empty()) break;
      int arg = arv[Rand() % arv.size()];
      rep(i, n)
      {
        if (i == arg) continue;
        if (f[i] && b[i][arg]) {
          cnt[i]--;
        }
      }
      res--;
      f[arg] = 0;
    }

    int res1 = res;
    res = n - res;
    rep(i, n) { f[i] = 1 - f[i]; }
    rep(i, n)
    {
      if (f[i] == 0) ff[i] = 1;
    }
    rep(i, n) { cnt[i] = 0; }
    rep(i, n)
    {
      rep(j, n)
      {
        if (f[i] && f[j]) cnt[i] += b[i][j];
      }
    }
    while (res > 1) {
      int mi = 1000;
      vector<int> arv;
      rep(i, n)
      {
        if (f[i] && cnt[i] <= mi && cnt[i] < (res + 1) / 2) {
          if (cnt[i] == mi) {
            arv.push_back(i);
          }
          else {
            arv.clear();
            arv.push_back(i);
          }
          mi = cnt[i];
        }
      }
      if (arv.empty()) break;
      int arg = arv[Rand() % arv.size()];
      rep(i, n)
      {
        if (i == arg) continue;
        if (f[i] && b[i][arg]) {
          cnt[i]--;
        }
      }
      res--;
      f[arg] = 0;
    }
    int res2 = res;
    if (res2 <= hyperMaxRound) {
      res2 = 0;
      rep(i, n) f[i] = 0;
    }
    rep(i, n)
    {
      if (f[i]) ff[i] = 2;
    }

    rep(i, n) f[i] = ff[i];

    rep(i, n) { fff[_][i] = f[i]; }
    mp[P(res1, res2)]++;
    kp[_] = P(res1, res2);
  }

  int ma = 0;
  P maxP;
  for (auto elem : mp) {
    if (elem.second > ma) {
      ma = elem.second;
      maxP = elem.first;
    }
  }

  int f[100] = {};
  int res1, res2;
  res1 = maxP.first;
  res2 = maxP.second;
  rep(i, 10)
  {
    if (maxP == kp[i]) {
      rep(j, 100) { f[j] = fff[i][j]; }
    }
  }

  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numPairArr[i][0];
    int num2 = numPairArr[i][1];
    if (abs(num1 - res1) + abs(num2 - res2) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2);
      argRes = i;
    }
  }

  return argRes;
}

int Solver11()
{
  int f[110] = {};

  // コア1を作る
  vector<int> cores1;
  vector<int> kouho;
  rep(i, n) kouho.push_back(i);
  if (kouho.size() < 4) return 0;
  rep(loop1, 5000)
  {
    int core[4] = {};
    rep(i, 4)
    {
      while (true) {
        core[i] = kouho[Rand() % kouho.size()];
        rep(j, i)
        {
          if (core[j] == core[i]) core[i] = -1;
        }
        if (core[i] != -1) break;
      }
    }
    int mitu = 1;
    rep(i, 4)
    {
      srep(j, i + 1, 4)
      {
        if (!b[core[i]][core[j]]) mitu = 0;
      }
    }
    if (mitu) {
      rep(i, 4)
      {
        f[core[i]] = 1;
        cores1.push_back(core[i]);
      }
      break;
    }
  }
  if (cores1.size() == 0) return 0;

  // コア1を大きくしていく
  while (true) {
    int sz = cores1.size();
    int arg = -1;
    int ma = -1;
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, sz)
      {
        if (b[i][cores1[j]]) cnt++;
      }
      if (ma < cnt && cnt >= (sz + 2) / 2) {
        ma = cnt;
        arg = i;
      }
    }
    if (arg == -1) break;
    f[arg] = 1;
    cores1.push_back(arg);
  }

  // コア2を作る
  vector<int> cores2;
  kouho.clear();
  rep(i, n)
  {
    if (f[i] != 0) continue;
    int cnt = 0;
    rep(j, n)
    {
      if (f[j] == 0) cnt += b[i][j];
    }

    if (cnt <= 4) continue;
    kouho.push_back(i);
  }
  if (kouho.size() >= 4) {
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 2;
          cores2.push_back(core[i]);
        }
        break;
      }
    }
    if (cores2.size() > 0) {
      // コア2を大きくしていく
      while (true) {
        int sz = cores2.size();
        int arg = -1;
        int ma = -1;
        rep(i, n)
        {
          if (f[i] != 0) continue;
          int cnt = 0;
          rep(j, sz)
          {
            if (b[i][cores2[j]]) cnt++;
          }
          if (ma < cnt && cnt >= (sz + 2) / 2) {
            ma = cnt;
            arg = i;
          }
        }
        if (arg == -1) break;
        f[arg] = 2;
        cores2.push_back(arg);
      }
    }
  }

  int res1 = cores1.size();
  int res2 = cores2.size();

  int score = 0;
  rep(i, n)
  {
    srep(j, i + 1, n)
    {
      if (f[i] == 0 && f[j] == 0) {
        score += 1 - b[i][j];
      }
      else {
        if ((f[i] == f[j]) == (b[i][j])) {
          score++;
        }
      }
    }
  }

  bitset<100> bif[3] = {}, bib[100] = {};
  rep(i, n)
  {
    if (f[i] > 0) {
      bif[f[i]][i] = 1;
    }
  }

  rep(i, n)
  {
    rep(j, n) { bib[i][j] = b[i][j]; }
  }

  bitset<100> bione(0);
  rep(i, n) { bione[i] = 1; }

  int flipLoop = 1000;
  if (MODE == 0) flipLoop = 10000;
  rep(_, flipLoop)
  {
    int x = Rand() % n;
    int ra = Rand() % 3;
    while (ra == f[x]) {
      ra = Rand() % 3;
    }
    if (res2 == 0) {
      ra = 1 - f[x];
    }
    int tmp = score;
    int keep = f[x];

    // tmpからxの点を引く
    if (f[x] == 0) {
      tmp -= n - bib[x].count();
      tmp++;  // 自分の分
    }
    else {
      tmp -= (bif[f[x]] & bib[x]).count();
      tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    bif[f[x]][x] = 0;
    f[x] = ra;
    bif[f[x]][x] = 1;
    // tmpからraの点を足す
    if (f[x] == 0) {
      tmp += n - bib[x].count();
      tmp--;  // 自分の分
    }
    else {
      tmp += (bif[f[x]] & bib[x]).count();
      tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    if (tmp >= score) {
      score = tmp;
    }
    else {
      bif[f[x]][x] = 0;
      f[x] = keep;
      bif[f[x]][x] = 1;
    }
  }
  res1 = 0;
  res2 = 0;
  rep(i, n)
  {
    if (f[i] == 1) res1++;
    if (f[i] == 2) res2++;
  }
  if (res2 > res1) swap(res1, res2);
  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numPairArr[i][0];
    int num2 = numPairArr[i][1];
    if (abs(num1 - res1) + abs(num2 - res2) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2);
      argRes = i;
    }
  }

  // if (argRes != judgeNum) {
  //   rep(i, n) cout << f[i];
  //   cout << endl;
  //   rep(i, n) {
  //     if (i < numPairArr[judgeNum][0])
  //       cout << 1;
  //     else if (numPairArr[judgeNum][0] <= i &&
  //              i <= numPairArr[judgeNum][0] + numPairArr[judgeNum][1])
  //       cout << 2;
  //     else
  //       cout << 0;
  //   }
  //   cout << "   " << diff << endl;
  // }

  return argRes;
}

int Solver12()
{
  int f[110] = {};

  // コア1を作る
  vector<int> cores1;
  vector<int> kouho;
  rep(i, n) kouho.push_back(i);
  if (kouho.size() < 4) return 0;
  rep(loop1, 5000)
  {
    int core[4] = {};
    rep(i, 4)
    {
      while (true) {
        core[i] = kouho[Rand() % kouho.size()];
        rep(j, i)
        {
          if (core[j] == core[i]) core[i] = -1;
        }
        if (core[i] != -1) break;
      }
    }
    int mitu = 1;
    rep(i, 4)
    {
      srep(j, i + 1, 4)
      {
        if (!b[core[i]][core[j]]) mitu = 0;
      }
    }
    if (mitu) {
      rep(i, 4)
      {
        f[core[i]] = 1;
        cores1.push_back(core[i]);
      }
      break;
    }
  }
  if (cores1.size() == 0) return 0;

  // コア1を大きくしていく
  while (true) {
    int sz = cores1.size();
    int arg = -1;
    int ma = -1;
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, sz)
      {
        if (b[i][cores1[j]]) cnt++;
      }
      if (ma < cnt && cnt >= (sz + 2) / 2) {
        ma = cnt;
        arg = i;
      }
    }
    if (arg == -1) break;
    f[arg] = 1;
    cores1.push_back(arg);
  }

  // コア2を作る
  vector<int> cores2;
  kouho.clear();
  rep(i, n)
  {
    if (f[i] != 0) continue;
    int cnt = 0;
    rep(j, n)
    {
      if (f[j] == 0) cnt += b[i][j];
    }

    if (cnt <= 4) continue;
    kouho.push_back(i);
  }
  if (kouho.size() >= 4) {
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 2;
          cores2.push_back(core[i]);
        }
        break;
      }
    }
    if (cores2.size() > 0) {
      // コア2を大きくしていく
      while (true) {
        int sz = cores2.size();
        int arg = -1;
        int ma = -1;
        rep(i, n)
        {
          if (f[i] != 0) continue;
          int cnt = 0;
          rep(j, sz)
          {
            if (b[i][cores2[j]]) cnt++;
          }
          if (ma < cnt && cnt >= (sz + 2) / 2) {
            ma = cnt;
            arg = i;
          }
        }
        if (arg == -1) break;
        f[arg] = 2;
        cores2.push_back(arg);
      }
    }
  }

  // コア3を作る
  vector<int> cores3;
  if (cores2.size() > 0) {
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 3;
            cores3.push_back(core[i]);
          }
          break;
        }
      }
      if (cores3.size() > 0) {
        // コア3を大きくしていく
        while (true) {
          int sz = cores3.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores3[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 3;
          cores3.push_back(arg);
        }
      }
    }
  }

  int res1 = cores1.size();
  int res2 = cores2.size();
  int res3 = cores3.size();

  int score = 0;
  rep(i, n)
  {
    srep(j, i + 1, n)
    {
      if (f[i] == 0 && f[j] == 0) {
        score += 1 - b[i][j];
      }
      else {
        if ((f[i] == f[j]) == (b[i][j])) {
          score++;
        }
      }
    }
  }

  bitset<100> bif[4] = {}, bib[100] = {};
  rep(i, n)
  {
    if (f[i] > 0) {
      bif[f[i]][i] = 1;
    }
  }

  rep(i, n)
  {
    rep(j, n) { bib[i][j] = b[i][j]; }
  }

  bitset<100> bione(0);
  rep(i, n) { bione[i] = 1; }

  int flipLoop = 1000;
  if (MODE == 0) flipLoop = 10000;
  rep(_, flipLoop)
  {
    int x = Rand() % n;
    int ra = Rand() % 4;
    while (ra == f[x]) {
      ra = Rand() % 4;
    }
    if (res2 == 0) {
      ra = 1 - f[x];
    }
    else if (res3 == 0) {
      ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
    }
    int tmp = score;
    int keep = f[x];

    // tmpからxの点を引く
    if (f[x] == 0) {
      tmp -= n - bib[x].count();
      tmp++;  // 自分の分
    }
    else {
      tmp -= (bif[f[x]] & bib[x]).count();
      tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    bif[f[x]][x] = 0;
    f[x] = ra;
    bif[f[x]][x] = 1;
    // tmpからraの点を足す
    if (f[x] == 0) {
      tmp += n - bib[x].count();
      tmp--;  // 自分の分
    }
    else {
      tmp += (bif[f[x]] & bib[x]).count();
      tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    if (tmp >= score) {
      score = tmp;
    }
    else {
      bif[f[x]][x] = 0;
      f[x] = keep;
      bif[f[x]][x] = 1;
    }
  }
  res1 = 0;
  res2 = 0;
  res3 = 0;
  rep(i, n)
  {
    if (f[i] == 1) res1++;
    if (f[i] == 2) res2++;
    if (f[i] == 3) res3++;
  }
  vector<int> resv;
  // cout << res1 << ' ' << res2 << ' ' << res3 << endl;
  resv.push_back(res1);
  resv.push_back(res2);
  resv.push_back(res3);
  sort(resv.begin(), resv.end());
  res1 = resv[2];
  res2 = resv[1];
  res3 = resv[0];
  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numThreeArr[i][0];
    int num2 = numThreeArr[i][1];
    int num3 = numThreeArr[i][2];
    if (abs(num1 - res1) + abs(num2 - res2) + abs(num3 - res3) < diff) {
      diff = abs(num1 - res1) + abs(num2 - res2) + abs(num3 - res3);
      argRes = i;
    }
  }

  // if (argRes != judgeNum) {
  //   rep(i, n) cout << f[i];
  //   cout << "   " << diff << endl;
  //   cout << endl;
  // }

  return argRes;
}

// 4コア
int Solver13()
{
  int f[110] = {};

  // コア1を作る
  vector<int> cores1;
  vector<int> kouho;
  rep(i, n) kouho.push_back(i);
  if (kouho.size() < 4) return 0;
  rep(loop1, 5000)
  {
    int core[4] = {};
    rep(i, 4)
    {
      while (true) {
        core[i] = kouho[Rand() % kouho.size()];
        rep(j, i)
        {
          if (core[j] == core[i]) core[i] = -1;
        }
        if (core[i] != -1) break;
      }
    }
    int mitu = 1;
    rep(i, 4)
    {
      srep(j, i + 1, 4)
      {
        if (!b[core[i]][core[j]]) mitu = 0;
      }
    }
    if (mitu) {
      rep(i, 4)
      {
        f[core[i]] = 1;
        cores1.push_back(core[i]);
      }
      break;
    }
  }
  if (cores1.size() == 0) return 0;

  // コア1を大きくしていく
  while (true) {
    int sz = cores1.size();
    int arg = -1;
    int ma = -1;
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, sz)
      {
        if (b[i][cores1[j]]) cnt++;
      }
      if (ma < cnt && cnt >= (sz + 2) / 2) {
        ma = cnt;
        arg = i;
      }
    }
    if (arg == -1) break;
    f[arg] = 1;
    cores1.push_back(arg);
  }

  // コア2を作る
  vector<int> cores2;
  kouho.clear();
  rep(i, n)
  {
    if (f[i] != 0) continue;
    int cnt = 0;
    rep(j, n)
    {
      if (f[j] == 0) cnt += b[i][j];
    }

    if (cnt <= 4) continue;
    kouho.push_back(i);
  }
  if (kouho.size() >= 4) {
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 2;
          cores2.push_back(core[i]);
        }
        break;
      }
    }
    if (cores2.size() > 0) {
      // コア2を大きくしていく
      while (true) {
        int sz = cores2.size();
        int arg = -1;
        int ma = -1;
        rep(i, n)
        {
          if (f[i] != 0) continue;
          int cnt = 0;
          rep(j, sz)
          {
            if (b[i][cores2[j]]) cnt++;
          }
          if (ma < cnt && cnt >= (sz + 2) / 2) {
            ma = cnt;
            arg = i;
          }
        }
        if (arg == -1) break;
        f[arg] = 2;
        cores2.push_back(arg);
      }
    }
  }

  // コア3を作る
  vector<int> cores3;
  if (cores2.size() > 0) {
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 3;
            cores3.push_back(core[i]);
          }
          break;
        }
      }
      if (cores3.size() > 0) {
        // コア3を大きくしていく
        while (true) {
          int sz = cores3.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores3[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 3;
          cores3.push_back(arg);
        }
      }
    }
  }

  // コア4を作る
  vector<int> cores4;
  if (cores3.size() > 0) {
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 4;
            cores4.push_back(core[i]);
          }
          break;
        }
      }
      if (cores4.size() > 0) {
        // コア4を大きくしていく
        while (true) {
          int sz = cores4.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores4[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 4;
          cores4.push_back(arg);
        }
      }
    }
  }

  int res1 = cores1.size();
  int res2 = cores2.size();
  int res3 = cores3.size();
  int res4 = cores4.size();

  int score = 0;
  rep(i, n)
  {
    srep(j, i + 1, n)
    {
      if (f[i] == 0 && f[j] == 0) {
        score += 1 - b[i][j];
      }
      else {
        if ((f[i] == f[j]) == (b[i][j])) {
          score++;
        }
      }
    }
  }

  bitset<100> bif[5] = {}, bib[100] = {};
  rep(i, n)
  {
    if (f[i] > 0) {
      bif[f[i]][i] = 1;
    }
  }

  rep(i, n)
  {
    rep(j, n) { bib[i][j] = b[i][j]; }
  }

  bitset<100> bione(0);
  rep(i, n) { bione[i] = 1; }

  int flipLoop = 1000;
  if (MODE == 0) flipLoop = 10000;
  rep(_, flipLoop)
  {
    int x = Rand() % n;
    int ra = Rand() % 5;
    while (ra == f[x]) {
      ra = Rand() % 5;
    }
    if (res2 == 0) {
      ra = 1 - f[x];
    }
    else if (res3 == 0) {
      ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
    }
    else if (res4 == 0) {
      ra = Rand() % 4;
      while (ra == f[x]) {
        ra = Rand() % 4;
      }
    }
    int tmp = score;
    int keep = f[x];

    // tmpからxの点を引く
    if (f[x] == 0) {
      tmp -= n - bib[x].count();
      tmp++;  // 自分の分
    }
    else {
      tmp -= (bif[f[x]] & bib[x]).count();
      tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    bif[f[x]][x] = 0;
    f[x] = ra;
    bif[f[x]][x] = 1;
    // tmpからraの点を足す
    if (f[x] == 0) {
      tmp += n - bib[x].count();
      tmp--;  // 自分の分
    }
    else {
      tmp += (bif[f[x]] & bib[x]).count();
      tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
    }

    if (tmp >= score) {
      score = tmp;
    }
    else {
      bif[f[x]][x] = 0;
      f[x] = keep;
      bif[f[x]][x] = 1;
    }
  }
  res1 = 0;
  res2 = 0;
  res3 = 0;
  res4 = 0;
  rep(i, n)
  {
    if (f[i] == 1) res1++;
    if (f[i] == 2) res2++;
    if (f[i] == 3) res3++;
    if (f[i] == 4) res4++;
  }
  vector<int> resv;
  // cout << res1 << ' ' << res2 << ' ' << res3 << endl;
  resv.push_back(res1);
  resv.push_back(res2);
  resv.push_back(res3);
  resv.push_back(res4);
  sort(resv.begin(), resv.end());
  res1 = resv[3];
  res2 = resv[2];
  res3 = resv[1];
  res4 = resv[0];
  int diff = 1000;
  int argRes = 0;
  rep(i, m)
  {
    int num1 = numFourArr[i][0];
    int num2 = numFourArr[i][1];
    int num3 = numFourArr[i][2];
    int num4 = numFourArr[i][3];
    if (abs(num1 - res1) + abs(num2 - res2) + abs(num3 - res3) +
      abs(num4 - res4) <
      diff) {
      diff = abs(num1 - res1) + abs(num2 - res2) + abs(num3 - res3) +
        abs(num4 - res4);
      argRes = i;
    }
  }

  return argRes;
}

int Solver14()
{
  int real_argRes = 0;
  int real_minDiff = 1000;

  rep(wataruoop, 15)
  {
    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;
    ;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    if (diff < real_minDiff) {
      real_minDiff = diff;
      real_argRes = argRes;
      if (real_minDiff == 0) break;
    }
  }

  return real_argRes;
}

int Solver15()
{
  map<int, int> argMap;

  rep(wataruoop, 5)
  {
    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;
    ;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    argMap[argRes]++;

    // if (argRes != judgeNum) {
    //   rep(i, n) cout << f[i];
    //   cout << endl;
    //   rep(i, n) {
    //     if (i < numPairArr[judgeNum][0])
    //       cout << 1;
    //     else if (numPairArr[judgeNum][0] <= i &&
    //              i <= numPairArr[judgeNum][0] + numPairArr[judgeNum][1])
    //       cout << 2;
    //     else
    //       cout << 0;
    //   }
    //   cout << "   " << diff << endl;
    // }
  }

  int maxCnt = 0;
  int real_argRes = 0;
  for (auto p : argMap) {
    if (p.second > maxCnt) {
      maxCnt = p.second;
      real_argRes = p.first;
    }
  }

  return real_argRes;
}

// 11表裏
int Solver16()
{
  int real_argRes = 0;
  int real_score = 0;
  int keepB[100][100];
  rep(i, n)
  {
    rep(j, n)
    {
      keepB[i][j] = b[i][j];
    }
  }
  rep(tei, 2)
  {

    rep(i, n)
    {
      rep(j, n)
      {
        b[i][j] = keepB[i][j];
      }
    }
    if (tei % 2 == 1) {
      rep(i, n)
      {
        rep(j, n)
        {
          if (i == j) continue;
          b[i][j] = 1 - b[i][j];
        }
      }
    }


    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      if (omoteArr[i] != tei % 2) continue;
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    // スコア計算
    int tmpScore = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == f[j] && f[i] != 0) {
          if (b[i][j]) tmpScore++;
        }
        else {
          if (!b[i][j]) tmpScore++;
        }
      }
    }
    if (tmpScore > real_score) {
      real_score = tmpScore;
      real_argRes = argRes;
    }
  }

  return real_argRes;
}

// 11表裏5セット
int Solver17()
{
  int real_argRes = 0;
  int real_score = 0;
  int keepB[100][100];
  rep(i, n)
  {
    rep(j, n)
    {
      keepB[i][j] = b[i][j];
    }
  }
  rep(tei, 10)
  {

    rep(i, n)
    {
      rep(j, n)
      {
        b[i][j] = keepB[i][j];
      }
    }
    if (tei % 2 == 1) {
      rep(i, n)
      {
        rep(j, n)
        {
          if (i == j) continue;
          b[i][j] = 1 - b[i][j];
        }
      }
    }


    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      if (omoteArr[i] != tei % 2) continue;
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    // スコア計算
    int tmpScore = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == f[j] && f[i] != 0) {
          if (b[i][j]) tmpScore++;
        }
        else {
          if (!b[i][j]) tmpScore++;
        }
      }
    }
    if (tmpScore > real_score) {
      real_score = tmpScore;
      real_argRes = argRes;
    }
  }

  return real_argRes;
}

// 0.0用
int Solver18()
{
  int visit[110] = {};
  int bb[110][110];
  rep(i, n)
  {
    rep(j, n)
    {
      bb[i][j] = b[i][j];
    }
  }

  vector<P> vp;
  rep(i, n)
  {
    if (visit[i]) {
      continue;
    }
    visit[i] = 1;
    int cnt1 = 1;
    int cnt2 = 0;
    queue<int> que;
    que.push(i);
    while (que.size()) {
      int x = que.front();
      que.pop();
      rep(j, n)
      {
        if (bb[x][j]) {
          cnt2++;
          bb[x][j] = 0;
          if (!visit[j]) {
            cnt1++;
            visit[j] = 1;
            que.push(j);
          }
        }
      }
    }
    cnt2 /= 2;
    if (cnt1 == 1) { continue; }
    vp.push_back(P(cnt1, cnt2));
  }
  sort(vp.begin(), vp.end());
  int argRes = 0;
  rep(i, m)
  {
    if (zeroPairs[i] == vp) {
      argRes = i;
      break;
    }
  }
  return argRes;
}

// 14表裏
int Solver19()
{
  int real_argRes[2] = {};
  int real_minDiff[2] = { 1000,1000 };
  int keepB[100][100];
  rep(i, n)
  {
    rep(j, n)
    {
      keepB[i][j] = b[i][j];
    }
  }


  rep(wataruoop, 10)
  {
    rep(i, n)
    {
      rep(j, n)
      {
        b[i][j] = keepB[i][j];
      }
    }
    if (wataruoop % 2 == 1) {
      rep(i, n)
      {
        rep(j, n)
        {
          if (i == j) continue;
          b[i][j] = 1 - b[i][j];
        }
      }
    }

    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;
    ;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 4) {
      rep(loop1, 5000)
      {
        int core[4] = {};
        rep(i, 4)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 4)
        {
          srep(j, i + 1, 4)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 4)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      if (omoteArr[i] != wataruoop % 2) continue;
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    if (diff < real_minDiff[wataruoop % 2]) {
      real_minDiff[wataruoop % 2] = diff;
      real_argRes[wataruoop % 2] = argRes;
    }
  }

  int real_real_argRes = real_argRes[0];
  if (real_minDiff[1] < real_minDiff[0]) {
    real_real_argRes = real_argRes[1];
  }
  return real_real_argRes;
}

// 21表裏5セット
int Solver20()
{
  int real_argRes = 0;
  int real_score = 0;
  int keepB[100][100];
  rep(i, n)
  {
    rep(j, n)
    {
      keepB[i][j] = b[i][j];
    }
  }
  rep(tei, 2)
  {

    rep(i, n)
    {
      rep(j, n)
      {
        b[i][j] = keepB[i][j];
      }
    }
    if (tei % 2 == 1) {
      rep(i, n)
      {
        rep(j, n)
        {
          if (i == j) continue;
          b[i][j] = 1 - b[i][j];
        }
      }
    }


    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 4)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 4)
      {
        srep(j, i + 1, 4)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 4)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    int res1 = cores1.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 2;
      while (ra == f[x]) {
        ra = Rand() % 2;
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
    }
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      if (omoteArr[i] != tei % 2) continue;
      int num1 = numSingleArr[i];
      if (abs(num1 - res1) < diff) {
        diff = abs(num1 - res1);
        argRes = i;
      }
    }

    // スコア計算
    int tmpScore = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == f[j] && f[i] != 0) {
          if (b[i][j]) tmpScore++;
        }
        else {
          if (!b[i][j]) tmpScore++;
        }
      }
    }
    if (tmpScore > real_score) {
      real_score = tmpScore;
      real_argRes = argRes;
    }
  }

  return real_argRes;
}

// 14亜種
int Solver21()
{
  int real_argRes = 0;
  int real_minDiff = 1000;

  rep(wataruoop, 15)
  {
    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 4) continue;
    ;
    rep(loop1, 5000)
    {
      int core[5] = {};
      rep(i, 5)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 5)
      {
        srep(j, i + 1, 5)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 5)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 5) {
      rep(loop1, 5000)
      {
        int core[5] = {};
        rep(i, 5)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 5)
        {
          srep(j, i + 1, 5)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 5)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    if (diff < real_minDiff) {
      real_minDiff = diff;
      real_argRes = argRes;
      if (real_minDiff == 0) break;
    }
  }

  return real_argRes;
}

// 14亜種
int Solver22()
{
  int real_argRes = 0;
  int real_minDiff = 1000;

  rep(wataruoop, 15)
  {
    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 3) continue;
    ;
    rep(loop1, 5000)
    {
      int core[5] = {};
      rep(i, 3)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 3)
      {
        srep(j, i + 1, 3)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 3)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 2) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 3) {
      rep(loop1, 5000)
      {
        int core[5] = {};
        rep(i, 3)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 3)
        {
          srep(j, i + 1, 3)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 3)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    if (diff < real_minDiff) {
      real_minDiff = diff;
      real_argRes = argRes;
      if (real_minDiff == 0) break;
    }
  }

  return real_argRes;
}

// 16亜種
int Solver23()
{
  int real_argRes = 0;
  int real_score = 0;
  int keepB[100][100];
  rep(i, n)
  {
    rep(j, n)
    {
      keepB[i][j] = b[i][j];
    }
  }
  rep(tei, 2)
  {

    rep(i, n)
    {
      rep(j, n)
      {
        b[i][j] = keepB[i][j];
      }
    }
    if (tei % 2 == 1) {
      rep(i, n)
      {
        rep(j, n)
        {
          if (i == j) continue;
          b[i][j] = 1 - b[i][j];
        }
      }
    }


    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 3) continue;;
    rep(loop1, 5000)
    {
      int core[4] = {};
      rep(i, 3)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 3)
      {
        srep(j, i + 1, 3)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 3)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 2) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 3) {
      rep(loop1, 5000)
      {
        int core[3] = {};
        rep(i, 3)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 3)
        {
          srep(j, i + 1, 3)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 3)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      if (omoteArr[i] != tei % 2) continue;
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    // スコア計算
    int tmpScore = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == f[j] && f[i] != 0) {
          if (b[i][j]) tmpScore++;
        }
        else {
          if (!b[i][j]) tmpScore++;
        }
      }
    }
    if (tmpScore > real_score) {
      real_score = tmpScore;
      real_argRes = argRes;
    }
  }

  return real_argRes;
}

// 16亜種
int Solver24()
{
  int real_argRes = 0;
  int real_score = 0;
  int keepB[100][100];
  rep(i, n)
  {
    rep(j, n)
    {
      keepB[i][j] = b[i][j];
    }
  }
  rep(tei, 2)
  {

    rep(i, n)
    {
      rep(j, n)
      {
        b[i][j] = keepB[i][j];
      }
    }
    if (tei % 2 == 1) {
      rep(i, n)
      {
        rep(j, n)
        {
          if (i == j) continue;
          b[i][j] = 1 - b[i][j];
        }
      }
    }


    int f[110] = {};

    // コア1を作る
    vector<int> cores1;
    vector<int> kouho;
    rep(i, n) kouho.push_back(i);
    if (kouho.size() < 5) continue;;
    rep(loop1, 5000)
    {
      int core[5] = {};
      rep(i, 5)
      {
        while (true) {
          core[i] = kouho[Rand() % kouho.size()];
          rep(j, i)
          {
            if (core[j] == core[i]) core[i] = -1;
          }
          if (core[i] != -1) break;
        }
      }
      int mitu = 1;
      rep(i, 5)
      {
        srep(j, i + 1, 5)
        {
          if (!b[core[i]][core[j]]) mitu = 0;
        }
      }
      if (mitu) {
        rep(i, 5)
        {
          f[core[i]] = 1;
          cores1.push_back(core[i]);
        }
        break;
      }
    }
    if (cores1.size() == 0) continue;

    // コア1を大きくしていく
    while (true) {
      int sz = cores1.size();
      int arg = -1;
      int ma = -1;
      rep(i, n)
      {
        if (f[i] != 0) continue;
        int cnt = 0;
        rep(j, sz)
        {
          if (b[i][cores1[j]]) cnt++;
        }
        if (ma < cnt && cnt >= (sz + 2) / 2) {
          ma = cnt;
          arg = i;
        }
      }
      if (arg == -1) break;
      f[arg] = 1;
      cores1.push_back(arg);
    }

    // コア2を作る
    vector<int> cores2;
    kouho.clear();
    rep(i, n)
    {
      if (f[i] != 0) continue;
      int cnt = 0;
      rep(j, n)
      {
        if (f[j] == 0) cnt += b[i][j];
      }

      if (cnt <= 4) continue;
      kouho.push_back(i);
    }
    if (kouho.size() >= 5) {
      rep(loop1, 5000)
      {
        int core[5] = {};
        rep(i, 5)
        {
          while (true) {
            core[i] = kouho[Rand() % kouho.size()];
            rep(j, i)
            {
              if (core[j] == core[i]) core[i] = -1;
            }
            if (core[i] != -1) break;
          }
        }
        int mitu = 1;
        rep(i, 5)
        {
          srep(j, i + 1, 5)
          {
            if (!b[core[i]][core[j]]) mitu = 0;
          }
        }
        if (mitu) {
          rep(i, 5)
          {
            f[core[i]] = 2;
            cores2.push_back(core[i]);
          }
          break;
        }
      }
      if (cores2.size() > 0) {
        // コア2を大きくしていく
        while (true) {
          int sz = cores2.size();
          int arg = -1;
          int ma = -1;
          rep(i, n)
          {
            if (f[i] != 0) continue;
            int cnt = 0;
            rep(j, sz)
            {
              if (b[i][cores2[j]]) cnt++;
            }
            if (ma < cnt && cnt >= (sz + 2) / 2) {
              ma = cnt;
              arg = i;
            }
          }
          if (arg == -1) break;
          f[arg] = 2;
          cores2.push_back(arg);
        }
      }
    }

    int res1 = cores1.size();
    int res2 = cores2.size();

    int score = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == 0 && f[j] == 0) {
          score += 1 - b[i][j];
        }
        else {
          if ((f[i] == f[j]) == (b[i][j])) {
            score++;
          }
        }
      }
    }

    bitset<100> bif[3] = {}, bib[100] = {};
    rep(i, n)
    {
      if (f[i] > 0) {
        bif[f[i]][i] = 1;
      }
    }

    rep(i, n)
    {
      rep(j, n) { bib[i][j] = b[i][j]; }
    }

    bitset<100> bione(0);
    rep(i, n) { bione[i] = 1; }

    int flipLoop = 1000;
    if (MODE == 0) flipLoop = 10000;
    rep(_, flipLoop)
    {
      int x = Rand() % n;
      int ra = Rand() % 3;
      while (ra == f[x]) {
        ra = Rand() % 3;
      }
      if (res2 == 0) {
        ra = 1 - f[x];
      }
      int tmp = score;
      int keep = f[x];

      // tmpからxの点を引く
      if (f[x] == 0) {
        tmp -= n - bib[x].count();
        tmp++;  // 自分の分
      }
      else {
        tmp -= (bif[f[x]] & bib[x]).count();
        tmp -= ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      bif[f[x]][x] = 0;
      f[x] = ra;
      bif[f[x]][x] = 1;
      // tmpからraの点を足す
      if (f[x] == 0) {
        tmp += n - bib[x].count();
        tmp--;  // 自分の分
      }
      else {
        tmp += (bif[f[x]] & bib[x]).count();
        tmp += ((bif[f[x]] ^ bione) & (bib[x] ^ bione)).count();
      }

      if (tmp >= score) {
        score = tmp;
      }
      else {
        bif[f[x]][x] = 0;
        f[x] = keep;
        bif[f[x]][x] = 1;
      }
    }
    res1 = 0;
    res2 = 0;
    rep(i, n)
    {
      if (f[i] == 1) res1++;
      if (f[i] == 2) res2++;
    }
    if (res2 > res1) swap(res1, res2);
    int diff = 1000;
    int argRes = 0;
    rep(i, m)
    {
      if (omoteArr[i] != tei % 2) continue;
      int num1 = numPairArr[i][0];
      int num2 = numPairArr[i][1];
      if (abs(num1 - res1) + abs(num2 - res2) < diff) {
        diff = abs(num1 - res1) + abs(num2 - res2);
        argRes = i;
      }
    }

    // スコア計算
    int tmpScore = 0;
    rep(i, n)
    {
      srep(j, i + 1, n)
      {
        if (f[i] == f[j] && f[i] != 0) {
          if (b[i][j]) tmpScore++;
        }
        else {
          if (!b[i][j]) tmpScore++;
        }
      }
    }
    if (tmpScore > real_score) {
      real_score = tmpScore;
      real_argRes = argRes;
    }
  }

  return real_argRes;
}

int ComputeAnswer(int mode, int turn = 0)
{
  int res = 0;
  int num = num = hyperSolverNum % 10 + hyperSolverNum / 1000 * 10;

  if (num == 1) {
    res = Solver1();
  }
  else if (num == 2) {
    res = Solver2();
  }
  else if (num == 3) {
    res = Solver3();
  }
  else if (num == 4) {
    res = Solver4();
  }
  else if (num == 5) {
    res = Solver5();
  }
  else if (num == 6) {
    res = Solver6();
  }
  else if (num == 7) {
    res = Solver7();
  }
  else if (num == 8) {
    res = Solver8();
  }
  else if (num == 9) {
    res = Solver9();
  }
  else if (num == 10) {
    res = Solver10();
  }
  else if (num == 11) {
    res = Solver11();
  }
  else if (num == 12) {
    res = Solver12();
  }
  else if (num == 13) {
    res = Solver13();
  }
  else if (num == 14) {
    res = Solver14();
  }
  else if (num == 15) {
    res = Solver15();
  }
  else if (num == 16) {
    res = Solver16();
  }
  else if (num == 17) {
    res = Solver17();
  }
  else if (num == 18) {
    res = Solver18();
  }
  else if (num == 19) {
    res = Solver19();
  }
  else if (num == 20) {
    res = Solver20();
  }
  else if (num == 21) {
    res = Solver21();
  }
  else if (num == 22) {
    res = Solver22();
  }
  else if (num == 23) {
    res = Solver23();
  }
  else if (num == 24) {
    res = Solver24();
  }

  return res;
}

double Simulate(int mode)
{
  double res = 1e9 / n;
  rep(turn, 100)
  {
    InitB(mode, turn);
    int ans = ComputeAnswer(mode, turn);
    answersFor1000Out[turn] = ans;
    int judge = judgeArr[turn];
    if (ans != judge) res *= 0.9;

    if (mode == 0) {
      cout << ans << endl;
      fflush(stdout);
    }
  }
  return res;
}

void solve(int mode)
{
  clock_t startTime, endTime;
  startTime = clock();
  endTime = clock();

  // 提出用
  if (mode == 0) {
    Input(mode);

    n = hyperN[m][iEps];
    hyperSolverNum = hyperSolver[m][iEps];
    hyperMinDiff = hyperMinDiffArr[m][iEps];
    hyperMaxRound = hyperMaxRoundArr[m][iEps];
    hyperStep1 = hyperStep1Arr[m][iEps];
    hyperStep2 = hyperStep2Arr[m][iEps];

    InitNumArray(mode);

    OutputArrayAsString(mode);

    Simulate(mode);
  }

  // ハイパラ調整
  if (mode == 100) {
    int loop = 0;
    struct winner
    {
      int winM = -1;
      int winEps = -1;
      int winLife = 0;
    };
    stack<winner> winners;
    ofstream changeOfs("changelog.txt");
    while (true) {
      loop++;
      if (loop % 10 == 1) {
        endTime = clock();
        double nowTime = ((double)endTime - startTime) / CLOCKS_PER_SEC;
        if (nowTime > 360000.0) break;
      }

      if (loop % 200 == 77) {
        OutputHaipara();
        cout << "Updated" << endl;
      }

      if (loop % 2000 == 1833) {
        mode = 1000;
        MODE = 1000;
        // 1000ケース実行
        double sumScore = 0;
        ofstream ofsScore("Score.txt");
        double hi = 0;
        rep(_, 1000)
        {
          if (_ % 100 == 0) {
            // cout << _ << endl;
          }
          if (_ < 100) {
            OpenOfs1000Out(_);
          }

          Input(mode, _);
          n = hyperN[m][iEps];
          hyperSolverNum = hyperSolver[m][iEps];
          hyperMinDiff = hyperMinDiffArr[m][iEps];
          hyperMaxRound = hyperMaxRoundArr[m][iEps];
          hyperStep1 = hyperStep1Arr[m][iEps];
          hyperStep2 = hyperStep2Arr[m][iEps];

          InitNumArray(mode);
          if (!numPairArrOK) continue;

          if (_ < 100) {
            OutputArrayAsString(mode);
          }

          double score = Simulate(mode);
          sumScore += score;

          if (_ < 100) {
            OutputAnsToOfs1000Out();
            CloseOfs1000Out();
          }

          hi += score / hyperMaxScore[m][iEps];
          ofsScore << score / hyperMaxScore[m][iEps] << ' ' << fixed
            << setprecision(6) << score << ' ' << hyperMaxScore[m][iEps]
            << endl;
          // cout << _ << ' ' << score << endl;
          // if (_ < 100)
          //   ofsScore << setw(4) << setfill('0') << _ << " : " << score <<
          //   endl;
        }
        changeOfs << hi << endl;
        changeOfs << "sumScore = " << sumScore << endl;
        ofsScore << "sumScore = " << sumScore << endl;
        ofsScore.close();
        mode = 100;
        MODE = 100;
      }

      Input(mode);
      m = Rand() % 91 + 10;
      iEps = Rand() % 41;
      eps = iEps / 100.0;
      rep(i, 100) judgeArr[i] = Rand() % m;

      int initMode = loop % 2;

      // if (initMode == 99) {
      //   iEps = Rand() % 6 + 35;
      //   m = Rand() % 11 + 90;
      //   eps = iEps / 100.0;
      //   n = hyperN[m][iEps];
      //   hyperSolverNum = hyperSolver[m][iEps];
      //   hyperMinDiff = hyperMinDiffArr[m][iEps];
      //   hyperMaxRound = hyperMaxRoundArr[m][iEps];
      //   hyperStep1 = hyperStep1Arr[m][iEps];
      //   hyperStep2 = hyperStep2Arr[m][iEps];
      //   hyperSolverNum = 148;
      //   n = 4;
      // }
      // initMode = 0;
      if (initMode == 1 || !winners.empty()) {
        // 上下左右の丸コピー
        int nm = m;
        int niEps = iEps;
        while (true) {
          int ra = Rand() % 4;
          nm = m + dx[ra];
          niEps = iEps + dy[ra];
          if (10 <= nm && nm <= 100 && 0 <= niEps && niEps <= 40) break;
        }
        if (!winners.empty()) {
          winners.top().winLife--;
          m = winners.top().winM;
          iEps = winners.top().winEps;
          if (winners.top().winLife == 0) winners.pop();
          nm = m;
          niEps = iEps;
          while (true) {
            int ra = Rand() % 4;
            nm = m + dx[ra];
            niEps = iEps + dy[ra];
            if (10 <= nm && nm <= 100 && 0 <= niEps && niEps <= 40) break;
          }
          swap(m, nm);
          swap(iEps, niEps);
          eps = (double)iEps / 100.0;
        }
        n = hyperN[nm][niEps];
        hyperSolverNum = hyperSolver[nm][niEps];
        hyperMinDiff = hyperMinDiffArr[nm][niEps];
        hyperMaxRound = hyperMaxRoundArr[nm][niEps];
        hyperStep1 = hyperStep1Arr[nm][niEps];
        hyperStep2 = hyperStep2Arr[nm][niEps];

        // 隣を改変
        if (winners.empty() && Rand() % 2 == 0) {
          //vector<int> selection = { 1114, 1134, 1134, 1134, 1152,
          //                         1152, 1135, 1135, 1135 };
          //vector<int> selection = { 1186,1196 ,1187,1197};
          // vector<int> selection = { 1186,1196 ,1187,1197};
          vector<int> selection = { 2183, 2184, 2193,2194,1186,1196 ,1187,1197,1134, 2131, 2132,1134, 2131, 2132 };
          hyperSolverNum = selection[Rand() % selection.size()];

          n = n + Rand() % 5 - 2;
          n = max(n, 4);
          n = min(n, 100);
          hyperStep1 = hyperStep1 + Rand() % 3 - 1;
          hyperStep1 = max(1, hyperStep1);
          hyperStep2 = hyperStep2 + Rand() % 3 - 1;
          hyperStep2 = max(1, hyperStep2);
          if (Rand() % 2 == 0) {
            hyperStep2 = hyperStep1;
          }

          if (Rand() % 2 == 0) {
            hyperMinDiff = hyperMinDiff + Rand() % 3 - 1;
            hyperMinDiff = max(0, hyperMinDiff);
          }
          if (Rand() % 2 == 0) {
            hyperMinDiff = 0;
          }
          hyperMaxRound = hyperMaxRound + Rand() % 3 - 1;
          hyperMaxRound = max(1, hyperMaxRound);
        }
      }
      // ランダム生成
      else {
        n = hyperN[m][iEps];
        hyperSolverNum = hyperSolver[m][iEps];
        hyperMinDiff = hyperMinDiffArr[m][iEps];
        hyperMaxRound = hyperMaxRoundArr[m][iEps];
        hyperStep1 = hyperStep1Arr[m][iEps];
        hyperStep2 = hyperStep2Arr[m][iEps];

        if (false && Rand() % 2 == 0) {
          //vector<int> selection = { 1186,1196 ,1187,1197};
          //vector<int> selection = { 1189,1199 };
          vector<int> selection = { 2183, 2184, 2193,2194,1186,1196 ,1187,1197,1134, 2131, 2132,1134, 2131, 2132 };
          hyperSolverNum = selection[Rand() % selection.size()];
        }
        else {
          // vector<int> selection = {
          //     105,  106,  107,  115,  116,  117,  125,  126,  127,  135,
          //     136,  137,  109,  119,  129,  139,  1100, 1110, 1120, 1130,
          //     1101, 1111, 1121, 1131, 1104, 1114, 1124, 1134, 1152, 1152,
          //     1152, 1152, 1152, 1134, 1134, 1134, 1134};
          //vector<int> selection = { 1114, 1134, 1134, 1134, 1152,
          //                         1152, 1135, 1135, 1135 };
          //vector<int> selection = { 1186,1196 ,1187,1197};
          // vector<int> selection = { 1189,1199 };
          vector<int> selection = { 2183, 2184, 2193,2194,1186,1196 ,1187,1197,1134, 2131, 2132,1134, 2131, 2132 };

          hyperSolverNum = selection[Rand() % selection.size()];

          n = hyperN[m][iEps] + Rand() % 21 - 10;
          if (Rand() % 2 == 0) {
            n = hyperN[m][iEps] - 1;
          }
          n = max(n, 4);
          n = min(n, 100);
          if (Rand() % 2 == 0) {
            hyperStep1 = hyperStep1Arr[m][iEps] + Rand() % 3 - 1;
            hyperStep1 = max(1, hyperStep1);
            hyperStep2 = hyperStep2Arr[m][iEps] + Rand() % 3 - 1;
            hyperStep2 = max(1, hyperStep2);
            if (Rand() % 2 == 0) {
              hyperStep2 = hyperStep1;
            }
          }


          if (Rand() % 2 == 0) {
            hyperMinDiff = hyperMinDiffArr[m][iEps] + Rand() % 15 - 7;
            hyperMinDiff = max(0, hyperMinDiff);
          }
          if (Rand() % 2 == 0) {
            hyperMinDiff = 0;
          }
          if (Rand() % 2 == 0) {
            hyperMaxRound = hyperMaxRoundArr[m][iEps] + Rand() % 5 - 2;
            hyperMaxRound = max(1, hyperMaxRound);
          }

        }
      }

      InitNumArray(mode);
      if (!numPairArrOK) continue;

      int nown = hyperN[m][iEps];
      int nowhyperSolverNum = hyperSolver[m][iEps];
      int nowhyperMinDiff = hyperMinDiffArr[m][iEps];
      int nowhyperMaxRound = hyperMaxRoundArr[m][iEps];
      int nowhyperStep1 = hyperStep1Arr[m][iEps];
      int nowhyperStep2 = hyperStep2Arr[m][iEps];

      int chan = n;
      int chahyperSolverNum = hyperSolverNum;
      int chahyperMinDiff = hyperMinDiff;
      int chahyperMaxRound = hyperMaxRound;
      int chahyperStep1 = hyperStep1;
      int chahyperStep2 = hyperStep2;

      int same = 1;
      if (nown != chan) same = 0;
      if (nowhyperSolverNum != chahyperSolverNum) same = 0;
      if (nowhyperMinDiff != chahyperMinDiff) same = 0;
      if (nowhyperMaxRound != chahyperMaxRound) same = 0;
      if (nowhyperStep1 != chahyperStep1) same = 0;
      if (nowhyperStep2 != chahyperStep2) same = 0;
      if (same) continue;

      int winCount = 0;
      double score = 0;
      double matchCount = 0;
      int CHAMP = 17;
      int LOSE = 3;
      int loseCount = 0;
      rep(i, CHAMP + LOSE + 100)
      {
        matchCount++;
        rep(j, 100) judgeArr[j] = Rand() % m;

        n = nown;
        hyperSolverNum = nowhyperSolverNum;
        hyperMinDiff = nowhyperMinDiff;
        hyperMaxRound = nowhyperMaxRound;
        hyperStep1 = nowhyperStep1;
        hyperStep2 = nowhyperStep2;
        InitNumArray(mode);
        double nowscore = Simulate(mode);

        n = chan;
        hyperSolverNum = chahyperSolverNum;
        hyperMinDiff = chahyperMinDiff;
        hyperMaxRound = chahyperMaxRound;
        hyperStep1 = chahyperStep1;
        hyperStep2 = chahyperStep2;
        InitNumArray(mode);
        double chascore = Simulate(mode);
        score += chascore;
        // cout << chascore << ' ' << nowscore << endl;
        if (chascore > nowscore) {
          winCount++;
          // cout << "WIN" << endl;
          // cout << hyperSolverNum << ' ' << chascore << ' ' << nowscore << endl;
        }
        else if (chascore < nowscore) {
          // cout << "LOSE" << endl;
          loseCount++;
        }
        if (loseCount > LOSE) {
          winCount = 0;
          break;
        }
        if (winCount == CHAMP) break;
      }
      score /= matchCount;

      // double score = 0;
      // rep(i, 30) score += Simulate(mode);
      // score /= 30;
      // if (score >= hyperMaxScore[m][iEps]) {

      if (winCount == CHAMP && (hyperMaxScore[m][iEps] < score)) {
        changeOfs << loop << ' ' << hyperSolver[m][iEps] << ' '
          << hyperSolverNum << ' ' << m << ' ' << eps << ' '
          << hyperN[m][iEps] << ' ' << n << ' '
          << hyperMaxScore[m][iEps] << ' ' << score << ' ' << score * n
          << ' ' << matchCount << endl;
        cout << loop << ' ' << hyperSolver[m][iEps] << ' ' << hyperSolverNum
          << ' ' << m << ' ' << eps << ' ' << hyperN[m][iEps] << ' ' << n
          << ' ' << hyperMaxScore[m][iEps] << ' ' << score << ' '
          << score * n << ' ' << matchCount << endl;
        hyperMaxScore[m][iEps] = score;
        hyperN[m][iEps] = n;
        hyperSolver[m][iEps] = hyperSolverNum;
        hyperMinDiffArr[m][iEps] = hyperMinDiff;
        hyperMaxRoundArr[m][iEps] = hyperMaxRound;
        hyperStep1Arr[m][iEps] = hyperStep1;
        hyperStep2Arr[m][iEps] = hyperStep2;

        winner er;
        er.winM = m;
        er.winEps = iEps;
        er.winLife = 10;
        winners.push(er);
      }
    }

    cout << "loop = " << loop << endl;

    OutputHaipara();
  }

  // 1000ケース実行
  if (mode == 1000) {
    double sumScore = 0;
    ofstream ofsScore("Score.txt");
    double hi = 0;
    rep(_, 1000)
    {
      if (_ % 100 == 0) {
        cout << _ << endl;
      }
      if (_ < 100) {
        OpenOfs1000Out(_);
      }

      Input(mode, _);
      n = hyperN[m][iEps];
      hyperSolverNum = hyperSolver[m][iEps];
      hyperMinDiff = hyperMinDiffArr[m][iEps];
      hyperMaxRound = hyperMaxRoundArr[m][iEps];
      hyperStep1 = hyperStep1Arr[m][iEps];
      hyperStep2 = hyperStep2Arr[m][iEps];

      InitNumArray(mode);
      if (!numPairArrOK) continue;

      if (_ < 100) {
        OutputArrayAsString(mode);
      }

      double score = Simulate(mode);
      sumScore += score;

      if (_ < 100) {
        OutputAnsToOfs1000Out();
        CloseOfs1000Out();
      }

      hi += score / hyperMaxScore[m][iEps];
      ofsScore << score / hyperMaxScore[m][iEps] << ' ' << fixed
        << setprecision(6) << score << ' ' << hyperMaxScore[m][iEps]
        << endl;
      // cout << _ << ' ' << score << endl;
      // if (_ < 100)
      //   ofsScore << setw(4) << setfill('0') << _ << " : " << score << endl;
    }
    cout << hi << endl;
    cout << "sumScore = " << sumScore << endl;
    ofsScore << "sumScore = " << sumScore << endl;
    ofsScore.close();
  }

  // ケース19を100回実行
  if (mode == 1001) {
    mode = 1000;
    // 1000ケース実行
    double sumScore = 0;
    ofstream ofsScore("Score.txt");
    double hi = 0;
    rep(looop, 100)
    {
      srep(_, 19, 20)
      {
        if (_ % 100 == 0) {
          cout << _ << endl;
        }
        if (_ < 100) {
          OpenOfs1000Out(_);
        }

        Input(mode, _);
        n = hyperN[m][iEps];
        hyperSolverNum = hyperSolver[m][iEps];
        hyperMinDiff = hyperMinDiffArr[m][iEps];
        hyperMaxRound = hyperMaxRoundArr[m][iEps];
        hyperStep1 = hyperStep1Arr[m][iEps];
        hyperStep2 = hyperStep2Arr[m][iEps];
        hyperSolverNum = 1154;

        InitNumArray(mode);
        if (!numPairArrOK) continue;

        if (_ < 100) {
          OutputArrayAsString(mode);
        }

        double score = Simulate(mode);
        sumScore += score;

        if (_ < 100) {
          OutputAnsToOfs1000Out();
          CloseOfs1000Out();
        }

        hi += score / hyperMaxScore[m][iEps];
        cout << hyperSolverNum << ' ' << score << endl;
      }
    }

    cout << hi << endl;
    cout << "sumScore = " << sumScore << endl;
    ofsScore << "sumScore = " << sumScore << endl;
    ofsScore.close();
  }

#if 0
  // hyperMaxScoreを20回3セットの一番いいやつで更新
  if (mode == 200) {
    srep(i, 10, 101)
    {
      srep(j, 0, 41)
      {
        double maxScore = 0;
        rep(_, 3)
        {
          double score = 0;
          rep(k, 20)
          {
            MODE = 100;
            mode = 100;
            Input(mode);
            m = i;
            iEps = j;
            eps = iEps / 100.0;
            rep(l, 100) judgeArr[l] = Rand() % m;
            n = hyperN[m][iEps];
            hyperSolverNum = hyperSolver[m][iEps];
            hyperMinDiff = hyperMinDiffArr[m][iEps];
            hyperMaxRound = hyperMaxRoundArr[m][iEps];
            hyperStep1 = hyperStep1Arr[m][iEps];
            hyperStep2 = hyperStep2Arr[m][iEps];

            InitNumArray(mode);

            score += Simulate(mode);
          }
          score /= 20;
          maxScore = max(maxScore, score);
        }
        cout << m << ' ' << iEps << ' ' << hyperMaxScore[m][iEps] << ' '
          << maxScore << endl;
        hyperMaxScore[m][iEps] = maxScore;
      }
    }
    OutputHaipara();
}
#endif
}

int main()
{
  rep(i, 105)
  {
    rep(j, 105)
    {
      com[i][j] = 0;
      if (j > i) continue;
      rep(k, j)
      {
        com[i][j] += log(i - k);
        com[i][j] -= log(j - k);
      }
    }
  }

  rep(i, 101)
  {
    rep(j, 41)
    {
    }
  }

  // 乱数調整
  srand((unsigned)time(NULL));
  while (rand() % 100) {
    Rand();
  }

  int mode = 0;
  MODE = mode;
  solve(mode);

  return 0;
}
