#include <algorithm>
#include <bitset>
#include <cassert>
#include <cctype>
#include <chrono>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <filesystem>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
#define rep(i, n) for (int i = 0; i < (n); ++i)
#define srep(i, s, t) for (int i = s; i < t; ++i)
#define drep(i, n) for (int i = (n)-1; i >= 0; --i)
using namespace std;
typedef long long int ll;
typedef pair<int, int> P;

const ll INF = 1001001001001001001;

const ll D1 = 10LL;
const ll D2 = 100LL;
const ll D3 = 1000LL;
const ll D4 = 10000LL;
const ll D5 = 100000LL;
const ll D6 = 1000000LL;
const ll D7 = 10000000LL;
const ll D8 = 100000000LL;
const ll D9 = 1000000000LL;
const ll D10 = 10000000000LL;
const ll D11 = 100000000000LL;
const ll D12 = 1000000000000LL;
const ll D13 = 10000000000000LL;
const ll D14 = 100000000000000LL;
const ll D15 = 1000000000000000LL;
const ll D16 = 10000000000000000LL;
const ll D17 = 100000000000000000LL;
const ll D18 = 1000000000000000000LL;

namespace /* 乱数ライブラリ */
{
  static uint32_t Rand()
  {
    static uint32_t x = 123456789;
    static uint32_t y = 362436069;
    static uint32_t z = 521288629;
    static uint32_t w = 88675123;
    uint32_t t;

    t = x ^ (x << 11);
    x = y;
    y = z;
    z = w;
    return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
  }

  // 0以上1未満の小数をとる乱数
  static double rand01() { return (Rand() + 0.5) * (1.0 / UINT_MAX); }
}  // namespace

std::random_device seed_gen;
std::default_random_engine engine(seed_gen());
std::exponential_distribution<> dist(1e-5);
std::mt19937 engine_mt19937(seed_gen());

clock_t startTime, endTime;

const int dx[4] = { -1, 0, 1, 0 };
const int dy[4] = { 0, -1, 0, 1 };

double TL = 1.3;
double nowTime;
int mode;

const int MAX_Q = 3232;
int N, D, Q;
int NN, DD, QQ;
vector<int> l[MAX_Q], r[MAX_Q];
int answers[MAX_Q][110];
string comments[MAX_Q];
char C[MAX_Q];
int ans[110];

int real_ans[110];
ll real_minScore;
int real_max_D;

int hikaku[110][110];

vector<int> pseudoItems;

// ローカルテスト用入力
ll W[110];

// ハイパラ
vector<int> haipara[14][40] = {
{
{ 200306,1008100, 200916, 200916, 200206, 200216, 200216},
{ 200306,1008100, 200916, 200916, 200206, 200216, 200216},
{ 200306, 200306, 200306, 200916, 200206, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306,1090021},
{ 200256, 200306, 200306, 200306, 200306, 200256,1090021},
{ 200256, 200256, 200256, 200306, 200306, 200256, 200256},
{1000006, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200306, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1098718,1000006, 200256, 200256, 200256, 200256},
{ 200226,1098718,1098718, 200256, 200256, 200256, 200256},
{ 200226,1079919,1079919,1079919, 200256, 200256, 200256},
{ 200226,1078728,1079919,1079919,1079919,1079919,1079919},
{ 200226,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226,1000610,1079919,1077967,1079919,1079919,1078732},
{ 200226, 200226, 200306,1000610,1000610,1079139,1079139},
{ 200226, 200226,1079140,1000610,1077017,1000610,1079139},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226}
},
{
{ 200306, 200306, 200306, 200916, 200916, 200206, 200206, 200216},
{ 200306, 200306, 200306, 200916, 200916, 200206, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200206, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916},
{ 200256, 200306, 200306, 200306, 200306, 200306,1090021,1097623},
{ 200256, 200256, 200306, 200306, 200306, 200306,1090021,1097623},
{ 200256, 200256, 200256, 200256, 200306,1097020,1097020,1097623},
{ 200226, 200256, 200256, 200256, 200256, 200256,1097020,1097623},
{ 200226, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1079919, 200306, 200256, 200256, 200256, 200256, 200256},
{ 200226,1079919,1079919, 200256, 200256, 200256, 200256, 200256},
{ 200226,1079919,1079919,1079479,1079919,1079919,1079919,1079919},
{ 200226,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610,1078732,1078732,1079919,1079919, 200306},
{ 200226, 200226,1000610,1000610,1079919,1078522,1079919,1079919},
{ 200226, 200226,1073670,1000610,1000610,1077017,1079139,1079139},
{ 200226, 200226, 200226,1000610,1077017,1000610,1000610,1079139},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226}
},
{
{ 200306, 200306, 200306, 200306, 200316, 200206, 200206, 200316, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200916, 200206, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200306, 200806, 200306, 200306, 200306, 200306, 200316, 200306,1090727,1097529},
{1099730, 200306, 200306, 200306, 200306, 200306, 200306,1096825,1090727,1097529},
{ 200256,1099730, 200306, 200306, 200306, 200306,1090021,1097623,1096825,1096825},
{1000006,1099730, 200256, 200306, 200306, 200306,1097020,1097623,1097020,1097020},
{ 200226,1099730, 200256, 200256, 200256, 200256, 200256,1097623,1099526,1099526},
{ 200226,1099730, 200256, 200256, 200256, 200256, 200256,1097623,1099526, 200256},
{ 200226,1099730,1000006, 200256, 200256, 200256, 200256,1000006,1099526, 200256},
{ 200226,1079919,1079919, 200256, 200256, 200256,1000006,1000006,1000006,1099526},
{ 200226,1079919,1079919,1000006,1079919,1000006,1079919,1079919,1000006,1000006},
{ 200226,1078951,1078951,1079919,1079919,1079919,1079919,1079961,1079961,1079919},
{ 200226, 200226,1078951,1078732,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610,1079919,1078732,1078732,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610,1000610,1000610,1079139,1079919,1079139,1079919,1079919},
{ 200226, 200226, 200227,1000610,1000610,1000610,1000610,1079139,1079139,1079139},
{ 200226, 200226, 200227,1000610,1000610,1000610,1000610,1077951,1079139,1079139},
{ 200226, 200226, 200226, 200226,1000610,1000610,1079139,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226}
},
{
{ 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200216, 200916, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916},
{1099730, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200916,1099430,1093433},
{1099730,1099730, 200306, 200306, 200306, 200306, 200306,1099828,1099828,1099730,1097529},
{1000009,1099730,1099730, 200306, 200306, 200306, 200256,1097623, 200256,1097529,1097529},
{ 200226,1099730,1099730, 200256, 200256, 200306, 200256,1097623,1099526,1099730, 200256},
{ 200226,1099730,1099730, 200256, 200256,1099526, 200256, 200256,1099526, 200256, 200256},
{ 200226,1099730, 200256,1099730, 200256,1099526, 200256, 200256,1099526, 200256, 200256},
{ 200226,1099730,1000006, 200256, 200256, 200256, 200256,1099526,1099526, 200256, 200256},
{ 200226,1078951,1079919,1000006,1079919,1000006,1000006,1000006,1099526, 200256, 200256},
{ 200226,1079919,1079919,1079919,1079919,1079919,1079919,1000006,1099526, 200256,1000006},
{ 200226, 200226,1078951,1079919,1079919,1079919,1079919,1079961,1079961,1079919,1079919},
{ 200226, 200226,1000610,1000610,1078732,1078732,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610,1000610,1079525,1079139,1079139,1079732,1079919,1079919,1079919},
{ 200226, 200226, 200227,1000610,1000610,1000610,1079139,1079139,1079139,1079139,1079919},
{ 200226, 200226,1000610,1000610,1000610,1000610,1079139,1079139,1079139,1079139,1078999},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1079139,1000610,1079067},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1079139},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266}
},
{
{ 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200316, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200316, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200306, 200916, 200916, 200916, 200916, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200316, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916},
{1000009, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916,1099430,1093433,1097135},
{1099730,1099730, 200806, 200806, 200306, 200306, 200306, 200306, 200316,1099730, 200256, 200256},
{1000006,1099730, 200806, 200806, 200806, 200806, 200256, 200316,1099526,1099730, 200256, 200256},
{ 200226,1099730,1099730, 200256, 200256, 200256, 200256, 200256,1099526,1099730, 200256,1099730},
{ 200226,1099730,1099730,1099730, 200256, 200256, 200256, 200256,1099526, 200256, 200256, 200256},
{ 200226,1099730,1000006,1099730,1099730, 200256, 200256, 200256,1099526, 200256, 200256, 200256},
{ 200226,1079919,1099730,1099730,1099730,1000006, 200256, 200256,1099526, 200256, 200256, 200256},
{ 200226,1079919,1078951,1099730,1000006,1079919,1079919,1000006,1099526, 200256, 200256, 200256},
{ 200226, 200226,1078951,1079919,1079919,1079919,1079919,1000006,1079919,1099730,1000006, 200256},
{ 200226, 200226,1000610,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610,1000610,1088974,1079525,1078846,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610,1000610,1000610,1000610,1078351,1079139,1079732,1079919,1079919,1079919},
{ 200226, 200226,1000610,1000610,1000610,1000610,1000610,1079139,1079139,1079139,1079067,1079067},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1079012,1079139,1078999},
{ 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1079453,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200266,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200306, 200916, 200916},
{1000009, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200916,1093433, 200256,1095838},
{1099730, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316,1093433,1097135,1097135},
{1099730,1099436,1099730, 200306, 200306, 200806, 200306, 200306, 200306,1099730, 200256,1099335,1099335},
{ 200226,1099730,1099730, 200256, 200256, 200256, 200256, 200256, 200306,1099730, 200256,1099335,1099335},
{ 200226,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099730,1099730,1099730,1099730,1099730, 200256,1099730, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099730,1079425,1099730,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099730,1099730,1099730,1079919,1099730,1079919,1099730,1000006,1099730, 200256, 200256, 200256},
{ 200226, 200226,1000610,1079919,1079919,1079919,1079919,1079919,1079919,1079919, 200256,1099730,1000006},
{ 200226, 200226,1000610,1000610,1079234,1078351,1078351,1079919,1079919,1079919,1079919,1079919,1099730},
{ 200226, 200226,1000610,1000610,1079234,1000610,1000610,1079454,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1079139,1079139,1079139,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1079139,1079139,1079139,1079067},
{ 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1077580,1000610,1078351,1079067},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200227, 200227,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200226, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200316, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200216, 200216, 200216},
{ 200806, 200306, 200306, 200306, 200916, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200216, 200216, 200216},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200916, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200306, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200316, 200306, 200916, 200916, 200916, 200916, 200916, 200916},
{1000009, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200916,1095838,1095341,1095341},
{1099740, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200256,1095838,1095838,1095341},
{1099436,1099740,1099740,1099740, 200306, 200306, 200306, 200306, 200306, 200306, 200256, 200256,1097135, 200256, 200246},
{1000006,1099740,1099740,1099740, 200306, 200806, 200806, 200306, 200306,1099730, 200256, 200256, 200256, 200256, 200246},
{ 200226,1099740,1099740,1099740, 200256, 200256, 200256,1099730, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099730,1099730,1099740, 200256, 200256, 200256,1099730, 200256, 200256, 200256, 200256, 200256, 200256, 200246},
{ 200226,1099730,1099730,1099730,1099730,1099730, 200256,1099730,1099730, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099633,1099730,1099730,1099730,1099730,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099730,1099730,1099730,1099730,1099730,1000006,1099730,1079919,1099730, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1078351,1099730,1079919,1099730,1079919,1099730,1000006,1099730,1099730,1099730,1099730, 200256,1079919},
{ 200226, 200226,1078351,1078351,1078351,1078351,1079919,1079919,1079919,1099730,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1078351,1078351,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1079139,1079139,1079919,1079067,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1079139,1000610,1078338,1079139,1079067,1079067,1079919,1079919},
{ 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1077678,1077989,1079067,1079339,1079067,1079067},
{ 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200226, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200216},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916},
{1000009, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200246, 200306, 200316, 200256,1095341,1096743,1096743},
{1099740,1099740, 200806, 200806, 200306, 200806, 200306, 200306, 200306, 200306,1093433, 200256,1095838,1095838, 200246,1096743},
{ 200226,1099740,1099740, 200256, 200256, 200806, 200306, 200306, 200306, 200246, 200256, 200256,1099335, 200256, 200246,1096743},
{ 200226,1098540,1099740,1099740,1099740, 200256,1099740, 200246, 200306, 200246, 200256, 200256, 200256, 200256, 200246, 200246},
{ 200226,1099730,1098540,1099740, 200256, 200256, 200256, 200246,1099730, 200246, 200256, 200256, 200256, 200256, 200246, 200256},
{ 200226,1098540,1099730,1099740,1099740, 200256, 200256, 200256,1099730, 200246, 200256, 200256, 200256, 200256, 200246, 200256},
{ 200226,1098540,1099633,1099730,1099730,1099730,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1097942,1099633,1099730,1099730,1099730,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1078351,1098730,1099730,1099730,1079919,1099730,1099730,1099730,1099730,1099730,1099335, 200256, 200256, 200256},
{ 200226, 200226,1078351,1078351,1078351,1099730,1079919,1099730,1079919,1099730,1079919,1079919,1099730, 200256,1099335,1079919},
{ 200226, 200226,1000610,1000610,1000610,1078351,1078266,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1078266,1079139,1079139,1079139,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1077441,1079080,1078338,1079139,1079067,1079067,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1078338,1078920,1078943,1079067,1079067,1079067,1079919},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1077864,1078997,1078999},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266,1000610, 200266,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200316, 200216, 200316, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200316},
{ 200806, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200916, 200916, 200916, 200316, 200316, 200916, 200916, 200916, 200916},
{1000009, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200256,1096446,1099649},
{1000009, 200256, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316,1092142, 200256,1096446, 200256},
{1099447, 200256, 200256, 200256, 200256, 200306, 200306, 200306, 200306, 200306, 200256, 200256, 200256, 200246, 200246,1096743,1096743},
{ 200226, 200256, 200256, 200256, 200256, 200256, 200256, 200246, 200256, 200246, 200246, 200256, 200256, 200246, 200246, 200256, 200256},
{ 200226,1098540,1098540,1099740,1099740,1099740, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200246, 200246, 200246, 200256},
{ 200226,1098540,1099740,1099740,1099740,1099740, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200246, 200246, 200256},
{ 200226,1098540,1098540,1098540,1099740,1099740,1099730, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200246, 200256, 200256},
{ 200226, 200226,1097942,1099730,1099730,1099740,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200246, 200256, 200256},
{ 200226, 200226,1098730,1098730,1098540,1099730,1099730,1099730,1099730,1099730,1099730,1099730, 200256, 200256, 200256, 200256, 200246},
{ 200226, 200226,1000610,1099730,1079919,1079919,1079919,1079919,1079874,1099730,1000006,1099730,1099730, 200256, 200256, 200256, 200256},
{ 200226, 200226,1000610,1000610,1000610,1078351,1079139,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1078308,1079139,1079139,1079139,1079139,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1078308,1079139,1079919,1079139,1079919,1079067,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1077851,1078338,1079171,1078925,1079067,1079919,1079919,1079919},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1078771,1079067,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200227, 200226, 200266, 200266, 200266,1000610, 200266,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266,1000610, 200266,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200226, 200266, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200316, 200316, 200916, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200216, 200916, 200216, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200316, 200316, 200316, 200316, 200916, 200916, 200916},
{1000009, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200316, 200916, 200916, 200916, 200916},
{1000009, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200916,1099649,1099452},
{1099447, 200256, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316,1099447,1092142, 200256,1095147, 200256,1099649},
{1000006,1099447, 200256, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200316, 200316, 200256, 200246, 200246,1096446, 200256, 200256},
{ 200226,1099447, 200256, 200256, 200256, 200246, 200256, 200246, 200256, 200246, 200246,1099447, 200256, 200246, 200246, 200256, 200256,1099649},
{ 200226,1099447,1099447,1099447, 200246, 200246, 200256, 200246, 200256, 200246, 200246, 200246, 200256, 200246, 200246, 200256, 200256, 200256},
{ 200226,1099447,1099740, 200256, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200246, 200246, 200256, 200256, 200256},
{ 200226,1099447,1098540,1098540,1098540,1098540,1099740, 200246, 200246, 200246, 200246, 200256, 200256, 200246, 200246, 200246, 200256, 200256},
{ 200226,1099447,1098540,1098730,1099730,1099730,1098540,1098540,1099447,1099740, 200246,1099730, 200256, 200246, 200246, 200246, 200256, 200256},
{ 200226, 200226,1098730,1098730,1099730,1098540,1098540,1098540,1099447,1099740,1099532,1099730, 200256, 200256, 200246, 200246, 200256, 200256},
{ 200226, 200226,1000610,1099447,1099730,1099730,1079874,1099532,1099532,1099730,1099730,1099730,1099730,1099730, 200246, 200256, 200256, 200256},
{ 200226, 200226,1000610,1000610,1000610,1000610,1079874,1079874,1079919,1079919,1099532,1079919,1099730,1079919,1079919, 200256, 200256,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1079874,1078308,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1078338,1078338,1078338,1079067,1079067,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1078338,1078338,1077999,1079067,1079067,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1078338,1000610,1079067,1079067,1079067,1079067,1079067,1079919},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1000610,1079067,1078348,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1097937,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200226, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200226, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266,1000610, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200316, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200316, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916,1099452,1099452,1099855},
{1000009, 200246, 200246, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916,1096549,1099649,1090050,1099452,1099855},
{1000006, 200246, 200246, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200256,1099447,1099649,1099649,1099452},
{ 200226, 200256, 200256, 200256, 200256, 200256, 200256,1099447, 200256, 200306, 200306, 200306, 200256, 200246, 200246, 200256, 200256,1099649,1099452,1099452},
{ 200226,1099447,1099447,1099447, 200256, 200256, 200246, 200246, 200256, 200256, 200246,1099447, 200256, 200246, 200246, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1099447, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200246, 200246, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1098540,1098540,1098540,1099740,1099447,1099447, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200256, 200256},
{ 200226,1079919,1099447,1098540,1099447,1098540,1098540,1098540,1099447,1099740, 200246, 200246, 200256, 200246, 200246, 200246, 200256, 200256, 200256, 200256},
{ 200226,1079919,1099447,1099447,1099730,1098540,1098540,1098540,1099447,1099740,1099532, 200246, 200256, 200246, 200246, 200246, 200246, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1098540,1098540,1098540,1098540,1099447,1000006,1099532,1099730,1099730, 200256, 200246, 200246,1099447, 200256, 200256, 200256},
{ 200226, 200226,1000610,1000610,1098540,1098540,1098540,1098540,1079919,1099532,1099532,1099730,1099730,1079919,1000006, 200256,1099447,1099447, 200256,1000006},
{ 200226, 200226, 200226,1000610,1000610,1000610,1077448,1077580,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1099447,1099447, 200256,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1078729,1078338,1079919,1079067,1079067,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1078338,1078338,1079067,1079067,1079919,1079919,1079919,1079919,1079919,1078756,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1078073,1079067,1079067,1079067,1079067,1079919,1079919,1099311},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067,1099311},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1078220,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200227, 200266, 200266, 200266, 200266,1000610,1000610, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216},
{ 200806, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200216, 200316, 200316, 200316},
{ 200306, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200236, 200316, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200236, 200236, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200256, 200806, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200316,1099452,1099855, 200246},
{1000009, 200246, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916,1099649,1099452,1099855,1099855,1090458},
{1000006, 200246, 200246, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916,1099649,1099452,1099452,1099855,1099855},
{ 200226, 200256, 200246, 200246, 200246, 200246, 200246, 200306, 200306, 200306, 200306, 200306, 200256, 200316, 200246, 200256, 200256,1099649,1099452, 200256, 200256},
{ 200226,1099447,1099447, 200256, 200256, 200256, 200256, 200256, 200256,1099447, 200246,1099447, 200256, 200256, 200256, 200256, 200256,1099649,1099452, 200256, 200256},
{ 200226,1099447,1099447, 200256, 200256, 200256, 200256, 200256, 200256, 200246, 200246, 200246, 200256, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1098540,1099447, 200256,1099447, 200256, 200246, 200246, 200246, 200256, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1098540,1098540,1098540,1099447,1099447,1099740, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1099447,1098540,1098540,1098540,1099447,1099740,1099740,1099447,1099532, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1099447,1098540,1098540,1098540,1099447,1099532,1099740,1099532,1000006,1000006, 200246, 200246,1099447, 200246, 200256, 200256, 200256},
{ 200226, 200226,1000610,1000610,1099447,1098540,1098540,1098540,1079919,1099532,1079919,1099532,1079919,1000006,1000006, 200256,1099447,1099447,1099447,1099855,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1077897,1079919,1079919,1079919,1079919,1099532,1079919,1079919,1079919,1079919,1099447,1099447,1099447,1000006,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1079919,1079919,1079067,1079067,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226,1000610, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1078618,1079067,1079067,1079067,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079076,1079067,1079067,1079067,1079067,1079067,1079067,1079919},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200227, 200227, 200226, 200266, 200266, 200266, 200266,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1078703,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266,1000610, 200266, 200266, 200266,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200806, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200316, 200316, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200236, 200236, 200916, 200316, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200316, 200916, 200236, 200236},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200306, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316},
{ 200806, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200316, 200916, 200316, 200916},
{ 200256, 200806, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{1000009, 200246, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200916,1099855,1099855, 200246, 200246},
{1000006, 200246, 200246, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200316, 200916, 200256,1099452,1099855,1090458,1090458},
{ 200226, 200256, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200306, 200246, 200306, 200306, 200256, 200256, 200256, 200256, 200256, 200256,1097051,1097051, 200256},
{ 200226,1099447,1099447, 200256, 200256, 200246, 200246, 200246, 200246, 200246, 200246,1099447, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447, 200256, 200256, 200256, 200256, 200256, 200246, 200246, 200246,1099447, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1099447, 200256,1099447,1099447, 200256, 200256, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1099447,1098540,1098540,1099447,1099447, 200256, 200256, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1099447,1099447,1099447,1099447,1099447,1099740,1099740, 200246,1099447, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1099447,1099447,1099447,1099447,1099447,1000006,1099740,1099447,1000006,1000006,1000006,1099447, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1077987,1098540,1099447,1099447,1099447,1079919,1079919,1000006,1000006,1000006,1000006,1099447,1099447,1099447, 200256,1099855, 200256,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1079919,1078931,1079919,1079919,1079919,1000006,1079919,1079919,1079919,1099447,1079919,1099447,1099855,1099855,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1078931,1078831,1079008,1079919,1079919,1079919,1079919,1099447,1079919,1099447,1099447,1099855,1099855,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1078549,1079067,1079067,1079067,1079919,1079919,1079919,1079919,1079919,1079919,1079919,1079919},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067,1079919,1079067,1079067,1079919,1079919},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067,1079067,1079919,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1078771,1077937,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200227,1000610, 200266, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1078771,1078771,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266,1000610,1000610,1000610,1000610,1000610, 200266,1000610,1000610,1000610,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200227, 200227, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200227, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200226, 200266, 200266, 200266, 200266, 200266, 200266}
},
{
{ 200306, 200306, 200306, 200916, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200216, 200216, 200216, 200216, 200216, 200216, 200216, 200216},
{ 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200916, 200216, 200216, 200216, 200216, 200316, 200316, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200216, 200216, 200316, 200316, 200316, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200916, 200316, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200316, 200236, 200236},
{ 200806, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200236, 200236},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200236, 200236, 200316},
{ 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200236, 200916, 200916, 200316},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200916, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200916},
{ 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200236, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200316, 200916},
{ 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916, 200916},
{ 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200316, 200316, 200916, 200916, 200316, 200916, 200916, 200916, 200916, 200916, 200316, 200916},
{ 200306, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200916, 200316, 200316, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200916, 200916, 200316, 200316, 200916},
{ 200306, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316, 200316, 200316, 200916, 200916, 200916, 200316, 200916, 200916, 200916, 200316, 200216},
{ 200256, 200806, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200916, 200916, 200316, 200916, 200916, 200316, 200316, 200246},
{ 200256, 200256, 200806, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200916, 200316, 200316,1098764, 200316, 200246, 200246, 200246, 200246},
{1000009, 200246, 200246, 200806, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200306, 200316, 200316, 200316,1099961,1099961,1090458,1099855, 200246, 200246, 200246, 200246},
{ 200226, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200246, 200306, 200246, 200246, 200316, 200316, 200316,1097051, 200256, 200256, 200256,1099855,1097051,1097051,1099855, 200246},
{ 200226,1000009,1097664, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256,1099855,1099855, 200256, 200256, 200256},
{ 200226,1099447,1099447, 200256, 200256, 200256, 200256, 200246, 200246, 200246, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099226,1099447,1099447, 200256, 200256, 200256, 200256, 200256, 200256, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1098540,1099447,1099447,1099447, 200256, 200256, 200256, 200246, 200256, 200256, 200256, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1098540,1099447,1099447,1099447,1099740,1099740,1099447,1099447, 200256, 200246, 200246, 200246, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226,1099447,1099447,1099447,1098540,1099447,1099447,1099447,1099447,1099447,1099447,1099447,1000006,1000006,1000006,1099447, 200256, 200256, 200256, 200256, 200256, 200256, 200256, 200256},
{ 200226, 200226,1099447,1099447,1077987,1099447,1099447,1099447,1099447,1099447,1079919,1099447,1000006,1000006,1000006,1099447,1099447,1099447, 200256, 200256, 200256, 200256,1099855, 200256},
{ 200226, 200226,1000610,1000610,1077987,1000610,1000610,1099447,1079919,1079919,1079008,1079919,1079919,1079919,1079919,1099447,1099447,1099447,1000006,1099855,1099855,1099855,1099855,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1078931,1078931,1078931,1079919,1079919,1079919,1079919,1079919,1099447,1099447,1000006,1099855,1099855,1099855,1099855,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1078997,1079067,1079067,1079067,1079919,1099447,1079919,1079919,1079919,1099855,1099855,1079919,1079919,1099855},
{ 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079919,1079919,1079067,1079919,1079919,1079919,1079919,1099855},
{ 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067,1079067,1079067,1079919,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1078771,1078771,1079067,1079067,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226,1000610, 200266,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1000610,1079067,1079067,1079067,1079067,1079067,1079067},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200226, 200266, 200266, 200266, 200266, 200266,1000610,1000610, 200266,1000610,1000610,1000610,1079067,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200227, 200227, 200226, 200266, 200266, 200266, 200266, 200266, 200266,1000610,1000610,1079067,1000610,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266,1000610},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266},
{ 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200226, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266, 200266}
}
};

vector<ll> haipara2[14][40] = {
{
{           99612016,1000000000000000000,        93601340602,        93601340502,           87212302,         5714320201,         5714320201},
{           99612016,1000000000000000000,        93601340602,        93601340602,           87212302,         5714320201,         5714320201},
{           99612016,           99612016,           99612016,        93601340602,           87212302,         5714320201,         5714320201},
{           99612016,           99612016,           99612016,         3601340602,       119183500503,         5714320201,         5714320202},
{           99952918,           99612016,           99612016,           99027514,       119183500503,         5714320202,         5714320202},
{           99952918,           99612016,           99423515,           99612016,       119183500503,       147066330404,       153567480404},
{           99952918,           99952918,           99952918,           99612016,       119183500503,       137066330404,       137066330404},
{           99588921,           99952918,           99952918,           99952918,           99952918,       137066330404,       137066330404},
{           99588921,           99952918,           99952918,           99952918,           99952918,       137066330404,       158011050405},
{           99588921,           99952918,           99952918,           99952918,       128753550504,       118011050405,       158011050405},
{           99588921,           99588921,           99588921,           99588921,           99588921,       118011050405,       158011050405},
{           99396425,           99588921,           99588921,           99588921,           99588921,           99588921,       158011050405},
{           99396425,           99588921,           99588921,           99588921,           99588921,           99588921,1000000000000000000},
{             181846,           99588921,           99588921,           99588921,           99588921,             205972,1000000000000000000},
{             161288,             181846,             181846,           99588921,           99588921,             181846,             151830},
{1000000000000000000,             181846,             181846,             181846,             181846,             181846,             151830},
{           99631960,             181846,             181846,             181846,             181846,             181846,             151830},
{               5401,1000000000000000000,1000000000000000000,             151830,             151830,             181846,             151830},
{               5401,1000000000000000000,1000000000000000000,             151830,             151830,             181846,             151830},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,             151830,             151830,             151830},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,           99294182,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,             910162,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               9518,               9518,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359}
},
{
{           99612016,           99612016,           99612016,        93601340602,       113601340502,           87212302,           87212302,         7616140303},
{           99612016,           99612016,           99612016,        93601340602,       113601340502,           87212302,         5714320201,         5714320201},
{           99952918,           99612016,           99612016,           99612016,           87212302,       139183500503,         5714320201,         5714320201},
{           99952918,           99612016,           99612016,           99612016,       119183500503,       139183500503,         5714320201,         5714320201},
{           99952918,           99952918,           99952918,           99612016,       119183500503,       119183500503,       153567480404,       153567480404},
{           99588921,           99952918,           99952918,           99952918,       119183500503,       139183500503,       153567480404,       153567480404},
{           99588921,           99952918,           99952918,           99952918,       109183500603,       147066330404,       153567480404,       153567480404},
{             998020,           99952918,           99952918,           99952918,           73940321,       138753550504,       153567480404,       178011050405},
{           73940321,           99588921,           99588921,           99588921,           99588921,       138753550504,       158011050405,       178011050405},
{           99396425,           99588921,           99588921,           99588921,           99742222,       128753550504,       158011050405,       178011050405},
{           99396425,           99588921,           99588921,           99742222,           99742222,           99742222,       158011050405,       178011050405},
{           99396425,           99588921,           99588921,           99588921,           99742222,           99588921,           99396425,       178011050405},
{           99396425,           99396425,           99396425,           99396425,           99396425,           99396425,       158011050405,       158011050405},
{             181846,           99396425,           99396425,           99396425,           99396425,           99396425,1000000000000000000,1000000000000000000},
{             161288,             181846,           99396425,           99396425,           99396425,           99396425,1000000000000000000,1000000000000000000},
{             181846,             181846,             181846,             209830,           99396425,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,             181846,             181846,             209830,             209830,             181846,1000000000000000000,1000000000000000000},
{               5401,             181846,             181846,             151830,             151830,             181846,             181846,             181846},
{               5401,             181846,             181846,             151830,             151830,             181846,             181846,             181846},
{               5401,1000000000000000000,           99271383,             151830,             151830,             181846,             151830,             151830},
{               5401,1000000000000000000,1000000000000000000,             151830,             151830,             181846,             151830,             151830},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99798785},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               9518,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               9518,               7359,               7359,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7010},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359}
},
{
{           99952918,           99612016,           99612016,           99612016,         3601340602,           87212302,           87212302,         5490940302,         7616140303,         7616140303},
{           99952918,           99612016,           99612016,         3647340702,         3601340602,       149183500503,           87212302,         7386830403,         7616140303,         1395450304},
{           99952918,           99612016,           99612016,         3647340702,         3601340602,       149183500503,       149183500503,         5714320201,         5714320201,         1395450304},
{           99952918,           99952918,           99952918,           99952918,       139183500503,       139183500503,       149183500503,       163567480404,       153567480404,         8646420202},
{           99588921,           99952918,           99952918,           99952918,       139183500503,       139183500503,       153567480404,       163567480404,       163567480404,         8646420202},
{           99588921,           99952918,           99588921,           99588921,           73940321,       139183500503,       158753550504,       163567480404,       163567480404,       203828860203},
{           99588921,           99588921,           99588921,           99588921,       118273120703,       139183500503,       158753550504,       178011050405,       178011050405,         9349090203},
{           73940321,           99588921,           99588921,           99588921,         8273120703,       138753550504,       158753550504,       178011050405,       178011050405,         9349090203},
{           99396425,           99588921,           99588921,           99588921,           99588921,       138753550504,       158753550504,       178011050405,       178011050405,         9349090203},
{           99396425,           99588921,           99396425,           99742222,           99742222,       128753550504,       158753550504,       178011050405,       198011050406,       207254870406},
{           99396425,           99396425,           99396425,           99742222,           99396425,           99396425,       169204010505,       169204010505,       198011050406,       198011050406},
{           99396425,           99396425,           99396425,           99396425,           99396425,           99396425,       169204010505,       158011050405,         8011050405,       219541020407},
{           98567533,           99396425,           99396425,           99396425,           99396425,           99396425,           99065729,       158011050405,       199541020407,       209541020407},
{           98567533,             992726,           99396425,           99396425,           99396425,           99396425,         9204010505,           99065729,1000000000000000000,1000000000000000000},
{1000000000000000000,           99839829,           99839829,           99396425,           99396425,           99065729,           99065729,1000000000000000000,1000000000000000000,1000000000000000000},
{             181846,1000000000000000000,           98567533,           99839829,           99839829,           99839829,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,             181846,           99621733,           99028731,           99028731,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,             181846,             181846,             181846,             181846,             181846,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,             181846,             181846,             151830,             181846,             181846,1000000000000000000,1000000000000000000,             293451},
{               5401,1000000000000000000,1000000000000000000,             151830,             151830,             181846,             181846,1000000000000000000,1000000000000000000,             293451},
{               5401,1000000000000000000,1000000000000000000,             151830,             151830,             151830,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             770195,             770195,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             617957,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7010,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7010,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               9518,               9518,               9518,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,                641,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,                479,               7902},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               7359,               7359},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               5605,               5605}
},
{
{           99952918,           99952918,           99952918,         4942040802,         3647340702,       113601340502,       149183500503,         7386830403,         7386830403,         3857500303,         1395450304},
{           99952918,           99952918,           99952918,         4942040802,         3647340702,       149183500503,       149183500503,       149183500503,         7386830403,       173857500303,         1395450304},
{           99588921,           99952918,           99952918,         4942040802,         3647340702,       149183500503,       149183500503,       149183500503,         5714320201,         3567480404,         1395450304},
{           99588921,           99952918,           99952918,         4942040802,       139183500503,       139183500603,       149183500503,       183567480404,       183567480404,         3567480404,         1395450304},
{           99588921,           99588921,           99588921,           99588921,           99588921,       129183500603,       149183500503,       163567480404,       183567480404,       183567480404,         8646420202},
{           73940321,           99588921,           99588921,           99588921,       118273120703,       129183500603,       158753550504,       178753550504,       183567480404,       198011050405,         8011050405},
{           99396425,           99588921,           99588921,           99588921,       118273120703,         9183500603,       158753550504,       158753550504,       188011050405,       198011050405,         8011050405},
{           99396425,           99588921,           99396425,           99588921,           99396425,           99396425,       148753550604,       158753550504,       188011050405,       188011050405,         8011050405},
{           99396425,           99396425,           99396425,           99396425,           99396425,           99396425,       148753550604,       158753550504,       207254870406,       207254870406,       207254870406},
{           99396425,           99396425,           99396425,           99396425,           99396425,         8753550604,       158753550604,       189204010505,       189204010505,       207254870406,       207254870406},
{             992731,           99396425,           99396425,           99396425,           99396425,       128796520704,       169204010505,       189204010505,       198011050406,       229541020407,       229541020407},
{           98567533,           99396425,           99396425,           99396425,           99396425,           99396425,           99065729,       189204010505,       209541020407,       219541020407,       229541020407},
{           65407434,             994231,           99396425,           99396425,           99396425,           99065729,           99065729,           99065729,       209541020407,       219541020407,       239541020408},
{             997637,             994231,           98567533,           99698028,           99065729,           99065729,           98567533,         9204010505,       199541020407,       219541020407,       239541020408},
{1000000000000000000,           98567533,           98567533,           99698028,           99065729,           99065729,           98567533,           65407434,       199541020407,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,           98567533,           98567533,           98567533,           98567533,           98567533,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,1000000000000000000,           98567533,           98567533,           99028731,             293451,1000000000000000000,             251594,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,             293451,             293451,           98567533,             293451,1000000000000000000,1000000000000000000,1000000000000000000,             307329},
{               5401,1000000000000000000,1000000000000000000,             293451,             293451,1000000000000000000,             293451,             293451,1000000000000000000,             293451,             293451},
{               5401,1000000000000000000,             229023,1000000000000000000,             293451,1000000000000000000,             181846,             293451,1000000000000000000,             293451,             293451},
{               5401,1000000000000000000,1000000000000000000,             151830,             181846,             181846,             181846,1000000000000000000,1000000000000000000,             293451,             293451},
{               5401,             759479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7010,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               5605,               5605,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,                479},
{               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,                479}
},
{
{           99588921,           99952918,           99952918,        84942040802,       103647340702,       159183500503,       169183500503,       169183500503,         7386830403,         3857500303,         3857500303,          644870304},
{           99588921,           99952918,           99588921,        84942040802,         4942040802,       159183500503,       149183500503,       169183500503,         7386830403,       173857500303,         1395450304,          644870304},
{           99588921,           99952918,           99588921,         4942040802,           99588921,       139183500603,       139183500603,       149183500503,       183567480404,       183567480404,         3567480404,          644870304},
{           73940321,           99588921,           99588921,           99588921,           99588921,       139183500603,       139183500603,       149183500503,       183567480404,       183567480404,         3567480404,          644870304},
{           73940321,           99588921,           99588921,           99588921,       128273120703,       138273120703,       139183500603,       178753550504,       188753550504,       183567480404,         8011050405,         8011050405},
{           99396425,           99588921,           99396425,           99588921,       128273120703,       128273120703,       158753550504,       178753550504,       178753550504,       198011050405,       198011050405,         8011050405},
{           99396425,           99588921,           99396425,           99588921,       128273120703,         8273120703,       158753550604,       178753550504,       178753550504,       198011050405,       198011050405,         7254870406},
{           99396425,           99396425,           99396425,           99396425,           99396425,           99396425,       158753550604,       178753550504,       199204010505,       207254870406,       237254870406,       237254870406},
{             992731,           99396425,           99396425,           99396425,           99396425,           99396425,       158753550604,       189204010505,       189204010505,       207254870406,       207254870406,       249541020407},
{             992731,           99396425,           99396425,           99396425,           99396425,         8796520704,         8753550604,       189204010505,       189204010505,       207254870406,       229541020407,       229541020407},
{             992731,           99396425,           99698028,           99396425,           99396425,           99698028,           99698028,       189204010505,       189204010505,       229541020407,       229541020407,       229541020407},
{             992731,             992731,           99417731,           99698028,           99698028,           99698028,           98567533,       189204010505,       189204010505,       229541020407,       229541020407,       239541020408},
{             992731,             992731,           98567533,           99698028,           98567533,           99065729,           99065729,         9204010605,         9204010505,       229541020407,       239541020408,       239541020408},
{             997637,             992731,             992731,           98567533,           98567533,           98567533,           98567533,         9204010605,       199211680507,       229541020407,       229541020407,       243632380409},
{             997637,             997637,           98567533,           98567533,           98567533,           98567533,           98567533,           98567533,       199211680507,       199541020407,       233632380409,       243632380409},
{1000000000000000000,             997637,             997637,           98567533,           98567533,           98567533,           98567533,           98567533,       189211680507,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,             997637,             997637,           98567533,           98567533,           98567533,           98567533,         9211680507,1000000000000000000,             329453,             329453},
{1000000000000000000,1000000000000000000,             997637,             997637,             997637,             997637,             293451,         9211680507,1000000000000000000,1000000000000000000,             329453,             329453},
{               5401,1000000000000000000,1000000000000000000,             293451,             293451,             293451,             293451,             293451,1000000000000000000,1000000000000000000,             332652,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451,             293451,             293451,1000000000000000000,             293451,             293451,             293451},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451,             293451,1000000000000000000,             293451,             293451,             293451},
{               5401,1000000000000000000,             174193,1000000000000000000,             174193,1000000000000000000,             293451,             293451,1000000000000000000,             293451,             293451,             293451},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             740637,1000000000000000000,1000000000000000000,             293451,             293451,             293451},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7010,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               7359,               1385,                479,                479},
{               5401,               7359,               7359,               7359,               5605,               7359,               5605,               5605,               5605,               5605,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,                479,                479},
{               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479}
},
{
{           99588921,           99588921,           99588921,        84942040802,         4942040802,       159183500503,       169183500503,       169183500503,       169183500503,       177386830403,         3857500303,         3857500303,          281640304},
{           99588921,           99588921,           99588921,         4942040802,         4942040802,       159183500503,       169183500503,       169183500503,       169183500503,       177386830403,         3567480404,          644870304,          281640304},
{           99396425,           99588921,           99588921,         4942040802,         4942040802,       139183500603,       139183500603,       169183500503,       188753550504,       213567480404,       213567480404,          644870304,          281640304},
{           99396425,           99588921,           99588921,           99588921,         4942040802,       138273120703,       139183500603,       188753550504,       188753550504,       213567480404,       213567480404,       220644870304,          644870305},
{           99396425,           73940321,           99396425,           99396425,       128273120703,       138273120703,         9183500603,       188753550504,       188753550504,       188753550504,       228011050405,       228011050405,         8011050405},
{           99396425,           99396425,           99396425,           99396425,           99396425,       128273120703,         9183500603,       188753550504,       188753550504,       198011050405,       198011050405,       228011050405,         7254870305},
{             993927,           99396425,           99396425,           99396425,           99396425,         8273120703,       158753550604,       178753550604,       188753550504,       209204010505,       237254870406,       237254870406,         7254870406},
{             992731,           99396425,           99396425,           99396425,           99396425,         8273120703,         8796520704,       148753550604,       199204010505,       209204010505,       237254870406,       237254870406,         7254870406},
{             992731,           99396425,           99396425,           99396425,           99396425,           99417731,         8796520704,         8753550604,       199204010505,       209204010505,       249541020407,       249541020407,       259541020407},
{             992731,           99396425,           99396425,           99396425,           99396425,           99417731,         8796520704,         8753550604,       189204010505,       209204010505,       229204010506,       249541020407,       249541020407},
{             992731,             992731,           98567533,           99698028,           99698028,           99417731,           98567533,         8753550604,       189204010505,       209204010505,       239541020407,       269541020408,       269541020408},
{             992731,             992731,           98567533,           99698028,           99698028,           99417731,           98567533,       189204010505,       189204010505,         9204010505,       239211680507,       239541020408,       269541020408},
{             992731,             992731,           98567533,           98567533,           98567533,           98567533,           98567533,         9204010605,         9204010605,       219211680507,       219211680507,       239541020408,       253632380409},
{           90995545,             997637,           98567533,           98567533,           98567533,           98567533,           98567533,         9204010605,         9204010605,       219211680507,       233632380409,       253632380409,       253632380409},
{           90995545,             997637,             997637,           98567533,           98567533,           98567533,           98567533,           98567533,       189211680507,       219211680507,           99542939,       253632380409,       238280540410},
{1000000000000000000,             997637,             997637,           98567533,           98567533,           99542939,           98567533,           98567533,         9211680507,       219211680507,1000000000000000000,             362704,1000000000000000000},
{1000000000000000000,             997637,             997637,           99542939,           99542939,           99542939,           99542939,           99542939,         9211680507,         9211680507,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,1000000000000000000,           99542939,           99542939,             997637,           99542939,           99542939,           99542939,1000000000000000000,             332652,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,             293451,             293451,             293451,             293451,             293451,           99542939,1000000000000000000,             333885,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451,             293451,             293451,             293451,             333885,             333885,             333885},
{               5401,1000000000000000000,             174193,1000000000000000000,1000000000000000000,             293451,             293451,             293451,             293451,             293451,             333885,             293451,             333885},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,1000000000000000000,             293451,             293451,             293451,             333885,             333885},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451,             293451,             333885,             333885},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             333885,             333885},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,1000000000000000000,1000000000000000000},
{               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7010,               7010,               7010,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,               1385,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               1385,                479,                479,                479},
{               5401,               7359,               7359,               7359,               7359,               7359,               5605,               5605,                479,                479,               5605,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479},
{               5401,               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               7010,                479,                479},
{               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479}
},
{
{           73940321,           99588921,           99588921,         4942040802,         4942040802,         4942040802,       169183500503,       169183500503,       169183500503,         9183500503,         1064960302,         3567480404,          281640304,          281640304,          281640304},
{           99396425,           99588921,           99588921,         4942040802,         4942040802,         4942040802,         9183500603,       169183500503,       169183500503,       177386830403,         3567480404,         3567480404,          281640304,          281640304,         7254870305},
{           99396425,           99588921,           99396425,           99588921,         4942040902,       148273120703,       148273120703,         9183500603,       188753550504,       188753550504,       213567480404,       233567480404,          281640304,         7254870305,         7254870305},
{             997524,           99588921,           99396425,           99396425,       148273120703,       148273120703,       148273120703,         9183500603,       188753550504,       188753550504,       213567480404,       213567480404,         8011050405,         7254870305,         7254870305},
{             997524,           99396425,           99396425,           99396425,           99396425,       148273120703,         8273120703,       188753550504,       188753550504,       188753550504,       228011050405,       228011050405,         8011050405,       243620670305,         7254870306},
{           99396425,           99396425,           99396425,           99396425,           99396425,         8273120703,         8273120703,       178753550604,       188753550504,       219204010505,       219204010505,       228011050405,       228011050405,       243620670305,         2156940203},
{             992731,           99396425,           99396425,           99396425,           99396425,         8273120703,       158796520704,       178753550604,       209204010505,       209204010505,       219204010505,       237254870406,       257254870406,       257254870406,       261059140204},
{             992731,           99396425,           99396425,           99396425,           99396425,         8273120803,         8796520704,         8796520704,       209204010505,       209204010505,       209204010505,       259541020407,       259541020407,       269541020407,       261059140204},
{             992731,           99396425,           99396425,           99396425,           99114128,           99417731,         8796520704,         8753550604,         9204010605,       209204010505,       239204010506,       249541020407,       259541020407,       269541020407,       288371260204},
{             992731,             992731,           98567533,           99417731,           99417731,           99417731,         8796520704,         8753550604,         9204010605,       209204010505,       229204010506,       249541020407,       269541020408,       279541020408,       289541020408},
{             992731,             992731,           98567533,           99417731,           99417731,           98567533,           98567533,       153587300705,       189204010505,       209204010505,       229204010506,       259211680507,       269541020408,       283632380409,       293632380409},
{             992731,             992731,           98567533,           98567533,           98567533,           98567533,           98567533,         3587300705,         9204010605,       219211680507,       239211680507,       239211680507,       283632380409,       283632380409,       293632380409},
{           90995545,             997637,             997637,           98567533,           98567533,           98567533,           98567533,           98567533,         9204010605,       219211680507,       239211680507,       239211680507,       283632380409,       283632380409,       298280540410},
{           90995545,             997637,             997637,           98567533,           98567533,           98567533,           98567533,         3587300705,         9204010605,           99542939,       239211680507,       239211680507,       253632380409,       298280540410,       298280540410},
{           90995545,             997637,             997637,           99542939,           98567533,           98567533,           99542939,         3587300705,           99542939,       219211680507,       239211680507,       239211680507,       243632380409,       298280540410,       298280540410},
{1000000000000000000,             997637,             997637,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,       219211680507,         9211680507,       233632380409,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,             991848,             997637,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         9211680507,         9211680507,             368458,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,1000000000000000000,              72160,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,             332652,             368458,1000000000000000000,             384750,           99416144},
{1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99435947,             998647,             998647,           99542939,           99542939,1000000000000000000,             332652,             368458,             384750,             384750,           99416144},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451,             293451,1000000000000000000,             293451,             293451,             332652,             368458,             384750,             384750,             384750},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,             293451,             293451,             293451,1000000000000000000,             293451,             293451,             333885,             333885,             384750,             384750,           99416144},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             293451,1000000000000000000,1000000000000000000,             293451,             333885,             333885,             384750,             384750,             384750},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             333885,             333885,             384750,             384750,             384750},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             333885,             333885,             333885,             384750,             384750},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               5605,               5605,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479},
{               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479},
{               5401,               5401,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479},
{               5401,               5401,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,               5605,                479,                479,                479,                479}
},
{
{           73940321,           99918022,           99918022,         4942040802,         4942040802,         4942040802,       169183500603,       169183500603,       169183500503,         9183500503,         6813000403,         3567480404,         3567480404,          281640304,          281640304,          281640304},
{           99396425,           99588921,           99396425,         4942040802,         4942040802,         4942040802,       148273120703,       169183500603,       169183500503,       208753550504,       213567480404,       213567480404,         3567480404,          281640304,          281640304,         7254870305},
{           99396425,           99588921,           99396425,           99396425,           99396425,       148273120703,       148273120703,         8273120703,       208753550504,       208753550504,       208753550504,       233567480404,       233567480404,          281640304,         7254870305,         7254870305},
{             997524,           99396425,           99396425,           99396425,           99396425,       148273120703,       148273120703,         8273120703,       188753550504,       208753550504,       208753550504,       233567480404,       228011050405,         8011050405,         7254870305,         7254870306},
{           99396425,           99396425,           99396425,           99396425,           99396425,       148273120703,       148273120703,       188753550604,       188753550604,       188753550504,       229204010505,       239204010505,       228011050405,       243620670305,         7254870305,         7254870306},
{             992731,           99396425,           99396425,           99396425,           99396425,       148273120703,       148273120703,       178753550604,       188753550604,       219204010505,       229204010505,       229204010505,       228011050405,       268011050406,         7254870406,         7254870306},
{             992731,           99396425,           99396425,           99114128,           99114128,         8273120703,       158796520704,       158796520704,       188753550604,       209204010505,       219204010505,       229204010505,       237254870406,       268011050406,         7254870406,         1059140204},
{             992731,           98567533,           99396425,           99562827,           99114128,         8273120803,       158796520704,       158796520704,         9204010605,       209204010605,       209204010505,       239204010506,       259541020407,       269541020407,       289541020407,         9541020407},
{             992731,           98567533,           98567533,           98567533,           99114128,           98567533,       158796520704,         8796520704,         9204010605,       209204010605,       239204010506,       239204010506,       259541020407,       269541020407,       259541020407,         9541020408},
{             992731,           98567533,           98567533,           98567533,           98567533,           98567533,         8796520704,         8796520704,         9204010605,       209204010505,       209204010505,       239204010506,       259211680507,       289541020408,       289541020408,       289541020408},
{             994738,             992731,           98567533,           98567533,           98567533,           98567533,           98567533,         8796520704,         3587300705,       209204010505,       229204010506,       259211680507,       259211680507,       293632380409,       293632380409,       293632380409},
{           90995545,             997637,           98567533,           98567533,           98567533,           98567533,           98567533,         8796520704,         9204010605,         9204010605,       239211680507,       259211680507,       259211680507,       293632380409,       293632380409,       293632380409},
{           90995545,             997637,           99542939,           98567533,           98567533,           98567533,           98567533,       173587300705,         3587300705,         9204010605,       239211680507,       259211680507,       283632380409,       283632380409,       303632380410,       303632380410},
{           90995545,             997637,             990741,           99542939,           99542939,           99542939,           99542939,       173587300705,         3587300705,         9204010606,       219211680507,       239211680507,       283632380409,       298280540410,       298280540410,       303632380410},
{             521325,             997637,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         9204010606,       219211680507,       239211680507,       239211680507,       298280540410,       298280540410,       328280540411},
{             521325,             991848,             991848,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         9204010606,         9211680507,         9211680507,         9211680507,       298280540410,       298280540410,       328280540411},
{1000000000000000000,             991848,             991848,           82450739,           82450739,           82450739,           99542939,           99542939,           99542939,           99416144,           99435947,         9211680507,             390781,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,1000000000000000000,             991848,             991848,           99435947,             998647,           99435947,           99435947,           99435947,           99435947,1000000000000000000,             368458,1000000000000000000,1000000000000000000,           99416144,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,             465355,             465355,             998647,           99435947,           99435947,           99435947,           99416144,             332652,             368458,1000000000000000000,             384750,           99416144,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,              72160,              72160,             293451,1000000000000000000,           99416144,           99435947,           99416144,             332652,             368458,             384750,             384750,           99416144,           99416144},
{               5401,1000000000000000000,1000000000000000000,              72160,             293451,             293451,             293451,           99416144,1000000000000000000,           99416144,             332652,             333885,             384750,             384750,           99416144,             384750},
{               5401,1000000000000000000,1000000000000000000,              72160,              72160,             293451,             293451,             293451,1000000000000000000,           99416144,             333885,             333885,             384750,             384750,           99416144,             384750},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             333885,             333885,             384750,             384750,             384750,             384750},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             333885,             333885,             384750,             384750,             384750,             384750},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,             384750,             384750},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,               6197,                479,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479}
},
{
{           99396425,           99588921,           99918022,         4942040802,         4942040802,         4942040802,       169183500603,       179183500603,       179183500603,         9183500503,         6813000403,          322730403,         3567480404,         3567480404,          281640304,          281640304,          281640304},
{           99396425,           99588921,           99396425,           99396425,         4942040902,       114942040802,       148273120703,       168273120703,       169183500603,       208753550504,       218753550504,       233567480404,       233567480404,          281640304,          281640304,         7254870305,         7254870305},
{           99396425,           99396425,           99396425,           99396425,         4942040902,       148273120703,       148273120703,       148273120703,       208753550504,       208753550504,       218753550504,       233567480404,       233567480404,         8011050405,          281640304,         7254870305,         7254870305},
{           99396425,           99396425,           99396425,           99396425,         4942040902,         8273120803,       148273120703,         8273120703,       188753550604,       208753550604,       208753550504,       209204010505,       228011050405,         8011050405,         8011050405,         7254870305,         7254870306},
{             992731,           99396425,           99396425,           99396425,           99396425,       148273120703,       148273120703,         8273120703,       188753550604,       188753550604,       229204010505,       249204010505,       249204010505,         8011050405,         7254870305,         7254870305,         7254870306},
{             992731,           99396425,           99396425,           99396425,         8273120703,         8273120803,       148273120703,       178796520704,       188753550604,       229204010505,       229204010505,       229204010505,       229204010505,       268011050406,       268011050406,       307254870306,         7254870306},
{             992731,           98567533,           98567533,           99114128,           99114128,         8273120803,         8273120803,       178796520704,       198753550604,       209204010505,       229204010505,       229204010505,       259204010506,       268011050406,       268011050406,       307254870306,       307254870306},
{           65407434,           98567533,           98567533,           99114128,           98567533,           65407434,       158796520704,       158796520704,       209204010605,       209204010605,       239204010506,       249204010506,       249204010506,       269541020407,       289541020407,       289541020407,         9541020408},
{             994738,           98567533,           98567533,           98567533,           98567533,           98567533,           99348533,         8796520704,       209204010605,       209204010605,       209204010505,       239204010506,       249204010506,       269541020408,       269541020408,       319541020408,       319541020408},
{             994738,           98567533,           98567533,           98567533,           98567533,           98567533,           98567533,         8796520704,       173587300705,       209204010505,       209204010505,       239204010506,       259211680507,       259211680507,       303632380409,       303632380409,       313632380409},
{             994738,           99542939,           65407434,           98567533,           98567533,           98567533,           98567533,         8796520704,         9204010605,         9204010605,         9204010606,       259211680507,       259211680507,       293632380409,       303632380409,       303632380409,       313632380409},
{           90995545,             997637,           99542939,           98567533,           99542939,           99542939,           99542939,         8796520704,         3587300705,         9204010605,       239211680507,       259211680507,       259211680508,       293632380409,       293632380409,       323632380410,       323632380410},
{             991848,             997637,           99542939,           99542939,           99542939,           99542939,           99542939,       173587300705,         3587300705,         9204010605,         9204010606,       259211680507,       259211680507,       298280540410,       303632380410,       323632380410,       338280540411},
{           90995545,             997637,             998544,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         9204010606,         9204010606,       259211680507,       259211680507,       298280540410,       298280540410,       328280540411,       338280540411},
{           99435947,             998544,             998544,             996643,           99542939,           99542939,           99542939,           99542939,           99542939,         9204010606,         9211680607,       239211680507,       239211680507,       298280540410,       308280540411,       328280540411,       338280540411},
{             521325,             991848,             991848,             996643,             996643,           99542939,           99542939,           99542939,       219211680607,       219211680607,       219211680607,         9211680507,         9211680508,       298280540410,       298280540410,       328280540411,       328280540411},
{1000000000000000000,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680607,         9211680508,         9211680508,         9211680508,             444040,1000000000000000000,1000000000000000000},
{1000000000000000000,             465355,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680508,         9211680508,1000000000000000000,             444040,1000000000000000000,             474805},
{1000000000000000000,             465355,             465355,             465355,             465355,           99435947,           99435947,           99435947,           99435947,           99435947,             412890,             368458,             384750,           99416144,           99416144,1000000000000000000,1000000000000000000},
{               5401,             465355,             465355,             465355,             465355,             465355,             465355,           99416144,             465355,           99416144,           99416144,             368458,             384750,           99416144,           99416144,             474805,             474805},
{               5401,1000000000000000000,1000000000000000000,              72160,1000000000000000000,1000000000000000000,           99416144,           99416144,           99416144,           99416144,           99416144,             368458,             384750,           99416144,           99416144,           99416144,             474805},
{               5401,1000000000000000000,              72160,              72160,              72160,1000000000000000000,           99416144,           99416144,           99416144,           99416144,           99416144,             333885,             384750,             384750,           99416144,           99416144,             474805},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,              72160,1000000000000000000,1000000000000000000,           99416144,           99416144,           99416144,           99416144,             333885,             384750,             384750,           99416144,             384750,             474805},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             333885,             333885,             384750,             384750,           99416144,             384750,             474805},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,             384750,             384750,             384750,           99416144},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,             384750,             384750,             384750},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             660362,1000000000000000000,             300921},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7010,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7010,               7010,               6197,                479,                479,                479,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,                479,                479,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479},
{               5401,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,               5605,                479,                479,                479,                479,                479}
},
{
{           99396425,           99396425,           99396425,           99396425,         4942040902,         4942040902,       168273120703,       168273120703,       179183500603,         9183500503,         9183500503,       208753550504,         3567480404,         3567480404,         3567480404,          281640304,          281640304,          281640304},
{           99396425,           99396425,           99396425,           99396425,         4942040902,         4942040902,       168273120703,       168273120703,       168273120703,       218753550504,       218753550504,       238753550504,       263567480404,       263567480404,          281640304,          281640304,         7254870305,         7254870305},
{           99396425,           99396425,           99396425,           99396425,           74777627,       148273120703,         8273120803,       168273120703,       168273120703,       208753550604,       218753550504,       218753550504,       263567480404,       263567480404,         8011050405,          281640304,         7254870305,         7254870305},
{             992731,           99396425,           99396425,           99396425,           74777627,       148273120703,       148273120703,       168273120703,       188753550604,       208753550604,       208753550504,       249204010505,       249204010505,       278011050405,       278011050405,         7254870305,         7254870305,         7254870306},
{             992731,           99396425,           99396425,           99396425,           74777627,       148273120703,       148273120803,         8273120703,       188753550604,       208753550604,       229204010505,       249204010505,       249204010505,         8011050405,       268011050406,         7254870305,         7254870306,         7254870306},
{             992731,           98567533,           98567533,           98567533,         7393781003,         7393781003,         8273120803,       178796520704,       178796520704,       208753550604,       229204010505,       249204010505,       259204010506,       259204010506,       268011050406,       298011050406,       297254870306,       297254870306},
{             992731,           98567533,           98567533,           98567533,           98567533,         7393781003,         8273120803,       178796520704,       188796520704,       209204010605,       209204010605,       259204010506,       259204010506,       259204010506,       289541020407,       289541020407,         9541020407,       337254870307},
{           65407434,           98567533,           98567533,           98567533,           98567533,           98567533,       178796520704,       178796520704,         8796520704,       209204010605,       209204010605,       249204010506,       259204010506,       259204010506,       289541020407,       289541020407,         9541020408,         9541020408},
{             994738,           98567533,           98567533,           98567533,           98567533,           98567533,           98567533,         8796520704,         8796520704,       173587300705,       209204010605,       239204010506,       249204010506,       289211680507,       269541020408,       319541020408,       319541020408,       319541020408},
{             994738,           99542939,           65407434,           98567533,           98567533,           98567533,         8796520704,         8796520704,         3587300705,         3587300705,       219204010606,       259211680507,       259211680507,       279211680507,       303632380409,       313632380409,       313632380409,       313632380409},
{           90995545,           99542939,           99542939,           98567533,           98567533,           98567533,           99542939,         8796520704,         3587300705,         9204010605,         9204010605,       259211680507,       259211680507,       259211680507,       299211680508,       313632380409,       348280540410,       348280540410},
{           90995545,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,       183587300705,         3587300705,         3587300705,         9204010605,       239211680607,       259211680507,       259211680507,       323632380410,       323632380410,       323632380410,       358280540411},
{             991848,             998544,             998544,           99542939,           99542939,           99542939,           99542939,           99542939,         3587300705,         3587300705,         9204010606,       259211680507,       259211680507,         9211680507,       303632380410,       323632380410,       358280540411,       358280540411},
{             991848,             991848,             998544,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         9204010606,         9204010606,       259211680507,       259211680507,         9211680507,       298280540411,       338280540411,       338280540411,       368280540412},
{             991848,             991848,             991848,           99435947,           99542939,           99542939,           99542939,           99542939,           99542939,        79204010606,       219211680607,         9211680607,         9211680507,         9211680508,         9211680508,       328280540411,       338280540412,       368280540412},
{1000000000000000000,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,       219211680607,         9211680607,         9211680508,         9211680508,       298280540410,       328280540411,       348280540410,       348280540410},
{1000000000000000000,             991848,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680607,         9211680607,         9211680508,         9211680508,         8280540410,       328280540411,1000000000000000000,1000000000000000000},
{1000000000000000000,             484707,             991848,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680608,1000000000000000000,1000000000000000000,             444040,1000000000000000000,             474805,1000000000000000000},
{1000000000000000000,1000000000000000000,             523597,             991848,             996954,             996954,             996954,           99435947,           99435947,           99435947,         9211680608,         9211680608,             384750,           99416144,           99416144,1000000000000000000,             474805,             474805},
{               5401,1000000000000000000,             465355,             465355,             465355,           99416144,             465355,           99416144,             465355,           99416144,           99416144,1000000000000000000,             384750,           99416144,           99416144,             474805,             474805,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,           99416144,             465355,           99416144,             465355,           99416144,           99416144,           99416144,             384750,           99416144,           99416144,             474805,             474805,             474805},
{               5401,1000000000000000000,              72160,             313697,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,             384750,           99416144,           99416144,             474805,             474805,             474805},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,           99416144,           99416144,           99416144,             384750,             384750,           99416144,           99416144,           99416144,             474805,             474805},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,1000000000000000000,             384750,           99416144,           99416144,           99416144,             474805,             474805},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,             384750,           99416144,           99416144,             474805,             474805},
{               5401,               5401,1000000000000000000,             970111,1000000000000000000,1000000000000000000,1000000000000000000,             505987,             505987,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,             384750,             384750,             474805},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             384750,             384750,1000000000000000000},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7010,                479,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               5605,                479,               5605,                479,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,                479,               5605,                479,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,1000000000000000000,                479,                479},
{               5401,               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479},
{               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479}
},
{
{           99933128,           99396425,           99396425,           74777627,         4980511202,         4942040902,       168273120703,       178273120703,       178273120703,         9183500603,       238753550504,       238753550504,         8753550504,         3567480404,         3567480404,          281640304,          281640304,          281640304,          281640304,         7254870305},
{           99933128,           99396425,           99396425,           99396425,         4980511202,         4942040902,       168273120703,       168273120703,       168273120703,       218753550504,       238753550504,       238753550504,       238753550504,       263567480404,       283567480404,          281640304,          281640304,         7254870305,         7254870305,         7254870305},
{           99933128,           99396425,           74777627,           74777627,         4980511202,       148273120703,         8273120803,       168273120703,       168273120703,       218753550604,       218753550604,       238753550504,       263567480404,       263567480404,         8011050405,         8011050405,         7254870305,         7254870305,         7254870306,         7254870306},
{             992731,           74777627,           74777627,           74777627,         4980511202,       148273120703,         8273120803,       168273120703,       208753550604,       208753550604,       208753550604,       249204010505,       259204010505,       259204010505,       278011050405,         8011050405,         7254870305,         7254870305,         7254870306,         7254870306},
{             992731,           74777627,           74777627,           74777627,         4980511202,       118273120803,         8273120803,       168273120703,       188796520704,       208753550604,       208753550604,       249204010505,       249204010505,       249204010505,       298011050406,       298011050406,       287254870305,         7254870306,         7254870306,         7254870307},
{           99134838,           98567533,           98567533,           98567533,           98567533,         8273120803,         8273120803,       178796520704,       188796520704,       208753550604,       229204010605,       229204010605,       279204010506,       279204010506,       279204010506,       298011050406,       298011050406,       297254870306,         7254870307,         7254870307},
{             994738,           98567533,           98567533,           98567533,           98567533,         7393781003,         8273120803,       178796520704,       188796520704,       209204010605,       229204010605,       229204010605,       259204010506,       279204010506,       279204010506,       289541020407,       289541020407,         9541020407,         7254870307,          896800308},
{             994738,           99542939,           98567533,           98567533,           98567533,           98567533,       178796520704,       178796520704,       188796520704,       203587300705,       229204010605,       259204010506,       259204010506,       259204010506,       289211680507,       319541020408,       319541020408,       329541020408,          896800408,       360896800308},
{             994738,           99542939,           98567533,           98567533,           98567533,           98567533,           82450739,         8796520704,         8796520704,       203587300705,       229204010605,       249204010506,       269211680507,       289211680507,       289211680507,       313632380409,       319541020408,       313632380409,         3632380409,       370896800308},
{             994738,           99542939,           99542939,           98567533,           98567533,           99542939,           99542939,         8796520804,         8796520704,       203587300705,       229204010605,       259211680507,       269211680507,       279211680507,       279211680507,       313632380409,       313632380409,       313632380409,         3632380409,       370896800309},
{           90995545,           82450739,           99542939,           99542939,           99542939,           99542939,           99542939,         8796520704,         3587300705,         3587300705,         9204010605,       249211680607,       249211680607,       279211680507,       299211680508,       299211680508,       348280540410,       348280540410,       348280540410,       370896800309},
{             991848,             998544,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         3587300705,         3587300705,         9204010605,       239211680607,       259211680507,       259211680507,       289211680507,       323632380410,       348280540410,       358280540411,       358280540411,       370896800309},
{             991848,             998544,             991848,           99542939,           99542939,           99542939,           99542939,           99542939,         1132450805,         3587300705,         3587300706,       239211680607,       259211680507,       279211680507,       279211680507,       328280540411,       358280540411,       358280540411,       378280540412,       378280540412},
{             991848,             991848,             991848,           99557643,           99542939,           99435947,           99874042,           99542939,           99435947,         3587300705,         3587300706,       229211680607,       259211680507,         9211680507,       299211680508,       299211680508,       338280540412,       368280540412,       378280540412,       378280540412},
{           73747661,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680607,         9211680607,       259211680608,       299211680508,         9211680508,       328280540411,       348280540410,       368280540412,       348280540410,       378280540410},
{             664993,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680607,         9211680607,         9211680508,         9211680508,         9211680508,       328280540411,       348280540410,       348280540410,       348280540410,       378280540410},
{             664993,             991848,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680608,         9211680608,         3599440510,       313599440510,       328280540411,       328280540411,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,           96575954,           96575954,             991848,             991848,             996954,           99435947,           99435947,           99435947,           99435947,           99435947,         9211680608,         9211680608,         3599440510,       313599440510,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,           96575954,           96575954,             996954,             996954,             996954,           99391758,           99435947,           99435947,           99435947,           99391758,           99391758,         9211680608,         3599440510,         3599440510,             474805,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,             465355,             465355,             465355,             465355,             465355,             465355,1000000000000000000,             465355,           99391758,           99391758,           99391758,             517967,           99416144,           99416144,             474805,             474805,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,             465355,             465355,           99416144,           99416144,             465355,             465355,           99416144,1000000000000000000,             517967,           99416144,           99416144,             474805,             474805,             474805,             517967,             555723},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,             517967,           99416144,           99416144,             474805,             474805,             474805,             474805,             555723},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,             474805,             474805,             474805,             474805,             474805},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,             718124,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,           99416144,             384750,           99416144,           99416144,           99416144,             474805,             474805,             474805,             474805},
{               5401,1000000000000000000,1000000000000000000,             718124,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,             384750,           99416144,           99416144,           99416144,           99416144,             474805,             474805,             474805},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,1000000000000000000,1000000000000000000,             384750,           99416144,           99416144,1000000000000000000,             474805,             474805,             474805},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,             505987,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             366155,1000000000000000000,1000000000000000000,             474805,1000000000000000000},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             474805,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               5605,                479,                479,                479,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               4314,                479,                479,               7010,                479,                479,                479,                479,1000000000000000000,1000000000000000000,                479,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479,                479,                479}
},
{
{           99933128,           99396425,           99396425,           74777627,         4980511202,         4942040902,       178273120703,       178273120703,       188273120703,       209183500603,       238753550504,       238753550504,       238753550504,         3567480404,         3567480404,         3567480404,          281640304,          281640304,          281640304,         7254870305,         7254870305},
{           99933128,           99396425,           74777627,           74777627,         4980511202,         4942041002,       168273120803,       168273120803,       178273120703,       209183500603,       228753550604,       238753550504,       238753550504,       273567480404,       283567480404,       283567480404,          281640304,          281640304,         7254870305,         7254870305,         7254870305},
{             992731,           74777627,           74777627,           74777627,         4980511202,         4942041002,       168273120803,       168273120803,       188273120703,       218753550604,       218753550604,       238753550504,       259204010505,       259204010505,       278011050405,         8011050405,         8011050405,         7254870305,         7254870305,         7254870306,         7254870306},
{             992731,           74777627,           98567533,           74777627,         4980511202,       148273120703,       168273120803,       168273120803,         8273120703,       208796520704,       208753550604,       259204010505,       259204010505,       259204010505,       278011050405,       278011050405,         8011050406,         7254870305,         7254870306,         7254870306,         7254870307},
{           65407434,           98567533,           98567533,           98567533,         4980511202,       117393781003,         8273120803,       168273120803,       188796520704,       188796520704,       208753550604,       249204010505,       249204010505,       259204010505,       279204010506,       298011050406,       298011050406,       357254870305,         7254870306,         7254870307,         7254870307},
{             994738,           98567533,           98567533,           98567533,           98567533,         7393781003,         7393781003,         8273120803,       188796520704,       188796520704,       229204010605,       229204010605,       289204010506,       279204010506,       279204010506,       298011050406,       289541020407,         9541020407,         9541020407,         7254870307,          896800308},
{             994738,           98567533,           98567533,           98567533,           98567533,         7393781003,         7393781003,       178796520704,       198796520704,       198796520704,       229204010605,       229204010605,       279204010506,       279204010506,       309211680507,       309211680507,       289541020407,         9541020407,         9541020407,          896800308,          896800308},
{             994738,           98567533,           98567533,           98567533,           98567533,           98567533,       178796520704,       178796520704,       188796520704,       203587300705,       229204010605,       229204010605,       259204010506,       299211680507,       299211680507,       309211680507,       319541020408,       329541020408,       350896800408,       370896800308,       370896800308},
{           90995545,           99542939,           99542939,           98567533,           98567533,           98567533,           99542939,         8796520704,         8796520704,         8796520704,       229204010605,       229204010605,       289211680507,       289211680507,       289211680507,       289211680507,       313632380409,       313632380409,       313632380409,       370896800308,       370896800309},
{             991848,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,         8796520804,         8796520804,       203587300705,       229204010605,         9204010605,       269211680607,       289211680507,       309211680508,       309211680508,       348280540410,       348280540410,       368280540410,       368280540410,         8280540410},
{             991848,           82450739,           82450739,           99542939,           99542939,           99542939,           99542939,         8796520804,         3587300705,       203587300705,         3587300705,       249211680607,       249211680607,       289211680507,       299211680508,       309211680508,       358280540410,       348280540410,       348280540410,       368280540410,       368280540411},
{             991848,           82450739,           82450739,           99542939,           99542939,           99542939,           99542939,           99542939,         1132450805,       183587300705,         3587300705,       249211680607,       259211680507,       289211680507,       289211680507,       309211680508,       368280540411,       368280540411,       368280540411,       388280540412,       388280540412},
{             991848,             991848,           99435947,           82450739,           99435947,           99435947,           99435947,           99130344,         1132450805,         3587300705,         3587300706,       249211680607,       259211680507,       259211680507,       299211680508,       299211680508,       358280540411,       368280540411,       388280540412,       388280540412,       388280540412},
{           73747661,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         3587300705,         3587300706,       249211680607,       259211680607,       299211680508,       299211680508,       299211680508,       333599440510,       368280540412,       378280540412,       408280540413,       408280540413},
{           73747661,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         3587300706,         9211680607,       259211680608,       299211680508,       299211680508,       299211680508,       333599440510,       348280540410,       378280540410,       378280540410,       398280540410},
{             664993,             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         1166310707,         1166310707,       259211680608,         9211680608,         9211680508,       328280540411,       358280540411,       348280540410,       348280540410,       378280540410,       398280540410},
{             664993,             991848,             991848,             991848,             996954,             996954,           99435947,           99435947,           99435947,           99435947,           99343354,         9211680608,         9211680608,         9999010609,       313599440510,       313599440510,       328280540411,         8280540410,1000000000000000000,1000000000000000000,           29591338},
{1000000000000000000,           96575954,             991848,             996954,             996954,             996954,           99391758,           99435947,           99435947,           99391758,           99391758,         9211680608,         9211680608,         9999010609,       313599440510,       313599440510,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{1000000000000000000,           96575954,           96575954,             996954,             996954,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,         9999010609,       313599440510,       313599440510,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,             465355,           96575954,           96575954,           96575954,           96575954,           96575954,           99391758,           99391758,           99391758,           99391758,           99391758,             517967,         9999010609,           99416144,             474805,             474805,1000000000000000000,1000000000000000000,             517967,             555723},
{               5401,1000000000000000000,1000000000000000000,             457431,             465355,             465355,             465355,             465355,             465355,1000000000000000000,           96575954,1000000000000000000,             517967,             517967,             517967,             474805,             474805,1000000000000000000,1000000000000000000,             555723,             555723},
{               5401,1000000000000000000,1000000000000000000,             476873,             465355,             465355,             465355,             465355,             465355,           99416144,           96575954,           99416144,             517967,           99416144,           99416144,             474805,             474805,             474805,             517967,             555723,             555723},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             465355,1000000000000000000,             465355,           99416144,           99416144,           99416144,             517967,           99416144,           99416144,             474805,             474805,             474805,             517967,             555723,             555723},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,             474805,             474805,             474805,             555723,             555723},
{               5401,               5401,              36093,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,           99416144,           99416144,           99416144,           99416144,           99416144,             474805,             555723,             555723},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,1000000000000000000,1000000000000000000,           99416144,           99416144,1000000000000000000,           99416144,             474805,             555723,             555723},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,1000000000000000000,1000000000000000000,1000000000000000000,             366155,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               9365,1000000000000000000,1000000000000000000,             977581,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             505987,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,1000000000000000000,               5985,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             567247},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7010,               7010,               7359,                479,                479,               1907,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,                479,                479,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               5605,                479,                479,                479,                479,                479,1000000000000000000,                479,                479,                479,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               7010,                479,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               6618,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,                479,                479,                479,                479,                479,                479,                479,                479}
},
{
{           99933128,           99396425,           74777627,       104980511202,         4980511202,       134942041002,       168273120803,       168273120803,       188273120703,       188273120703,       228753550604,       238753550504,       238753550504,       238753550504,         3567480404,         3567480404,         3567480404,          281640304,          281640304,          281640304,         7254870305,         7254870305},
{           99933128,           74777627,           74777627,           74777627,         4980511202,         4942041002,       168273120803,       168273120803,       188273120703,       188273120703,       228753550604,       238753550604,       238753550504,       238753550504,       283567480404,       283567480404,         8011050405,          281640304,         7254870305,         7254870305,         7254870305,         7254870305},
{             992731,           74777627,           74777627,           74777627,         4980511202,         4942041002,       168273120803,       168273120803,       188273120703,       218753550604,       218753550604,       238753550604,       259204010505,       259204010505,       259204010505,       278011050405,         8011050405,         2756520304,         7254870305,         7254870305,         7254870306,         7254870306},
{             992731,           98567533,           98567533,           98567533,         4980511202,         8273120803,       168273120803,       168273120803,       168273120703,       208796520704,       208796520704,       259204010505,       259204010505,       259204010505,       259204010505,       278011050405,       278011050405,         2756520304,         7254870305,         7254870306,         7254870306,         7254870307},
{           65407434,           98567533,           98567533,           98567533,           98567533,       147393781003,         8273120903,       168273120803,       198796520704,       208796520704,       208796520704,       229204010605,       229204010605,       289204010506,       289204010506,       289204010506,       328011050406,       328011050406,       367254870305,         7254870306,         7254870307,          896800308},
{             994738,           65407434,           98567533,           98567533,           98567533,         7393781003,         7393781003,         8273120803,         8796520804,       208796520704,       229204010605,       229204010605,       229204010605,       289204010506,       289204010506,       289204010506,         3782200201,         9541020407,         9541020407,       387254870306,         7254870307,          896800308},
{             994738,           65407434,           98567533,           98567533,           98567533,           98567533,         7393781003,       178796520704,       198796520704,       198796520704,       203587300705,       229204010605,       279204010506,       279204010506,       309211680507,       309211680507,       309211680507,         9541020407,         9541020407,       357254870306,          896800308,          896800308},
{           90995545,           99542939,           99542939,           98567533,           99542939,           99542939,        37393781003,          689050904,       198796520704,         8796520704,       203587300705,       229204010605,       269204010606,       269204010606,       309211680507,       309211680507,       309211680507,       350896800408,       350896800408,       350896800408,       370896800308,       420896800308},
{             991848,           99792242,           99542939,           99542939,           99542939,           99542939,           99542939,         8796520704,       198796520704,         8796520704,       203587300705,       229204010605,       289211680507,       289211680507,       289211680507,       289211680507,       339211680508,       313632380409,       313632380409,       383632380409,       383632380409,         8280540410},
{             991848,           99792242,           99792242,           99542939,           99542939,           99542939,           99542939,         8796520804,         8796520804,       203587300705,         3587300705,         9204010605,       269211680607,       269211680607,       309211680508,       309211680508,       309211680508,       368280540410,       368280540410,       368280540410,       388280540410,       388280540410},
{             991848,           90995545,           99792242,           99542939,           82450739,           99542939,           99542939,         8796520904,         8796520804,         3587300705,         3587300705,         3587300706,       269211680607,       289211680507,       289211680507,       309211680508,       309211680508,       368280540410,       368280540411,       368280540411,       368280540411,       368280540411},
{             991848,             991848,           99435947,           82450739,           82450739,           82450739,           99435947,         8796520904,         1132450805,         1132450805,         3587300705,       249211680607,       269211680607,       259211680507,       289211680507,       309211680508,       309211680509,       349211680509,       368280540411,       388280540412,       418280540412,       418280540412},
{             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,         1132450805,         1132450805,         3587300706,         3587300706,       259211680607,       259211680507,       299211680508,       299211680508,       333599440510,       333599440510,       388280540412,       388280540412,       408280540413,       418280540413},
{           73747661,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,         3587300706,         3587300706,         3587300706,       259211680607,       299211680508,       299211680508,       299211680508,       333599440510,       333599440510,       388280540412,       408280540413,       418280540413,       418280540413},
{           73747661,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,       301166310707,         3587300706,         1166310707,       259211680608,       259211680608,       299211680508,       299211680508,       333599440510,       333599440510,       348280540410,       378280540410,       418280540410,         8280540410},
{             991848,             991848,             991848,             996954,             996954,           99435947,           99435947,           99435947,           99435947,           99435947,         1166310707,         1166310707,       259211680608,         9211680608,       313599440510,       333599440510,       333599440510,       313599440510,         8280540410,       378280540410,         8280540410,       428280540411},
{             664993,             991848,             996954,             996954,             996954,           99391758,           99391758,           99435947,           99391758,           99391758,           99391758,         1166310707,         9211680608,         9211680608,       313599440510,       313599440510,       333599440510,       333599440510,       378280540411,       378280540411,       378280540411,       428280540411},
{1000000000000000000,           96575954,             996954,             996954,             996954,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,         9999010609,       313599440510,       313599440510,       333599440510,       333599440510,1000000000000000000,1000000000000000000,           29591338,           29591338},
{1000000000000000000,           96575954,           96575954,             996954,           99138966,           99138966,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,         9999010609,       313599440510,         3599440510,       333599440510,             527630,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,             465355,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,           99391758,           96575954,           99391758,           99391758,             546365,             546365,             474805,             474805,             527630,             527630,1000000000000000000,1000000000000000000,             555723},
{               5401,1000000000000000000,1000000000000000000,             465355,             465355,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,1000000000000000000,             517967,             546365,             546365,             474805,             517967,             527630,             555723,             555723,             555723,             555723},
{               5401,1000000000000000000,1000000000000000000,             465355,             465355,             465355,             465355,             465355,           96575954,           96575954,           96575954,1000000000000000000,             517967,             546365,             546365,             474805,             555723,             527630,             555723,             555723,             555723,             555723},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             465355,1000000000000000000,1000000000000000000,             527390,             527390,           96575954,           99416144,             517967,             546365,             555723,             555723,             555723,             555723,             517967,             555723,             555723,             555723},
{               5401,             726558,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             527390,             527390,           99416144,           99416144,           99416144,           99416144,             474805,             474805,             555723,             517967,             555723,             555723,             555723},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           99416144,1000000000000000000,           99416144,           99416144,           99416144,           99416144,           99416144,           99416144,             555723,             555723,             555723},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             428009,             517967,             517967,             555723,             517967,             555723},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             722843,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             517967,1000000000000000000,             466659,1000000000000000000},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             992565},
{               5401,               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7010,1000000000000000000,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               7359,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               7010,               7010,               7010,                479,                479,                479,                479,                479,                479,                479,                479,                479,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               7010,               7010,                479,                479,                479,                479,                479,                479,                479,                479,                479,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               6618,                479,               6618,                479,                479,                479,                479,                479,                479}
},
{
{           65407434,           99396425,           74777627,       104980511202,         4980511202,         4980511202,       168273120803,       168273120803,       188273120703,       188273120703,       238753550604,       238753550604,       238753550504,       238753550504,       287536820504,       273567480404,         3567480404,         8011050405,          281640304,          281640304,          281640304,         7254870305,         7254870305,         7254870305},
{           65407434,           74777627,           74777627,           74777627,         4980511202,         4980511202,       168273120803,       168273120803,       168273120803,       188273120703,       238753550604,       238753550604,       238753550604,       238753550504,       283567480404,       283567480404,         3567480405,         8011050405,          281640304,         7254870305,         7254870305,         7254870305,         7254870305,         7254870305},
{           65407434,           74777627,           98567533,           98567533,         4980511202,         4980511202,         7393781003,       168273120803,         8273120803,       208796520704,       208796520704,       238753550604,       259204010505,       259204010505,       259204010505,         3567480505,       278011050405,         8011050405,         2756520304,         7254870305,         7254870305,         7254870306,         7254870306,         7254870306},
{           65407434,           98567533,           98567533,           98567533,           98567533,       157393781003,         7393781003,       168273120803,         8273120803,       208796520704,       208796520704,       238753550604,       259204010505,       259204010505,       259204010505,       278011050405,       278011050405,         8011050406,         7254870305,         7254870305,         7254870306,         7254870306,         7254870307,         7254870307},
{             994738,           98567533,           98567533,           98567533,           98567533,       147393781003,         7393781003,       178273120803,         8273120803,       208796520704,       208796520704,       229204010605,       229204010605,       289204010506,       289204010506,       289204010506,       328011050406,       328011050406,       377254870305,       367254870305,         7254870306,         7254870307,          896800308,          896800308},
{             994738,           65407434,           98567533,           98567533,           98567533,         7393781003,         7393781003,         8273120903,       208796520704,       208796520704,       208796520704,       229204010605,       229204010605,       289204010506,       289204010506,       289204010506,       309211680507,       349541020407,       349541020407,       387254870306,       387254870306,          896800308,          896800308,          896800309},
{           90995545,           99542939,           99542939,           98567533,           98567533,           98567533,         7393781003,         8273120903,       208796520704,       208796520704,       203587300705,       203587300705,         9204010605,       269204010606,       309211680507,       309211680507,       319211680507,       319211680507,       350896800408,       350896800408,         7254870307,          896800308,          896800308,          896800309},
{           90995545,           99542939,           99542939,           99542939,           99542939,           99542939,           99542939,          689050904,         8796520804,         8796520704,       203587300705,       203587300705,         9204010605,       269204010606,       309211680507,       309211680507,       309211680507,       339211680508,       350896800408,       383632380409,         3632380409,       420896800308,       420896800308,          896800309},
{             991848,           99792242,           82450739,           99542939,           99542939,           99542939,           99542939,         8796520804,         8796520804,       203587300705,       203587300705,         3587300705,       269211680607,       289211680507,       289211680507,       339211680508,       339211680508,       339211680508,       313632380409,       383632380409,       383632380409,       420896800308,       420896800309,       410896800310},
{             991848,           90995545,           82450739,           82450739,           99542939,           99542939,           99542939,         8796520904,       203587300705,       203587300705,       203587300705,         3587300705,       269211680607,       269211680607,       289211680507,       309211680508,       309211680508,       299211680508,       368280540410,       388280540410,       388280540410,       388280540410,         8280540411,       410896800310},
{             991848,           99435947,           99435947,           82450739,           82450739,           99542939,           99435947,         8796520904,         1132450805,         1132450805,         3587300705,         3587300706,         1166310707,       289211680507,       289211680507,         9211680507,       309211680508,       349211680509,       349211680509,       368280540411,       368280540411,       368280540411,         8280540411,       410896800310},
{             991848,             991848,           99435947,           82450739,           82450739,           99435947,           99435947,           99435947,         1132450805,         1132450805,         3587300705,         3587300706,         1166310707,       289211680507,       289211680507,         9211680507,       349211680509,       349211680509,       333599440510,       418280540412,       418280540412,       418280540413,       418280540412,       410896800310},
{             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,         1132450805,         1132450805,         3587300706,         3587300706,         1166310707,         9211680607,       299211680508,       299211680508,       333599440510,       333599440510,       333599440510,       418280540412,       418280540413,       418280540413,       418280540413,       410896800310},
{             991848,             991848,             991848,           99435947,           99435947,           99435947,           99435947,           99435947,           99435947,       301166310707,         3587300706,         3587300706,         1166310707,         9211680607,       299211680508,       299211680508,         9211680508,       333599440510,       333599440510,       418280540410,       418280540413,       388280540410,         8280540410,       410896800310},
{           73747661,             991848,             996954,             996954,           99435947,           99435947,           99435947,           99435947,           99435947,       301166310707,         1166310707,         1166310707,         1166310707,         9211680608,         9211680608,         9211680508,       333599440510,       333599440510,       333599440510,       418280540410,       418280540410,         8280540410,         8280540410,       410896800310},
{           73747661,             991848,             996954,             996954,           99391758,           99391758,           99391758,           99435947,           99391758,           99391758,         1166310707,         1166310707,         1166310707,         9211680608,         9211680608,       333599440510,       333599440510,       313599440510,         8280540510,       378280540411,       428280540411,       428280540411,         8280540411,         8371260204},
{             664993,             991848,             996954,             996954,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,         9999010609,         9999010609,       333599440510,       333599440510,       333599440510,         3599440510,       378280540411,       428280540411,         8280540412,         8280540411,           29591338},
{             664993,             724300,             996954,             996954,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,         9999010609,         9999010609,       313599440510,         3599440510,         3599440510,1000000000000000000,         8280540411,           29591338,           29591338,           29591338,           29591338},
{1000000000000000000,           96575954,           96575954,             994466,           99138966,           73747661,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,           99391758,         9999010609,         9999010609,         3599440510,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           29591338,           29591338,           29591338,           29591338},
{               5401,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,             649405,           96575954,           99391758,           96575954,           96575954,         9999010610,         9999010609,         9999010610,1000000000000000000,             645361,             527630,             527630,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,           29591338},
{               5401,1000000000000000000,1000000000000000000,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,           96575954,             517967,             546365,             546365,             555723,             555723,             527630,             555723,1000000000000000000,1000000000000000000,             628405,             628405,             628405},
{               5401,1000000000000000000,1000000000000000000,             465355,             465355,             465355,             465355,           96575954,           96575954,           96575954,           96575954,           96575954,             517967,             546365,             546365,             555723,             555723,             555723,             555723,             555723,             555723,             628405,             628405,             628405},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             465355,             465355,             527390,             527390,             527390,             527390,           96575954,             517967,             555723,             555723,             555723,             517967,             555723,             517967,             555723,             555723,             628405,             628405,             628405},
{               5401,             983396,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             527390,             527390,             527390,           99416144,             517967,             555723,             517967,           99416144,             517967,             555723,             517967,             555723,             555723,             555723,             628405,             628405},
{               5401,             726558,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             517967,           99416144,           99416144,           99416144,             517967,             555723,             517967,             555723,             555723,             555723,             555723,             555723},
{               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             517967,             517967,             517967,             517967,             517967,             517967,             517967,             517967},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,             517967,             517967,             517967,             517967,1000000000000000000,             517967},
{               5401,               5401,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               5401,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,                479,                479,               9339,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               9339,               7010,               7010,               9166,               2314,                479,                479,                479,                479,                479,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000,1000000000000000000},
{               5401,               7359,               7359,               7359,               7359,               7359,               7359,               7359,               5605,               9339,               6618,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479,                479,                479,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               6618,               6618,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479,                479,1000000000000000000},
{               5401,               5401,               7359,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               6618,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479,                479,                479},
{               5401,               5401,               7359,               7359,               7359,               5605,               5605,               5605,               5605,               5605,               5605,               5605,               6618,               6618,                479,                479,                479,                479,                479,                479,                479,                479,                479,                479}
}
};

// N * Q * D = 14 * 40 * 24 = 6720
void CalcNNDDQQ()
{
  NN = (N - 30) / 5;
  NN = min(NN, 13);  // 14
  DD = D - 2;        // 24
  vector<int> qv;
  rep(i, 40)
  {
    double si = 1.0 + 0.1 * (i + 1);
    qv.push_back(round(pow(2, si) * N));
    if (i == 39) {
      qv[i] *= 10;
    }
  }
  QQ = lower_bound(qv.begin(), qv.end(), Q) - qv.begin();  // 40
}

void GenerateLocalItems()
{
  rep(i, N)
  {
    double num;
    while (true) {
      num = dist(engine);
      if (num < 100000.0 * N / D) {
        break;
      }
    }
    W[i] = round(num);
    W[i] = max(W[i], 1LL);
  }
}

void GenerateCase(int _n = -1, int _d = -1, int _q = -1)
{
  N = Rand() % 71 + 30;
  if (_n != -1) N = _n;
  D = Rand() % (N / 4 - 1) + 2;
  if (_d != -1) D = _d;
  Q = round(pow(2, rand01() * 4.0 + 1.0) * N);
  if (_q != -1) Q = _q;
  GenerateLocalItems();
}

void GenerateNNDDQQ(int _nn = -1, int _qq = -1, int _dd = -1)
{
  NN = Rand() % 14;
  if (_nn != -1) {
    NN = _nn;
  }
  QQ = Rand() % 40;
  if (_qq != -1) {
    QQ = _qq;
  }
  DD = Rand() % haipara[NN][QQ].size();
  if (_dd != -1) {
    DD = _dd;
  }
}

void GeneratecaseFromNNDDQQ()
{
  if (NN == 13) {
    N = Rand() % 6 + 30 + NN * 5;
  }
  else {
    N = Rand() % 5 + 30 + NN * 5;
  }
  double dou = rand01() * 0.1;
  Q = round(pow(2, 1.0 + 0.1 * QQ + dou) * N);
  D = DD + 2;
  GenerateLocalItems();
}

vector<int> pseudoItemsAll[101][26];
void GeneratePseudoItems()
{
  if (!pseudoItemsAll[N][D].empty()) {
    pseudoItems = pseudoItemsAll[N][D];
  }
  else {
    double pseudoSum[110] = {};
    vector<double> nums(110);
    rep(loop, 100)
    {
      rep(i, N)
      {
        while (true) {
          nums[i] = dist(engine);
          if (nums[i] < 100000.0 * N / D) {
            break;
          }
        }
        nums[i] = max(nums[i], 1.0);
      }
      sort(nums.begin(), nums.begin() + N);
      rep(i, N) { pseudoSum[i] += nums[i]; }
    }
    pseudoItems.clear();
    rep(i, N) { pseudoItems.push_back(round(pseudoSum[i] / 1000)); }
    pseudoItemsAll[N][D] = pseudoItems;
  }
}

// 入力受け取り
void Input(int problemNum)
{
  if (mode <= 2) {
    if (mode == 0) {
      // 標準入力する
      cin >> N >> D >> Q;
    }
    else if (mode <= 2) {
      // ファイル入力する
      string fileNameIfs = "./in/";
      string strNum;
      rep(i, 4)
      {
        strNum += (char)(problemNum % 10 + '0');
        problemNum /= 10;
      }
      reverse(strNum.begin(), strNum.end());
      fileNameIfs += strNum + ".txt";

      ifstream ifs(fileNameIfs);

      ifs >> N >> D >> Q;
      rep(i, N) { ifs >> W[i]; }
    }
    CalcNNDDQQ();
  }
}

// 出力ファイルストリームオープン
void OpenOfs(int probNum, ofstream& ofs)
{
  if (mode < 1000000) {
    if (mode != 0) {
      string fileNameOfs = "./out/";
      string strNum;
      rep(i, 4)
      {
        strNum += (char)(probNum % 10 + '0');
        probNum /= 10;
      }
      reverse(strNum.begin(), strNum.end());
      fileNameOfs += strNum + ".txt";

      ofs.open(fileNameOfs);
    }
  }
}

bool ErrorCheck()
{
  rep(i, Q)
  {
    if (l[i].empty() || r[i].empty()) {
      cerr << "NG ErrorCheck1 : " << i << endl;
      return false;
    }
    if (l[i].size() + r[i].size() > N) {
      cerr << "NG ErrorCheck2 : " << i << endl;
      return false;
    }
  }

  int cnt[110] = {};
  rep(i, Q)
  {
    rep(j, N) cnt[j] = 0;
    for (auto x : l[i]) cnt[x]++;
    for (auto y : r[i]) cnt[y]++;
    rep(j, N)
    {
      if (cnt[j] >= 2) {
        cerr << "NG ErrorCheck3 : " << i << endl;
        return false;
      }
    }
  }

  return true;
}

// スコア計算
ll CalcScore()
{
  double t[30] = {};
  rep(i, N) { t[ans[i]] += W[i]; }
  double t_ave = 0;
  rep(i, D) { t_ave += t[i]; }
  t_ave /= D;
  double V = 0;
  rep(i, D) { V += (t[i] - t_ave) * (t[i] - t_ave); }
  V /= D;
  return 1 + round(100.0 * sqrt(V));
}

char LocalQuery(int turn)
{
  ll sumL = 0, sumR = 0;
  rep(j, l[turn].size()) { sumL += W[l[turn][j]]; }
  rep(j, r[turn].size()) { sumR += W[r[turn][j]]; }
  if (sumL < sumR) {
    return '<';
  }
  else if (sumL == sumR) {
    return '=';
  }
  else {
    return '>';
  }
}

int karusa[110];
char PseudoItemsQuery(int turn)
{
  ll sumL = 0, sumR = 0;
  rep(j, l[turn].size()) { sumL += pseudoItems[karusa[l[turn][j]]]; }
  rep(j, r[turn].size()) { sumR += pseudoItems[karusa[r[turn][j]]]; }
  if (sumL < sumR) {
    return '<';
  }
  else if (sumL == sumR) {
    return '=';
  }
  else {
    return '>';
  }
}

char PseudoItemsQueryGroup(vector<int> vl, vector<int> vr)
{
  ll sumL = 0, sumR = 0;
  rep(j, vl.size()) { sumL += pseudoItems[vl[j]]; }
  rep(j, vr.size()) { sumR += pseudoItems[vr[j]]; }
  if (sumL < sumR) {
    return '<';
  }
  else if (sumL == sumR) {
    return '=';
  }
  else {
    return '>';
  }
}

map<pair<vector<int>, vector<int>>, char> calledMap;
int queryCount = 0;
char Query(int& turn)
{
  queryCount++;
  bool isUse = false;
  if (mode < 1000000) {
    if (queryCount % 100 == 0) {
      endTime = clock();
    }
    nowTime = ((double)endTime - startTime) / CLOCKS_PER_SEC;
    if (nowTime < TL) {
      isUse = true;
    }
  }
  else {
    if (queryCount < 10000) {
      isUse = true;
    }
  }

  if (isUse) {
    if (calledMap.find(make_pair(l[turn], r[turn])) != calledMap.end()) {
      char c = calledMap[make_pair(l[turn], r[turn])];
      l[turn].clear();
      r[turn].clear();
      return c;
    }
  }

  if (turn >= Q) {
    // WA対策
    l[turn].clear();
    r[turn].clear();
    return '>';
  }

  if (nowTime > TL) {
    if (l[turn].empty()) {
      l[turn].clear();
      r[turn].clear();
      l[turn].push_back(0);
      r[turn].push_back(1);
      if (mode == 0) {
        cout << l[turn].size() << ' ' << r[turn].size();
        rep(j, l[turn].size()) { cout << ' ' << l[turn][j]; }
        rep(j, r[turn].size()) { cout << ' ' << r[turn][j]; }
        cout << endl;
        fflush(stdout);
        cin >> C[turn];
      }
      else {
        C[turn] = LocalQuery(turn);
      }
      rep(i, N) { answers[turn][i] = ans[i]; }

      turn++;
      if (turn > 0) {
        comments[turn] = comments[turn - 1];
      }
      return '<';
    }
    if (r[turn].empty()) {
      l[turn].clear();
      r[turn].clear();
      l[turn].push_back(0);
      r[turn].push_back(1);
      if (mode == 0) {
        cout << l[turn].size() << ' ' << r[turn].size();
        rep(j, l[turn].size()) { cout << ' ' << l[turn][j]; }
        rep(j, r[turn].size()) { cout << ' ' << r[turn][j]; }
        cout << endl;
        fflush(stdout);
        cin >> C[turn];
      }
      else {
        C[turn] = LocalQuery(turn);
      }
      rep(i, N) { answers[turn][i] = ans[i]; }

      turn++;
      if (turn > 0) {
        comments[turn] = comments[turn - 1];
      }
      return '>';
    }
  }

  if (l[turn].empty()) {
    l[turn].clear();
    r[turn].clear();
    return '<';
  }
  if (r[turn].empty()) {
    l[turn].clear();
    r[turn].clear();
    return '>';
  }

  if (mode == 0) {
    cout << l[turn].size() << ' ' << r[turn].size();
    rep(j, l[turn].size()) { cout << ' ' << l[turn][j]; }
    rep(j, r[turn].size()) { cout << ' ' << r[turn][j]; }
    cout << endl;
    fflush(stdout);
    cin >> C[turn];
  }
  else {
    C[turn] = LocalQuery(turn);
  }
  rep(i, N) { answers[turn][i] = ans[i]; }

  if (true) {
    calledMap[make_pair(l[turn], r[turn])] = C[turn];
    char c2 = '=';
    if (C[turn] == '<') {
      c2 = '>';
    }
    else if (C[turn] == '>') {
      c2 = '<';
    }
    calledMap[make_pair(r[turn], l[turn])] = c2;
  }

  turn++;
  if (turn > 0) {
    comments[turn] = comments[turn - 1];
  }
  return C[turn - 1];
}

bool IsAlreadyQuery(const vector<int>& vl, const vector<int>& vr)
{
  if (calledMap.find(make_pair(vl, vr)) != calledMap.end()) {
    return true;
  }
  return false;
}

char QueryMapDirectly(const vector<int>& vl, const vector<int>& vr)
{
  if (calledMap.find(make_pair(vl, vr)) != calledMap.end()) {
    return calledMap[make_pair(vl, vr)];
  }
  return '?';
}

int myQueue[11000][2];
int query1Count;
char Query1(int& turn, int lhs, int rhs)
{
  query1Count++;
  if (query1Count % 100 == 0) {
    endTime = clock();
    nowTime = ((double)endTime - startTime) / CLOCKS_PER_SEC;
  }
  if (nowTime > TL - 0.1) {
    cerr << "Assert Query1" << endl;
  }
  if (hikaku[lhs][rhs] != -2 && nowTime < TL - 0.1) {
    if (hikaku[lhs][rhs] == -1) {
      return '<';
    }
    if (hikaku[lhs][rhs] == 0) {
      return '=';
    }
    if (hikaku[lhs][rhs] == 1) {
      return '>';
    }
  }
  l[turn].push_back(lhs);
  r[turn].push_back(rhs);
  char c = Query(turn);
  {
    int head = 0;
    int tail = 0;
    myQueue[tail][0] = lhs;
    myQueue[tail][1] = rhs;
    tail++;
    if (c == '<') {
      hikaku[lhs][rhs] = -1;
      hikaku[rhs][lhs] = 1;
    }
    else if (c == '=') {
      hikaku[lhs][rhs] = 0;
      hikaku[rhs][lhs] = 0;
    }
    else {
      hikaku[lhs][rhs] = 1;
      hikaku[rhs][lhs] = -1;
    }
    while (head < tail) {
      int x = myQueue[head][0];
      int y = myQueue[head][1];
      head++;
      int z = hikaku[x][y];
      rep(i, N)
      {
        if (z == -1) {
          if (hikaku[i][y] == -2) {
            if (hikaku[i][x] == -1 || hikaku[i][x] == 0) {
              hikaku[i][y] = -1;
              hikaku[y][i] = 1;
              myQueue[tail][0] = i;
              myQueue[tail][1] = y;
              tail++;
            }
          }
          else if (hikaku[x][i] == -2) {
            if (hikaku[y][i] == -1 || hikaku[y][i] == 0) {
              hikaku[x][i] = -1;
              hikaku[i][x] = 1;
              myQueue[tail][0] = i;
              myQueue[tail][1] = x;
              tail++;
            }
          }
        }
        else if (z == 0) {
          if (hikaku[i][y] == -2) {
            if (hikaku[i][x] != -2) {
              hikaku[i][y] = hikaku[i][x];
              hikaku[y][i] = hikaku[x][i];
              myQueue[tail][0] = i;
              myQueue[tail][1] = y;
              tail++;
            }
          }
          else if (hikaku[x][i] == -2) {
            if (hikaku[i][y] != -2) {
              hikaku[i][x] = hikaku[i][y];
              hikaku[x][i] = hikaku[y][i];
              myQueue[tail][0] = i;
              myQueue[tail][1] = x;
              tail++;
            }
          }
        }
        else {
          if (hikaku[i][y] == -2) {
            if (hikaku[i][x] == 1 || hikaku[i][x] == 0) {
              hikaku[i][y] = 1;
              hikaku[y][i] = -1;
              myQueue[tail][0] = i;
              myQueue[tail][1] = y;
              tail++;
            }
          }
          else if (hikaku[x][i] == -2) {
            if (hikaku[y][i] == 1 || hikaku[y][i] == 0) {
              hikaku[x][i] = 1;
              hikaku[i][x] = -1;
              myQueue[tail][0] = i;
              myQueue[tail][1] = x;
              tail++;
            }
          }
        }
      }
    }
  }
  return c;
}

char QueryGroup(int& turn, int lgId, int rgId)
{
  rep(i, N)
  {
    if (ans[i] == lgId) {
      l[turn].push_back(i);
    }
    if (ans[i] == rgId) {
      r[turn].push_back(i);
    }
  }
  char c = Query(turn);
  return c;
}

void DummyQuery(int& countQ)
{
  while (countQ < Q) {
    l[countQ].push_back(0);
    r[countQ].push_back(1);
    if (mode == 0) {
      cout << l[countQ].size() << ' ' << r[countQ].size();
      rep(j, l[countQ].size()) { cout << ' ' << l[countQ][j]; }
      rep(j, r[countQ].size()) { cout << ' ' << r[countQ][j]; }
      cout << endl;
      fflush(stdout);
      cin >> C[countQ];
    }
    else {
      C[countQ] = LocalQuery(countQ);
    }
    rep(i, N) { answers[countQ][i] = ans[i]; }

    countQ++;
    if (countQ > 0) {
      comments[countQ] = comments[countQ - 1];
    }
  }
}

int memory_SwapNeighbor1[110];
vector<int> DItems[30];
void ResetMemory()
{
  rep(i, 110) { memory_SwapNeighbor1[i] = 0; }
  rep(i, 30)
  {
    DItems[i].clear();
  }
}

// 1個移動
void Move1(int& countQ, int cutLine = 999)
{
  int x = Rand() % D;
  int loop = 0;
  while (true) {
    loop++;
    if (loop >= 100) {
      return;
    }
    x = Rand() % D;
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  int y = Rand() % D;
  while (x == y) {
    y = Rand() % D;
  }
  vector<int> vx;
  rep(j, N)
  {
    if (ans[j] == x) {
      vx.push_back(j);
    }
  }
  int z = vx[Rand() % vx.size()];

  if (cutLine < 100) {
    int win = 0;
    int lose = 0;
    rep(j, N)
    {
      if (hikaku[z][j] == 1) {
        win++;
      }
      else if (hikaku[z][j] == -1) {
        lose++;
      }
    }
    if (win + lose >= cutLine && win >= lose) {
      return;
    }
  }

  rep(j, N)
  {
    if (ans[j] == x && j != z) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y) {
      r[countQ].push_back(j);
    }
  }

  char c = Query(countQ);
  if (c == '>') {
    ans[z] = y;
    comments[countQ] += "Move1 ";
    ResetMemory();
  }
}

// 戻り値：移動先グループ
int Move1_Specify(int& countQ, int groupId)
{
  int x = groupId;
  int y = Rand() % D;
  while (x == y) {
    y = Rand() % D;
  }
  vector<int> vx;
  rep(j, N)
  {
    if (ans[j] == x) {
      vx.push_back(j);
    }
  }
  if (vx.size() <= 1) {
    return -1;
  }
  int z = vx[Rand() % vx.size()];

  rep(j, N)
  {
    if (ans[j] == x && j != z) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y) {
      r[countQ].push_back(j);
    }
  }

  char c = Query(countQ);
  if (c == '>') {
    ans[z] = y;
    comments[countQ] += "Move1 ";
    ResetMemory();
    return y;
  }
  return -1;
}


void MoveSmall1(const vector<int>& items, int& countQ, int smallLine)
{
  int _N = min(smallLine, N);
  _N = max(1, _N);
  int z = Rand() % _N;
  int x = ans[z];
  int y = Rand() % D;
  while (x == y) {
    y = Rand() % D;
  }

  rep(j, N)
  {
    if (ans[j] == x && j != z) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y) {
      r[countQ].push_back(j);
    }
  }

  char c = Query(countQ);
  if (c == '>') {
    ans[z] = y;
    comments[countQ] += "MoveSmall1 ";
    ResetMemory();
  }
}

void Move1_Two(int& countQ, int cutLine = 999)
{
  if (D < 3) {
    Move1(countQ, cutLine);
    return;
  }
  int x = Rand() % D;
  while (true) {
    x = Rand() % D;
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  int y1 = Rand() % D;
  while (x == y1) {
    y1 = Rand() % D;
  }
  int y2 = Rand() % D;
  while (x == y2 || y1 == y2) {
    y2 = Rand() % D;
  }
  char c1 = QueryGroup(countQ, y1, y2);
  int y = y1;
  if (c1 == '>') y = y2;
  vector<int> vx;
  rep(j, N)
  {
    if (ans[j] == x) {
      vx.push_back(j);
    }
  }
  int z = vx[Rand() % vx.size()];

  if (cutLine < 100) {
    int win = 0;
    int lose = 0;
    rep(j, N)
    {
      if (hikaku[z][j] == 1) {
        win++;
      }
      else if (hikaku[z][j] == -1) {
        lose++;
      }
    }
    if (win + lose >= cutLine && win >= lose) {
      return;
    }
  }

  rep(j, N)
  {
    if (ans[j] == x && j != z) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y) {
      r[countQ].push_back(j);
    }
  }

  char c = Query(countQ);
  if (c == '>') {
    ans[z] = y;
    comments[countQ] += "Move1 ";
    ResetMemory();
  }
}

void Move1Minimum(int& countQ, int cutLine = 999)
{
  int x = Rand() % D;
  while (true) {
    x = Rand() % D;
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  int y = Rand() % D;
  while (x == y) {
    y = Rand() % D;
  }
  vector<int> vv;
  rep(j, N)
  {
    if (ans[j] == x) {
      vv.push_back(j);
    }
  }
  int z = vv[Rand() % vv.size()];
  rep(_, 30)
  {
    int zz = vv[Rand() % vv.size()];
    if (hikaku[zz][z] == 0 || hikaku[zz][z] == -1) {
      z = zz;
    }
  }

  if (cutLine < 100) {
    int win = 0;
    int lose = 0;
    rep(j, N)
    {
      if (hikaku[z][j] == 1) {
        win++;
      }
      else if (hikaku[z][j] == -1) {
        lose++;
      }
    }
    if (win + lose >= cutLine && win >= lose) {
      return;
    }
  }

  rep(j, N)
  {
    if (ans[j] == x && j != z) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y) {
      r[countQ].push_back(j);
    }
  }

  char c = Query(countQ);
  if (c == '>') {
    ans[z] = y;
    comments[countQ] += "Move1Minimum ";
    ResetMemory();
  }
}

int Move1Combo(int& countQ, int combo, int cutLine = 999)
{
  int x = combo;
  if (x == -1) {
    x = Rand() % D;
  }
  while (true) {
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
    x = Rand() % D;
  }
  int y = Rand() % D;
  while (x == y) {
    y = Rand() % D;
  }
  vector<int> vv;
  rep(j, N)
  {
    if (ans[j] == x) {
      vv.push_back(j);
    }
  }
  int z = vv[Rand() % vv.size()];

  if (cutLine < 100) {
    int win = 0;
    int lose = 0;
    rep(j, N)
    {
      if (hikaku[z][j] == 1) {
        win++;
      }
      else if (hikaku[z][j] == -1) {
        lose++;
      }
    }
    if (win + lose >= cutLine && win >= lose) {
      return -1;
    }
  }

  rep(j, N)
  {
    if (ans[j] == x && j != z) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y) {
      r[countQ].push_back(j);
    }
  }

  char c = Query(countQ);
  if (c == '>') {
    ans[z] = y;
    comments[countQ] += "Move1Combo ";
    ResetMemory();
    return x;
  }
  return -1;
}

// 1個交換
int arr8_2_L[110];
int arr8_2_R[110];
void Swap1(int& countQ, int diffLine = 999)
{
  int x = Rand() % D;
  while (true) {
    x = Rand() % D;
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  int y = Rand() % D;
  int yloop = 0;
  while (true) {
    yloop++;
    if (yloop == 30) {
      break;
    }
    y = Rand() % D;
    if (x == y) {
      continue;
    }
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == y) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }

  int szL = 0;
  int szR = 0;
  rep(j, N)
  {
    if (ans[j] == x) {
      arr8_2_L[szL] = j;
      szL++;
    }
    if (ans[j] == y) {
      arr8_2_R[szR] = j;
      szR++;
    }
  }
  int lid = arr8_2_L[Rand() % szL];
  int rid = arr8_2_R[Rand() % szR];

  if (diffLine < 100) {
    if (hikaku[lid][rid] == -1) {
      int diff = 0;
      rep(i, N)
      {
        if (hikaku[lid][i] == -1 && hikaku[i][rid] == -1) {
          diff++;
          if (diff >= diffLine) {
            return;
          }
        }
      }
    }
    else if (hikaku[lid][rid] == 1) {
      int diff = 0;
      rep(i, N)
      {
        if (hikaku[lid][i] == 1 && hikaku[i][rid] == 1) {
          diff++;
          if (diff >= diffLine) {
            return;
          }
        }
      }
    }
  }

  char c1 = Query1(countQ, lid, rid);
  if (c1 == '=') {
    return;
  }

  rep(j, N)
  {
    if (ans[j] == x && j != lid) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y && j != rid) {
      r[countQ].push_back(j);
    }
  }
  char c2 = Query(countQ);
  bool isSwap = false;
  if (c2 == '=') {
    isSwap = true;
  }
  else if (c1 == c2) {
    isSwap = true;
  }

  if (isSwap) {
    swap(ans[lid], ans[rid]);
    comments[countQ] += "Swap1 ";
    ResetMemory();
  }
}

int arrSwapHalf_L[110];
int arrSwapHalf_R[110];
void SwapHalf(int& countQ)
{
  int x = Rand() % D;
  while (true) {
    x = Rand() % D;
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  int y = Rand() % D;
  while (true) {
    y = Rand() % D;
    if (x == y) {
      continue;
    }
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == y) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }

  int szL = 0;
  int szR = 0;
  rep(j, N)
  {
    if (ans[j] == x) {
      arrSwapHalf_L[szL] = j;
      szL++;
    }
    if (ans[j] == y) {
      arrSwapHalf_R[szR] = j;
      szR++;
    }
  }

  std::shuffle(arrSwapHalf_L, arrSwapHalf_L + szL, engine_mt19937);
  std::shuffle(arrSwapHalf_R, arrSwapHalf_R + szR, engine_mt19937);
  rep(i, szL / 2) { l[countQ].push_back(arrSwapHalf_L[i]); }
  rep(i, szR / 2) { r[countQ].push_back(arrSwapHalf_R[i]); }

  char c1 = Query(countQ);
  if (c1 == '=') {
    rep(i, szL / 2) { ans[arrSwapHalf_L[i]] = y; }
    rep(i, szR / 2) { ans[arrSwapHalf_R[i]] = x; }
    comments[countQ] += "SwapHalf ";
    ResetMemory();
    return;
  }

  srep(i, szL / 2, szL) { l[countQ].push_back(arrSwapHalf_L[i]); }
  srep(i, szR / 2, szR) { r[countQ].push_back(arrSwapHalf_R[i]); }
  char c2 = Query(countQ);
  bool isSwap = false;
  if (c2 == '=') {
    isSwap = true;
  }
  else if (c1 == c2) {
    isSwap = true;
  }

  if (isSwap) {
    rep(i, szL / 2) { ans[arrSwapHalf_L[i]] = y; }
    rep(i, szR / 2) { ans[arrSwapHalf_R[i]] = x; }
    comments[countQ] += "SwapHalf ";
    ResetMemory();
  }
}

void Method11_1(int& countQ)
{
  int x = Rand() % D;
  while (true) {
    x = Rand() % D;
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == x) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  int y = Rand() % D;
  while (true) {
    y = Rand() % D;
    if (x == y) {
      continue;
    }
    int cnt = 0;
    rep(j, N)
    {
      if (ans[j] == y) {
        cnt++;
        if (cnt >= 2) break;
      }
    }
    if (cnt >= 2) {
      break;
    }
  }
  vector<int> vl, vr;
  rep(j, N)
  {
    if (ans[j] == x) {
      vl.push_back(j);
    }
    if (ans[j] == y) {
      vr.push_back(j);
    }
  }
  int lid = vl[Rand() % vl.size()];
  int rid = vr[Rand() % vr.size()];
  rep(i, 50)
  {
    rid = vr[Rand() % vr.size()];
    if (hikaku[lid][rid] == 1) {
      break;
    }
  }

  char c1 = Query1(countQ, lid, rid);
  if (c1 == '=') {
    return;
  }

  rep(j, N)
  {
    if (ans[j] == x && j != lid) {
      l[countQ].push_back(j);
    }
    if (ans[j] == y && j != rid) {
      r[countQ].push_back(j);
    }
  }
  char c2 = Query(countQ);
  bool isSwap = false;
  if (c2 == '=') {
    isSwap = true;
  }
  else if (c1 == c2) {
    isSwap = true;
  }

  if (isSwap) {
    swap(ans[lid], ans[rid]);
    comments[countQ] += "Method11_1 ";
    ResetMemory();
  }
}

bool IsAllSearched_SwapNeighbor1(const vector<int>& items)
{
  vector<int> ansItems[30];
  rep(i, N) { ansItems[ans[i]].push_back(i); }
  vector<int> vl, vr;
  rep(num, N - 1)
  {
    int x = items[num];
    int y = items[num + 1];
    int xg = ans[x];
    int yg = ans[y];
    if (xg == yg) {
      continue;
    }
    if (ansItems[xg].size() <= 1 || ansItems[yg].size() <= 1) {
      continue;
    }
    vl.clear();
    vr.clear();
    for (auto i : ansItems[xg]) {
      if (i != x) {
        vl.push_back(i);
      }
    }
    for (auto i : ansItems[yg]) {
      if (i != y) {
        vr.push_back(i);
      }
    }

    char c = QueryMapDirectly(vl, vr);
    if (c == '?') {
      return false;
    }

    // 更新可能か
    if (c == '<') {
      return false;
    }
  }

  return true;
}

// 重さの近いものをスワップ
bool SwapNeighbor1(const vector<int>& items, int& countQ, int _m = -1)
{
  int M = _m;
  if (_m == -1) M = N;
  bool isChange = false;
  int loop = 0;
  while (true) {
    loop++;
    int num = Rand() % (M - 1);
    rep(_, 30)
    {
      if (memory_SwapNeighbor1[num]) {
        num = Rand() % (M - 1);
      }
      else {
        break;
      }
    }
    memory_SwapNeighbor1[num] = 1;
    int x = items[num];
    int y = items[num + 1];
    int xg = ans[x];
    int yg = ans[y];
    if (xg == yg) {
      if (loop < 100) {
        continue;
      }
      else {
        while (xg == yg) {
          num = Rand() % (N - 1);
          x = items[num];
          y = items[num + 1];
          xg = ans[x];
          yg = ans[y];
        }
      }
    }
    if (DItems[0].empty()) {
      rep(i, N)
      {
        DItems[ans[i]].push_back(i);
      }
    }
    //rep(i, N) {
    //  if (ans[i] == xg && i != x) {
    //    l[countQ].push_back(i);
    //  }
    //  if (ans[i] == yg && i != y) {
    //    r[countQ].push_back(i);
    //  }
    //}
    for (auto i : DItems[xg]) {
      if (i != x) {
        l[countQ].push_back(i);
      }
    }
    for (auto i : DItems[yg]) {
      if (i != y) {
        r[countQ].push_back(i);
      }
    }

    //if (l[countQ].empty() || r[countQ].empty()) {
    //  l[countQ].clear();
    //  r[countQ].clear();
    //  return false;
    //}

    char c = Query(countQ);

    if (c == '<') {
      swap(ans[x], ans[y]);
      comments[countQ] += "SwapNeighbor1 ";
      ResetMemory();
      isChange = true;
    }
    break;
  }
  return isChange;
}

bool SwapNeighborSmall1(const vector<int>& items, int& countQ, int smallLine)
{
  bool isChange = false;
  while (true) {
    int _N = min(N, smallLine);
    _N = max(2, _N);
    int num = Rand() % (_N - 1);
    int x = items[num];
    int y = items[num + 1];
    int xg = ans[x];
    int yg = ans[y];
    if (xg == yg) {
      break;
    }
    if (DItems[0].empty()) {
      rep(i, N)
      {
        DItems[ans[i]].push_back(i);
      }
    }
    for (auto i : DItems[xg]) {
      if (i != x) {
        l[countQ].push_back(i);
      }
    }
    for (auto i : DItems[yg]) {
      if (i != y) {
        r[countQ].push_back(i);
      }
    }

    if (l[countQ].empty() || r[countQ].empty()) {
      l[countQ].clear();
      r[countQ].clear();
      return false;
    }
    char c = Query(countQ);

    if (c == '<') {
      swap(ans[x], ans[y]);
      comments[countQ] += "SwapNeighborSmall1 ";
      ResetMemory();
      isChange = true;
    }
    break;
  }
  return isChange;
}


void SwapNeighbor1Block(const vector<vector<int>>& blocks, int& countQ)
{
  int M = blocks.size();
  while (true) {
    int num = Rand() % (M - 1);
    vector<int> xb = blocks[num];
    vector<int> yb = blocks[num + 1];
    int xg = ans[xb[0]];
    int yg = ans[yb[0]];
    if (xg == yg) {
      continue;
    }
    rep(i, N)
    {
      if (ans[i] == xg) {
        int ok = 1;
        for (auto x : xb) {
          if (i == x) ok = 0;
        }
        if (ok) {
          l[countQ].push_back(i);
        }
      }
      if (ans[i] == yg) {
        int ok = 1;
        for (auto y : yb) {
          if (i == y) ok = 0;
        }
        if (ok) {
          r[countQ].push_back(i);
        }
      }
    }
    if (l[countQ].empty() || r[countQ].empty()) {
      l[countQ].clear();
      r[countQ].clear();
      return;
    }
    char c = Query(countQ);

    if (c == '<') {
      for (auto x : xb) {
        ans[x] = yg;
      }
      for (auto y : yb) {
        ans[y] = xg;
      }
      comments[countQ] += "SwapNeighbor1Block ";
      ResetMemory();
    }
    break;
  }
}

void Method8(int hiritu = 60)
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      Move1(countQ);
    }
    else {
      if (Q - 1 <= countQ) {
        if (hiritu < 10) break;
        continue;
      }
      Swap1(countQ);
    }
    if (nowTime > TL) {
      cerr << "Assert Method8" << endl;
      break;
    }
  }

  DummyQuery(countQ);
}

void Method208(int _kireme, int hiritu1, int hiritu2)
{
  rep(i, N) { ans[i] = i % D; }

  int kireme = round((double)Q * _kireme / 100);
  int hiritu = 100;

  int countQ = 0;
  while (countQ < Q) {
    if (countQ < kireme) {
      hiritu = hiritu1;
    }
    else {
      hiritu = hiritu2;
    }
    int qu = Rand() % 100;
    if (qu < hiritu) {
      Move1(countQ);
    }
    else {
      if (Q - 1 <= countQ) {
        if (hiritu < 10) break;
        continue;
      }
      Swap1(countQ);
    }
  }

  DummyQuery(countQ);
}

void Method8_Two(int hiritu = 60)
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      Move1_Two(countQ);
    }
    else {
      if (Q - 1 <= countQ) {
        if (hiritu < 10) break;
        continue;
      }
      Swap1(countQ);
    }
  }

  DummyQuery(countQ);
}

void Method19(int hiritu = 60)
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      Move1(countQ);
    }
    else {
      if (Q - 1 <= countQ) {
        if (hiritu < 10) break;
        continue;
      }
      SwapHalf(countQ);
    }
  }

  DummyQuery(countQ);
}

void Method18(int hiritu = 60)
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      Move1Minimum(countQ);
    }
    else {
      if (Q - 1 <= countQ) {
        if (hiritu < 10) break;
        continue;
      }
      Swap1(countQ);
    }
  }

  DummyQuery(countQ);
}

void Method13(int diffLine = 999)
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < 10) {
      Move1(countQ);
    }
    else if (qu < 60) {
      Move1(countQ, 10);
    }
    else {
      if (Q - 1 <= countQ) {
        continue;
      }
      Swap1(countQ, diffLine);
    }
  }

  DummyQuery(countQ);
}

void Method14()
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ < Q) {
    if (countQ < 0.75 * Q) {
      int qu = Rand() % 100;
      if (qu < 60) {
        Move1(countQ);
      }
      else {
        if (Q - 1 <= countQ) {
          continue;
        }
        Swap1(countQ, 999);
      }
    }
    else {
      if (Q - 1 <= countQ) {
        break;
        ;
      }
      Swap1(countQ, 1);
    }
  }

  DummyQuery(countQ);
}

void Method15(int hiritu = 60)
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  int combo = -1;
  while (countQ < Q) {
    if (combo != -1) {
      combo = Move1Combo(countQ, combo);
    }
    else {
      int qu = Rand() % 100;
      if (qu < hiritu) {
        Move1(countQ);
      }
      else {
        if (Q - 1 <= countQ) {
          if (hiritu < 10) break;
          continue;
        }
        Swap1(countQ);
      }
    }
  }

  DummyQuery(countQ);
}

void Method16(int hiritu = 60)
{
  int countQ = 0;

  // 初期解を少し工夫
  rep(i, N)
  {
    if (i < D) {
      ans[i] = i;
    }
    else {
      int x = Rand() % D;
      int y = Rand() % D;
      while (x == y) {
        y = Rand() % D;
      }
      rep(j, N)
      {
        if (ans[j] == x) {
          l[countQ].push_back(j);
        }
        if (ans[j] == y) {
          r[countQ].push_back(j);
        }
      }

      char c = Query(countQ);
      if (c == '<') {
        ans[i] = x;
      }
      else {
        ans[i] = y;
      }
    }
  }

  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      Move1(countQ);
    }
    else {
      if (Q - 1 <= countQ) {
        if (hiritu < 10) break;
        continue;
      }
      Swap1(countQ);
    }
  }

  DummyQuery(countQ);
}

void Method11()
{
  rep(i, N) { ans[i] = i % D; }

  int countQ = 0;
  while (countQ <= Q - 2) {
    int qu = Rand() % 100;
    if (qu < 33) {
      Move1(countQ);
    }
    else if (qu < 66) {
      if (Q - 2 <= countQ) {
        continue;
      }
      Swap1(countQ);
    }
    else {
      if (Q - 2 <= countQ) {
        continue;
      }
      Method11_1(countQ);
    }
  }

  DummyQuery(countQ);
}

void MergeDfs(vector<int>& items, int& countQ, int left, int right,
  int ikichi = 1001001)
{
  if (left + 1 == right) {
    return;
  }

  if (left + 2 == right) {
    int lhs = items[left];
    int rhs = items[left + 1];
    char c = Query1(countQ, lhs, rhs);
    if (c == '>') {
      swap(items[left], items[left + 1]);
    }
    return;
  }

  int mid = (left + right) / 2;
  MergeDfs(items, countQ, left, mid, ikichi);
  MergeDfs(items, countQ, mid, right, ikichi);

  int ite1 = left;
  int ite2 = mid;
  vector<int> tmp;
  if (right - left >= ikichi) {
    if (left == 0 && right == N) {
      while (ite1 < mid / 2 && ite2 < mid + (right - mid) / 2) {
        tmp.push_back(items[ite1]);
        ite1++;
        tmp.push_back(items[ite2]);
        ite2++;
      }
    }
  }

  while (ite1 < mid || ite2 < right) {
    if (ite1 == mid) {
      tmp.push_back(items[ite2]);
      ite2++;
    }
    else if (ite2 == right) {
      tmp.push_back(items[ite1]);
      ite1++;
    }
    else {
      int lhs = items[ite1];
      int rhs = items[ite2];
      char c = Query1(countQ, lhs, rhs);
      if (c == '>') {
        tmp.push_back(rhs);
        ite2++;
      }
      else {
        tmp.push_back(lhs);
        ite1++;
      }
    }
  }
  rep(i, tmp.size()) { items[left + i] = tmp[i]; }
}

void MergeDfsBlock(vector<vector<int>>& blocks, int& countQ, int left,
  int right, int ikichi = 1001001)
{
  if (left + 1 == right) {
    return;
  }

  if (left + 2 == right) {
    l[countQ] = blocks[left];
    r[countQ] = blocks[left + 1];
    char c = Query(countQ);
    if (c == '>') {
      swap(blocks[left], blocks[left + 1]);
    }
    return;
  }

  int mid = (left + right) / 2;
  MergeDfsBlock(blocks, countQ, left, mid, ikichi);
  MergeDfsBlock(blocks, countQ, mid, right, ikichi);

  int ite1 = left;
  int ite2 = mid;
  vector<vector<int>> tmp;
  if (right - left >= ikichi) {
    if (left == 0 && right == N) {
      while (ite1 < mid / 2 && ite2 < mid + (right - mid) / 2) {
        tmp.push_back(blocks[ite1]);
        ite1++;
        tmp.push_back(blocks[ite2]);
        ite2++;
      }
    }
  }

  while (ite1 < mid || ite2 < right) {
    if (ite1 == mid) {
      tmp.push_back(blocks[ite2]);
      ite2++;
    }
    else if (ite2 == right) {
      tmp.push_back(blocks[ite1]);
      ite1++;
    }
    else {
      l[countQ] = blocks[ite1];
      r[countQ] = blocks[ite2];
      char c = Query(countQ);
      if (c == '>') {
        tmp.push_back(blocks[ite2]);
        ite2++;
      }
      else {
        tmp.push_back(blocks[ite1]);
        ite1++;
      }
    }
  }
  rep(i, tmp.size()) { blocks[left + i] = tmp[i]; }
}

void MergeSort(vector<int>& items, int& countQ, int ikichi = 1001001, int _m = -1)
{
  if (_m == -1) _m = N;
  MergeDfs(items, countQ, 0, _m, ikichi);
}

void MergeSortBlock(vector<vector<int>>& blocks, int& countQ,
  int ikichi = 1001001)
{
  MergeDfsBlock(blocks, countQ, 0, blocks.size(), ikichi);
}

int CountMaxMergeSortDfs(int left, int right)
{
  if (left + 1 == right) {
    return 0;
  }

  if (left + 2 == right) {
    return 1;
  }

  int mid = (left + right) / 2;
  int cnt = 0;
  cnt += CountMaxMergeSortDfs(left, mid);
  cnt += CountMaxMergeSortDfs(mid, right);
  cnt += right - left - 1;
  return cnt;
}
int CountMaxMergeSort() { return CountMaxMergeSortDfs(0, N); }

void MergeDfs_Group(vector<int>& groups, int& countQ, int left, int right)
{
  if (left + 1 == right) {
    return;
  }

  if (left + 2 == right) {
    char c = QueryGroup(countQ, groups[left], groups[left + 1]);
    if (c == '>') {
      swap(groups[left], groups[left + 1]);
    }
    return;
  }

  int mid = (left + right) / 2;
  MergeDfs_Group(groups, countQ, left, mid);
  MergeDfs_Group(groups, countQ, mid, right);

  int ite1 = left;
  int ite2 = mid;
  vector<int> tmp;
  while (ite1 < mid || ite2 < right) {
    if (ite1 == mid) {
      tmp.push_back(groups[ite2]);
      ite2++;
    }
    else if (ite2 == right) {
      tmp.push_back(groups[ite1]);
      ite1++;
    }
    else {
      int lgId = groups[ite1];
      int rgId = groups[ite2];
      char c = QueryGroup(countQ, lgId, rgId);
      if (c == '>') {
        tmp.push_back(rgId);
        ite2++;
      }
      else {
        tmp.push_back(lgId);
        ite1++;
      }
    }
  }
  rep(i, tmp.size()) { groups[left + i] = tmp[i]; }
}

void MergeSort_Group(vector<int>& groups, int& countQ)
{
  MergeDfs_Group(groups, countQ, 0, D);
  reverse(groups.begin(), groups.end());  // 重い順で返す
  return;
}

bool IsAllSearched_Swap2(const vector<int>& items, int minDiff)
{
  vector<int> ansItems[30];
  rep(i, N) { ansItems[ans[i]].push_back(i); }
  vector<int> vl, vr;

  rep(num, N - 1)
  {
    int x1 = items[num];
    int y1 = items[num + 1];
    int xg = ans[x1];
    int yg = ans[y1];
    if (xg == yg) {
      continue;
    }
    int x2 = -1;
    int y2 = -1;
    int lastX = 1001001;
    int lastI = 1001001;
    drep(ii, N)
    {
      int i = items[ii];
      if (ans[i] == xg && i != x1) {
        lastX = i;
        lastI = ii;
      }
      if (ans[i] == yg && i != y1) {
        if (lastI - ii < minDiff) {
          minDiff = lastI - ii;
          x2 = lastX;
          y2 = i;
        }
      }
    }
    if (x2 == -1) {
      continue;
    }
    vl.clear();
    vr.clear();
    rep(i, N)
    {
      if (ans[i] == xg && i != x1 && i != x2) {
        vl.push_back(i);
      }
      if (ans[i] == yg && i != y1 && i != y2) {
        vr.push_back(i);
      }
    }
    if (vl.empty() || vr.empty()) {
      continue;
    }
    char c1 = QueryMapDirectly(vl, vr);

    {
      vl.clear();
      vr.clear();
      vl.push_back(x1);
      vl.push_back(x2);
      vr.push_back(y1);
      vr.push_back(y2);
    }
    char c2 = QueryMapDirectly(vl, vr);

    if (c1 == '?' || c2 == '?') {
      return false;
    }

    if (c1 != '=' && c1 == c2) {
      return false;
    }
  }

  return true;
}

bool Swap2(const vector<int>& items, int& countQ, int minDiff = 10, int _m = -1)
{
  int M = _m;
  if (_m == -1) M = N;
  M = max(M, 5);
  bool isChange = false;
  int loop = 0;
  while (true) {
    loop++;
    int num = Rand() % (M - 1);
    int x1 = items[num];
    int y1 = items[num + 1];
    int xg = ans[x1];
    int yg = ans[y1];
    if (xg == yg) {
      if (loop > 100) {
        while (xg == yg) {
          num = Rand() % (N - 1);
          x1 = items[num];
          y1 = items[num + 1];
          xg = ans[x1];
          yg = ans[y1];
        }
      }
      else {
        continue;
      }
    }
    int x2 = -1;
    int y2 = -1;
    int lastX = 1001001;
    int lastI = 1001001;
    drep(ii, N)
    {
      int i = items[ii];
      if (ans[i] == xg && i != x1) {
        lastX = i;
        lastI = ii;
      }
      if (ans[i] == yg && i != y1) {
        if (lastI - ii < minDiff) {
          minDiff = lastI - ii;
          x2 = lastX;
          y2 = i;
        }
      }
    }
    if (x2 == -1) {
      break;
    }
    rep(i, N)
    {
      if (ans[i] == xg && i != x1 && i != x2) {
        l[countQ].push_back(i);
      }
      if (ans[i] == yg && i != y1 && i != y2) {
        r[countQ].push_back(i);
      }
    }
    if (l[countQ].empty() || r[countQ].empty()) {
      l[countQ].clear();
      r[countQ].clear();
      return false;
    }
    char c1 = Query(countQ);

    {
      l[countQ].push_back(x1);
      l[countQ].push_back(x2);
      r[countQ].push_back(y1);
      r[countQ].push_back(y2);
    }
    char c2 = Query(countQ);

    if (c1 == c2) {
      swap(ans[x1], ans[y1]);
      swap(ans[x2], ans[y2]);
      comments[countQ] += "Swap2 ";
      ResetMemory();
      if (c1 != '=') {
        isChange = true;
      }
    }
    break;
  }
  return isChange;
}

bool SwapN(const vector<int>& items, int& countQ, int minDiff)
{
  bool isChange = false;
  int xg = Rand() % D;
  int yg = Rand() % D;
  while (xg == yg) {
    yg = Rand() % D;
  }

  vector<P> vpx, vpy;
  {
    int lastX = 1001001;
    int lastI = 1001001;
    drep(ii, N)
    {
      int i = items[ii];
      if (ans[i] == xg) {
        lastX = i;
        lastI = ii;
      }
      if (ans[i] == yg) {
        if (lastI - ii <= minDiff) {
          vpx.push_back(P(lastX, i));
          lastX = 1001001;
          lastI = 1001001;
        }
      }
    }
  }

  {
    int lastY = 1001001;
    int lastI = 1001001;
    drep(ii, N)
    {
      int i = items[ii];
      if (ans[i] == yg) {
        lastY = i;
        lastI = ii;
      }
      if (ans[i] == xg) {
        if (lastI - ii <= minDiff) {
          vpy.push_back(P(i, lastY));
          lastY = 1001001;
          lastI = 1001001;
        }
      }
    }
  }

  if (vpx.empty() || vpy.empty()) {
    return false;
  }

  vector<P> vpx2, vpy2;
  set<int> use;
  int loop = 0;
  while (true) {
    int ok = 0;

    rep(winter, 10)
    {
      if (loop % 2 == 0) {
        P p = vpx[Rand() % vpx.size()];
        int x = p.first;
        int y = p.second;
        if (use.find(x) == use.end() && use.find(y) == use.end()) {
          vpx2.push_back(p);
          use.insert(x);
          use.insert(y);
          ok = 1;
          break;
        }
      }
      else {
        P p = vpy[Rand() % vpy.size()];
        int x = p.first;
        int y = p.second;
        if (use.find(x) == use.end() && use.find(y) == use.end()) {
          vpy2.push_back(p);
          use.insert(x);
          use.insert(y);
          ok = 1;
          break;
        }
      }
    }

    if (ok == 0) {
      break;
    }
    loop++;
  }

  if (vpx2.empty() || vpy2.empty()) {
    return false;
  }

  std::shuffle(vpx2.begin(), vpx2.end(), engine_mt19937);
  std::shuffle(vpy2.begin(), vpy2.end(), engine_mt19937);

  int lNum = Rand() % 3 + 1;
  lNum = min(lNum, (int)vpx2.size());
  int rNum = Rand() % 3 + 1;
  rNum = min(rNum, (int)vpy2.size());

  vector<int> vQuery1X, vQuery1Y, vQuery2X, vQuery2Y;
  rep(i, lNum)
  {
    vQuery1X.push_back(vpx2[i].first);
    vQuery1Y.push_back(vpx2[i].second);
  }
  rep(i, rNum)
  {
    vQuery1X.push_back(vpy2[i].first);
    vQuery1Y.push_back(vpy2[i].second);
  }
  rep(i, N)
  {
    if (ans[i] == xg) {
      int notUse = 1;
      for (auto xx : vQuery1X) {
        if (xx == i) {
          notUse = 0;
        }
      }
      if (notUse) {
        vQuery2X.push_back(i);
      }
    }
    if (ans[i] == yg) {
      int notUse = 1;
      for (auto yy : vQuery1Y) {
        if (yy == i) {
          notUse = 0;
        }
      }
      if (notUse) {
        vQuery2Y.push_back(i);
      }
    }
  }

  l[countQ] = vQuery1X;
  r[countQ] = vQuery1Y;
  char c1 = Query(countQ);
  l[countQ] = vQuery2X;
  r[countQ] = vQuery2Y;
  char c2 = Query(countQ);

  if (c1 == c2) {
    for (auto xx : vQuery1X) {
      ans[xx] = yg;
    }
    for (auto yy : vQuery1Y) {
      ans[yy] = xg;
    }
    comments[countQ] += "SwapN ";
    ResetMemory();
    if (c1 != '=') {
      isChange = true;
    }
  }

  return isChange;
}


void Swap2Block(const vector<vector<int>>& blocks, int& countQ)
{
  int M = blocks.size();
  while (true) {
    int num = Rand() % (M - 1);
    vector<int> xb1 = blocks[num];
    vector<int> yb1 = blocks[num + 1];
    int xg = ans[xb1[0]];
    int yg = ans[yb1[0]];

    if (xg == yg) {
      continue;
    }

    vector<int> vx, vy;
    rep(i, M)
    {
      if (ans[blocks[i][0]] == xg && i != num) {
        vx.push_back(i);
      }
      if (ans[blocks[i][0]] == yg && i != num + 1) {
        vy.push_back(i);
      }
    }
    if (vx.empty() || vy.empty()) {
      break;
    }
    int x2 = vx[Rand() % vx.size()];
    int y2 = vy[Rand() % vy.size()];

    rep(i, N)
    {
      if (ans[i] == xg && i != num && i != x2) {
        l[countQ].push_back(i);
      }
      if (ans[i] == yg && i != num + 1 && i != y2) {
        r[countQ].push_back(i);
      }
    }

    char c1 = Query(countQ);

    vector<int> vl, vr;
    {
      l[countQ] = xb1;
      for (auto x : blocks[x2]) l[countQ].push_back(x);
      vl = l[countQ];
      r[countQ] = yb1;
      for (auto y : blocks[y2]) r[countQ].push_back(y);
      vr = r[countQ];
    }
    char c2 = Query(countQ);

    if (c1 == c2) {
      for (auto x : vl) ans[x] = yg;
      for (auto y : vr) ans[y] = xg;
      comments[countQ] += "Swap2Block ";
      ResetMemory();
    }
    break;
  }
}

bool IsAllCandidateSearched_Method6(const vector<int>& items, int minDiff)
{
  if (!IsAllSearched_SwapNeighbor1(items)) {
    return false;
  }

  if (!IsAllSearched_Swap2(items, minDiff)) {
    return false;
  }

  return true;
}

void Method266(int hiritu, int minDiff, int kosuu, int saidai, int maxFailedCount = 1000)
{
  if (maxFailedCount < 10) {
    maxFailedCount = 10;
  }
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int keepInitialAns[110];
  rep(i, N)
  {
    keepInitialAns[i] = ans[i];
  }

  int setCount = 0;
  while (countQ <= Q - D) {
    int failedCount = 0;

    while (countQ < Q - D) {
      int qu = Rand() % 100;
      if (qu < hiritu) {
        bool isChange = SwapNeighbor1(items, countQ);
        if (isChange) {
          failedCount = 0;
        }
      }
      else {
        if (countQ >= Q - D - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        bool isChange = Swap2(items, countQ, minDiff);
        if (isChange) {
          failedCount = 0;
        }
      }
      failedCount++;
      if (failedCount > maxFailedCount) {
        break;
      }
    }

    if (setCount == 0) {
      rep(i, N)
      {
        real_ans[i] = ans[i];
      }
      if (countQ <= Q - D) {
        // max_D計算
        int tmp_max_D = 0;
        srep(i, 1, D)
        {
          rep(j, N)
          {
            if (ans[j] == tmp_max_D) {
              l[countQ].push_back(j);
            }
            if (ans[j] == i) {
              r[countQ].push_back(j);
            }
          }
          char c = Query(countQ);
          if (c == '<') {
            tmp_max_D = i;
          }
        }
        real_max_D = tmp_max_D;
      }
      else {
        break;
      }
    }
    else {
      if (countQ <= Q - D) {
        // max_D計算
        int tmp_max_D = 0;
        srep(i, 1, D)
        {
          rep(j, N)
          {
            if (ans[j] == tmp_max_D) {
              l[countQ].push_back(j);
            }
            if (ans[j] == i) {
              r[countQ].push_back(j);
            }
          }
          char c = Query(countQ);
          if (c == '<') {
            tmp_max_D = i;
          }
        }

        // 暫定1位と比較
        int cntBoth[110] = {};
        rep(j, N)
        {
          if (ans[j] == tmp_max_D) {
            cntBoth[j]++;
          }
        }
        rep(j, N)
        {
          if (real_ans[j] == real_max_D) {
            cntBoth[j]++;
          }
        }
        rep(j, N)
        {
          if (ans[j] == tmp_max_D && cntBoth[j] == 1) {
            l[countQ].push_back(j);
          }
        }
        rep(j, N)
        {
          if (real_ans[j] == real_max_D && cntBoth[j] == 1) {
            r[countQ].push_back(j);
          }
        }
        char c2 = Query(countQ);
        if (c2 == '<') {
          real_max_D = tmp_max_D;
          rep(j, N)
          {
            real_ans[j] = ans[j];
          }
        }
      }
      else {
        break;
      }
    }

    setCount++;

    if (nowTime > TL) {
      if (mode != 0) {
        cout << "Assert Method226 : N = " << N << ", Q = " << Q << ", setCount = " << setCount << endl;
      }
      break;
    }

    // ランダムにいくつかスワップ
    vector<int> ningning;
    saidai = min(saidai, N - 1);
    saidai = max(saidai, 1);
    rep(i, saidai)
    {
      ningning.push_back(i);
    }
    std::shuffle(ningning.begin(), ningning.end(), engine_mt19937);
    kosuu = min(kosuu, saidai);
    kosuu = max(kosuu, 1);
    rep(i, kosuu)
    {
      swap(ans[items[i]], ans[items[i + 1]]);
    }
  }

  if (setCount > 0) {
    rep(i, N)
    {
      ans[i] = real_ans[i];
    }
  }

  DummyQuery(countQ);
}

void Method226(int hiritu = 100, int minDiff = 10)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int keepInitialAns[110];
  rep(i, N)
  {
    keepInitialAns[i] = ans[i];
  }

  int setCount = 0;
  while (countQ <= Q - D) {
    int failedCount = 0;

    while (countQ < Q - D) {
      if (nowTime > TL + 0.1) {
        cerr << "TLE : Method226 " << "time = " << nowTime << ", setCount = " << setCount << endl;
        break;
      }
      int qu = Rand() % 100;
      if (qu < hiritu) {
        bool isChange = SwapNeighbor1(items, countQ);
        if (isChange) {
          failedCount = 0;
        }
      }
      else {
        if (countQ >= Q - D - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        bool isChange = Swap2(items, countQ, minDiff);
        if (isChange) {
          failedCount = 0;
        }
      }
      failedCount++;
      if (failedCount > 1000) {
        break;
      }
    }

    if (setCount == 0) {
      rep(i, N)
      {
        real_ans[i] = ans[i];
      }
      if (countQ <= Q - D) {
        // max_D計算
        int tmp_max_D = 0;
        srep(i, 1, D)
        {
          rep(j, N)
          {
            if (ans[j] == tmp_max_D) {
              l[countQ].push_back(j);
            }
            if (ans[j] == i) {
              r[countQ].push_back(j);
            }
          }
          char c = Query(countQ);
          if (c == '<') {
            tmp_max_D = i;
          }
        }
        real_max_D = tmp_max_D;
      }
      else {
        break;
      }
    }
    else {
      if (countQ <= Q - D) {
        // max_D計算
        int tmp_max_D = 0;
        srep(i, 1, D)
        {
          rep(j, N)
          {
            if (ans[j] == tmp_max_D) {
              l[countQ].push_back(j);
            }
            if (ans[j] == i) {
              r[countQ].push_back(j);
            }
          }
          char c = Query(countQ);
          if (c == '<') {
            tmp_max_D = i;
          }
        }

        // 暫定1位と比較
        int cntBoth[110] = {};
        rep(j, N)
        {
          if (ans[j] == tmp_max_D) {
            cntBoth[j]++;
          }
        }
        rep(j, N)
        {
          if (real_ans[j] == real_max_D) {
            cntBoth[j]++;
          }
        }
        rep(j, N)
        {
          if (ans[j] == tmp_max_D && cntBoth[j] == 1) {
            l[countQ].push_back(j);
          }
        }
        rep(j, N)
        {
          if (real_ans[j] == real_max_D && cntBoth[j] == 1) {
            r[countQ].push_back(j);
          }
        }
        char c2 = Query(countQ);
        if (c2 == '<') {
          real_max_D = tmp_max_D;
          rep(j, N)
          {
            real_ans[j] = ans[j];
          }
        }
      }
      else {
        break;
      }
    }

    setCount++;

    if (nowTime > TL) {
      if (mode != 0) {
        cout << "Assert Method226 : N = " << N << ", Q = " << Q << ", setCount = " << setCount << ", time = " << nowTime << endl;
      }
      break;
    }

    rep(i, N)
    {
      ans[i] = keepInitialAns[i];
    }
  }

  if (setCount > 0) {
    rep(i, N)
    {
      ans[i] = real_ans[i];
    }
  }

  DummyQuery(countQ);
}


void Method6(int hiritu = 100, int minDiff = 10)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }
  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int failedCount = 0;
  while (countQ < Q) {
    if (hiritu >= 100 && nowTime > TL / 3) {
      hiritu = 90;
      minDiff = 999;
    }
    int qu = Rand() % 100;
    if (qu < hiritu) {
      bool isChange = SwapNeighbor1(items, countQ);
      if (isChange) {
        failedCount = 0;
      }
    }
    else {
      if (countQ >= Q - 1) {
        if (hiritu < 10) {
          break;
        }
        continue;
      }

      bool isChange = Swap2(items, countQ, minDiff);
      if (isChange) {
        failedCount = 0;
      }
    }
    failedCount++;
  }
  DummyQuery(countQ);
}

void Method706(int hiritu1, int minDiff, int hiritu2)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }
  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int failedCount = 0;
  if (hiritu1 < 10) {
    hiritu1 = 10;
  }
  while (countQ < Q) {
    if (nowTime > TL / 3) {
      hiritu1 = 33;
      hiritu2 = 66;
      minDiff = 999;
    }
    int qu = Rand() % 100;
    if (qu < hiritu1) {
      bool isChange = SwapNeighbor1(items, countQ);
      if (isChange) {
        failedCount = 0;
      }
    }
    else if (qu < hiritu2) {
      bool isChange = Swap2(items, countQ, minDiff);
      if (isChange) {
        failedCount = 0;
      }
    }
    else {
      if (failedCount > 500) {
        int minDiff2 = minDiff;
        minDiff2 = max(1, minDiff2);
        bool isChange = SwapN(items, countQ, minDiff2);
        if (isChange) {
          failedCount = 0;
        }
      }
    }
    failedCount++;
  }
  DummyQuery(countQ);
}


void Method206(int hiritu1, int hiritu2, int timing, int blockSize)
{
  int countQ = 0;

  vector<vector<int>> blocks;
  rep(i, N)
  {
    if (i % blockSize == 0) {
      blocks.push_back({});
    }
    blocks.back().push_back(i);
  }
  if (blocks.size() < D) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    return;
  }

  int M = blocks.size();
  // アイテムをマージソート(軽い順)
  MergeSortBlock(blocks, countQ);

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    rep(j, blocks[M - 1 - i].size())
    {
      int id = blocks[M - 1 - i][j];
      ans[id] = i;
    }
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, M - D)
  {
    int gId = groups[D - 1];
    rep(j, blocks[i].size())
    {
      int id = blocks[i][j];
      ans[id] = gId;
    }

    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int loopCount = 0;
  while (countQ < Q) {
    loopCount++;
    int isKouhan = false;

    if (countQ >= round((double)Q * timing / 100)) {
      isKouhan = true;
    }
    if (loopCount > 1000) {
      isKouhan = true;
    }

    if (isKouhan) {
      int qu = Rand() % 100;
      int hiritu = hiritu1;
      if (qu < hiritu) {
        Move1(countQ);
      }
      else {
        if (Q - 1 <= countQ) {
          if (hiritu < 10) break;
          continue;
        }
        Swap1(countQ);
      }
    }
    else {
      int hiritu = hiritu2;
      if (hiritu >= 100 && nowTime > TL / 3) {
        hiritu = 90;
      }
      int qu = Rand() % 100;
      if (qu < hiritu) {
        SwapNeighbor1Block(blocks, countQ);
      }
      else {
        if (countQ >= Q - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        Swap2Block(blocks, countQ);
      }
    }
  }
  DummyQuery(countQ);
}

void Method216(int hiritu1, int hiritu2, int timing, int blockSize, int destroySize)
{
  int countQ = 0;
  vector<vector<int>> blocks;
  rep(i, N)
  {
    if (i % blockSize == 0) {
      blocks.push_back({});
    }
    blocks.back().push_back(i);
  }
  if (blocks.size() < D) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    return;
  }

  int M = blocks.size();
  // アイテムをマージソート(軽い順)
  MergeSortBlock(blocks, countQ);

  if (destroySize >= M) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    return;
  }

  // 大きいのを分割
  vector<vector<int>> tmp1, tmp2;
  rep(i, M)
  {
    if (i < M - destroySize) {
      tmp2.push_back(blocks[i]);
    }
    else {
      rep(j, blocks[i].size()) { tmp1.push_back({ blocks[i][j] }); }
    }
  }

  // 分割したアイテムを挿入
  blocks = tmp2;
  for (auto tmp : tmp1) {
    M = blocks.size();
    int left = 0;
    int right = M;
    while (left < right) {
      int mid = (left + right) / 2;
      l[countQ] = tmp;
      r[countQ] = blocks[mid];
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '<') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    blocks.insert(blocks.begin() + left, tmp);
  }

  M = blocks.size();
  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    rep(j, blocks[M - 1 - i].size())
    {
      int id = blocks[M - 1 - i][j];
      ans[id] = i;
    }
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, M - D)
  {
    int gId = groups[D - 1];
    rep(j, blocks[i].size())
    {
      int id = blocks[i][j];
      ans[id] = gId;
    }

    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int loopCount = 0;
  while (countQ < Q) {
    loopCount++;
    int isKouhan = false;

    if (countQ >= round((double)Q * timing / 100)) {
      isKouhan = true;
    }
    if (loopCount > 1000) {
      isKouhan = true;
    }

    if (isKouhan) {
      int qu = Rand() % 100;
      int hiritu = hiritu1;
      if (qu < hiritu) {
        Move1(countQ);
      }
      else {
        if (Q - 1 <= countQ) {
          if (hiritu < 10) break;
          continue;
        }
        Swap1(countQ);
      }
    }
    else {
      int hiritu = hiritu2;
      if (hiritu >= 100 && nowTime > TL / 3) {
        hiritu = 90;
      }
      int qu = Rand() % 100;
      if (qu < hiritu) {
        SwapNeighbor1Block(blocks, countQ);
      }
      else {
        if (countQ >= Q - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        Swap2Block(blocks, countQ);
      }
    }
  }
  DummyQuery(countQ);
}

void Method316(int hiritu1, int hiritu2, int timing, int blockSize, int destroySize)
{
  int countQ = 0;

  vector<vector<int>> blocks;
  rep(i, N)
  {
    if (i % blockSize == 0) {
      blocks.push_back({});
    }
    blocks.back().push_back(i);
  }
  if (blocks.size() < D) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    //cerr << "Assert Method316-1 : " << blockSize << ' ' << blocks.size() << ' ' << D << endl;
    return;
  }

  int M = blocks.size();
  // アイテムをマージソート(軽い順)
  MergeSortBlock(blocks, countQ);

  if (destroySize >= M) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    //cerr << "Assert Method316-2 : " << destroySize << ' ' << M << endl;
    return;
  }

  // 大きいのを分割
  vector<vector<int>> tmp1, tmp2;
  rep(i, M)
  {
    if (i < M - destroySize) {
      tmp2.push_back(blocks[i]);
    }
    else {
      rep(j, blocks[i].size()) { tmp1.push_back({ blocks[i][j] }); }
    }
  }

  // 分割したアイテムを挿入
  blocks = tmp2;
  for (auto tmp : tmp1) {
    M = blocks.size();
    int left = 0;
    int right = M;
    while (left < right) {
      int mid = (left + right) / 2;
      l[countQ] = tmp;
      r[countQ] = blocks[mid];
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '<') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    blocks.insert(blocks.begin() + left, tmp);
  }

  vector<int> items;
  int used[110] = {};
  for (auto block : blocks) {
    if (block.size() == 1) {
      items.push_back(block[0]);
      used[block[0]] = 1;
    }
  }
  int M2 = items.size();
  rep(i, N)
  {
    if (used[i] == 0) {
      items.push_back(i);
    }
  }

  if (M2 < 5) {
    rep(i, N)
    {
      ans[i] = i % D;
    }
    DummyQuery(countQ);
    return;
  }

  M = blocks.size();
  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    rep(j, blocks[M - 1 - i].size())
    {
      int id = blocks[M - 1 - i][j];
      ans[id] = i;
    }
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, M - D)
  {
    int gId = groups[D - 1];
    rep(j, blocks[i].size())
    {
      int id = blocks[i][j];
      ans[id] = gId;
    }

    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int loopCount = 0;
  while (countQ < Q) {
    loopCount++;
    int isKouhan = false;

    if (countQ >= round((double)Q * timing / 100)) {
      isKouhan = true;
    }
    if (loopCount > 1000) {
      isKouhan = true;
    }

    if (isKouhan) {
      SwapNeighbor1(items, countQ, M2);
    }
    else {
      int hiritu = hiritu2;
      if (hiritu >= 100 && nowTime > TL / 3) {
        hiritu = 90;
      }
      int qu = Rand() % 100;
      if (qu < hiritu) {
        SwapNeighbor1Block(blocks, countQ);
      }
      else {
        if (countQ >= Q - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        Swap2Block(blocks, countQ);
      }
    }
  }
  DummyQuery(countQ);
}

void Method916(int totyuu, int hiritu1, int hiritu2, int timing, int blockSize, int destroySize)
{
  int countQ = 0;

  vector<vector<int>> blocks;
  rep(i, N)
  {
    if (i % blockSize == 0) {
      blocks.push_back({});
    }
    blocks.back().push_back(i);
  }
  if (blocks.size() < D) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    //cerr << "Assert Method316-1 : " << blockSize << ' ' << blocks.size() << ' ' << D << endl;
    return;
  }

  int M = blocks.size();
  // アイテムをマージソート(軽い順)
  MergeSortBlock(blocks, countQ);

  if (destroySize >= M) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    //cerr << "Assert Method316-2 : " << destroySize << ' ' << M << endl;
    return;
  }

  // 大きいのを分割
  vector<vector<int>> tmp1, tmp2;
  rep(i, M)
  {
    if (i < M - destroySize) {
      tmp2.push_back(blocks[i]);
    }
    else {
      rep(j, blocks[i].size()) { tmp1.push_back({ blocks[i][j] }); }
    }
  }

  // 分割したアイテムを挿入
  blocks = tmp2;
  for (auto tmp : tmp1) {
    M = blocks.size();
    int left = 0;
    int right = M;
    while (left < right) {
      int mid = (left + right) / 2;
      l[countQ] = tmp;
      r[countQ] = blocks[mid];
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '<') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    blocks.insert(blocks.begin() + left, tmp);
  }

  vector<int> items;
  int used[110] = {};
  for (auto block : blocks) {
    if (block.size() == 1) {
      items.push_back(block[0]);
      used[block[0]] = 1;
    }
  }
  int M2 = items.size();
  rep(i, N)
  {
    if (used[i] == 0) {
      items.push_back(i);
    }
  }

  if (M2 < 5) {
    rep(i, N)
    {
      ans[i] = i % D;
    }
    DummyQuery(countQ);
    return;
  }

  M = blocks.size();
  vector<int> groupNakami[30];
  int flag[110] = {};
  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    rep(j, blocks[M - 1 - i].size())
    {
      int id = blocks[M - 1 - i][j];
      ans[id] = i;
    }
    groupNakami[i].push_back(M - 1 - i);
    flag[M - 1 - i] = 1;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする

  rep(i, D)
  {
    groups.push_back(i);
  }

  // 途中までpseudoItemsを用いて一番軽いグループに入れていく
  drep(i, M - D)
  {
    if (M - i >= totyuu) {
      break;
    }
    int gId = groups[D - 1];
    rep(j, blocks[i].size())
    {
      int id = blocks[i][j];
      ans[id] = gId;
    }
    groupNakami[gId].push_back(i);
    flag[i] = 1;

    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      int midId = groups[mid];
      char c = PseudoItemsQueryGroup(groupNakami[gId], groupNakami[midId]);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);

  // 一番軽いグループに入れていく
  int tail = M;
  while (tail > 0) {
    if (flag[tail - 1] == 1) {
      tail--;
    }
    else {
      break;
    }
  }
  drep(i, tail)
  {
    int gId = groups[D - 1];
    rep(j, blocks[i].size())
    {
      int id = blocks[i][j];
      ans[id] = gId;
    }

    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  int loopCount = 0;
  while (countQ < Q) {
    loopCount++;
    int isKouhan = false;

    if (countQ >= round((double)Q * timing / 100)) {
      isKouhan = true;
    }
    if (loopCount > 1000) {
      isKouhan = true;
    }

    if (isKouhan) {
      SwapNeighbor1(items, countQ, M2);
    }
    else {
      int hiritu = hiritu2;
      if (hiritu >= 100 && nowTime > TL / 3) {
        hiritu = 90;
      }
      int qu = Rand() % 100;
      if (qu < hiritu) {
        SwapNeighbor1Block(blocks, countQ);
      }
      else {
        if (countQ >= Q - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        Swap2Block(blocks, countQ);
      }
    }
  }
  DummyQuery(countQ);
}


void Method516(int hiritu1, int hiritu2, int timing, int blockSize, int destroySize)
{
  int countQ = 0;

  vector<vector<int>> blocks;
  rep(i, N)
  {
    if (i % blockSize == 0) {
      blocks.push_back({});
    }
    blocks.back().push_back(i);
  }
  if (blocks.size() < D) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    //cerr << "Assert Method316-1 : " << blockSize << ' ' << blocks.size() << ' ' << D << endl;
    return;
  }

  int M = blocks.size();
  // アイテムをマージソート(軽い順)
  MergeSortBlock(blocks, countQ);

  if (destroySize >= M) {
    rep(i, N) { ans[i] = i % D; }
    DummyQuery(countQ);
    //cerr << "Assert Method316-2 : " << destroySize << ' ' << M << endl;
    return;
  }

  // 大きいのを分割
  vector<vector<int>> tmp1, tmp2;
  rep(i, M)
  {
    if (i < M - destroySize) {
      tmp2.push_back(blocks[i]);
    }
    else {
      rep(j, blocks[i].size()) { tmp1.push_back({ blocks[i][j] }); }
    }
  }

  // 分割したアイテムを挿入
  blocks = tmp2;
  for (auto tmp : tmp1) {
    M = blocks.size();
    int left = 0;
    int right = M;
    while (left < right) {
      int mid = (left + right) / 2;
      l[countQ] = tmp;
      r[countQ] = blocks[mid];
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '<') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    blocks.insert(blocks.begin() + left, tmp);
  }

  vector<int> items;
  int used[110] = {};
  for (auto block : blocks) {
    if (block.size() == 1) {
      items.push_back(block[0]);
      used[block[0]] = 1;
    }
  }
  int M2 = items.size();
  rep(i, N)
  {
    if (used[i] == 0) {
      items.push_back(i);
    }
  }

  if (M2 < 5) {
    rep(i, N)
    {
      ans[i] = i % D;
    }
    DummyQuery(countQ);
    return;
  }

  M = blocks.size();
  // つづら折りに入れていく
  int junban[60];
  rep(i, D)
  {
    junban[i] = i;
    junban[D * 2 - 1 - i] = i;
  }
  rep(i, M)
  {
    rep(j, blocks[M - 1 - i].size())
    {
      int id = blocks[M - 1 - i][j];
      ans[id] = junban[i % (D * 2)];
    }
  }

  int loopCount = 0;
  while (countQ < Q) {
    loopCount++;
    int isKouhan = false;

    if (countQ >= round((double)Q * timing / 100)) {
      isKouhan = true;
    }
    if (loopCount > 1000) {
      isKouhan = true;
    }

    if (isKouhan) {
      SwapNeighbor1(items, countQ, M2);
    }
    else {
      int hiritu = hiritu2;
      if (hiritu >= 100 && nowTime > TL / 3) {
        hiritu = 90;
      }
      int qu = Rand() % 100;
      if (qu < hiritu) {
        SwapNeighbor1Block(blocks, countQ);
      }
      else {
        if (countQ >= Q - 1) {
          if (hiritu < 10) {
            break;
          }
          continue;
        }

        Swap2Block(blocks, countQ);
      }
    }
  }
  DummyQuery(countQ);
}


void Method12(int ikichi = N)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ, ikichi);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  while (countQ < Q) {
    SwapNeighbor1(items, countQ);
  }

  DummyQuery(countQ);
}

void Method106(int hiritu = 100, int minDiff = 10, int totyuu = 999)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 途中までpseudoItemsを用いて一番軽いグループに入れていく
  drep(i, N - D)
  {
    if (N - i >= totyuu) {
      break;
    }
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = PseudoItemsQuery(countQ);
      l[countQ].clear();
      r[countQ].clear();
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);

  // 一番軽いグループに入れていく
  int tail = N;
  while (tail > 0) {
    if (ans[items[tail - 1]] != -1) {
      tail--;
    }
    else {
      break;
    }
  }
  drep(i, tail)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      SwapNeighbor1(items, countQ);
    }
    else {
      if (countQ >= Q - 1) {
        if (hiritu < 10) {
          break;
        }
        continue;
      }
      Swap2(items, countQ, minDiff);
    }
  }

  DummyQuery(countQ);
}

void Method306(int hiritu = 100, int minDiff = 10, int totyuu = 999, int _m = 30, int aketoku = 0)
{
  int M = _m;
  M = min(M, N);
  M = max(M, 10);
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // 一部アイテムをマージソート(軽い順)
  MergeSort(items, countQ, 1001001, M);

  // ソートしていないアイテムを入れる
  int _D = D - aketoku;
  _D = max(_D, 2);
  srep(i, M, N)
  {
    int id = items[i];
    ans[id] = (i - M) % _D;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }
  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);
  // 一番軽いグループに入れていく
  int tail = N;
  while (tail > 0) {
    if (ans[items[tail - 1]] != -1) {
      tail--;
    }
    else {
      break;
    }
  }
  drep(i, tail)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }
  int loop = 0;
  while (countQ < Q) {
    loop++;

    if (loop > 100000) {
      break;
    }
    int qu = Rand() % 100;
    if (qu < hiritu) {
      SwapNeighbor1(items, countQ, M);
    }
    else {
      if (countQ >= Q - 1) {
        if (hiritu < 10) {
          break;
        }
        continue;
      }
      Swap2(items, countQ, minDiff, M);
    }
  }
  DummyQuery(countQ);
}

void Method806(int hiritu, int minDiff, int _m)
{
  int M = _m;
  M = min(M, N);
  M = max(M, 10);
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // 1回だけ比べる
  rep(i, M)
  {
    int j = N - 1 - i;
    if (j <= i) break;
    char c = Query1(countQ, i, j);
    if (c == '>') {
      swap(items[i], items[j]);
    }
  }

  // 一部アイテムをマージソート(軽い順)
  MergeSort(items, countQ, 1001001, M);

  // ソートしていないアイテムを入れる
  srep(i, M, N)
  {
    int id = items[i];
    ans[id] = (i - M) % D;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }
  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);
  // 一番軽いグループに入れていく
  int tail = N;
  while (tail > 0) {
    if (ans[items[tail - 1]] != -1) {
      tail--;
    }
    else {
      break;
    }
  }
  drep(i, tail)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }
  int loop = 0;
  while (countQ < Q) {
    loop++;

    if (loop > 100000) {
      break;
    }
    int qu = Rand() % 100;
    if (qu < hiritu) {
      SwapNeighbor1(items, countQ, M);
    }
    else {
      if (countQ >= Q - 1) {
        if (hiritu < 10) {
          break;
        }
        continue;
      }
      Swap2(items, countQ, minDiff, M);
    }
  }
  DummyQuery(countQ);
}


void Method606(int hiritu = 100, int minDiff = 10, int totyuu = 999, int _m = 30, int aketoku = 0)
{
  int M = _m;
  M = min(M, N);
  M = max(M, 10);
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // 一部アイテムをマージソート(軽い順)
  MergeSort(items, countQ, 1001001, M);

  // ソートしていないアイテムを入れる
  int _D = D - aketoku;
  _D = max(_D, 2);
  srep(i, M, N)
  {
    int id = items[i];
    ans[id] = (i - M) % _D;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }
  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);
  // 一番軽いグループに入れていく
  int tail = N;
  while (tail > 0) {
    if (ans[items[tail - 1]] != -1) {
      tail--;
    }
    else {
      break;
    }
  }
  drep(i, tail)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;

    // 初回だけ特別処理
    if (i == tail - 1) {
      rep(karina, 10)
      {
        // 今のグループに数回Move1試す
        int dstId = Move1_Specify(countQ, gId);
        if (dstId != -1) {
          int dstPos = 0;
          rep(j, D)
          {
            if (groups[j] == dstId) {
              dstPos = j;
            }
          }
          // 整列を更新
          int left = 0;
          int right = dstPos;
          while (left < right) {
            int mid = (left + right) / 2;
            rep(j, N)
            {
              if (ans[j] == gId) {
                l[countQ].push_back(j);
              }
              else if (ans[j] == groups[mid]) {
                r[countQ].push_back(j);
              }
            }
            char c = Query(countQ);
            if (c == '=') {
              left = right = mid;
            }
            else if (c == '>') {
              right = mid;
            }
            else {
              left = mid + 1;
            }
          }
          int now = dstPos;
          while (left < now) {
            swap(groups[now - 1], groups[now]);
            now--;
          }
        }
      }
    }

    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }
  int loop = 0;
  while (countQ < Q) {
    loop++;

    if (loop > 100000) {
      break;
    }
    int qu = Rand() % 100;
    if (qu < hiritu) {
      SwapNeighbor1(items, countQ, M);
    }
    else {
      if (countQ >= Q - 1) {
        if (hiritu < 10) {
          break;
        }
        continue;
      }
      Swap2(items, countQ, minDiff, M);
    }
  }
  DummyQuery(countQ);
}



void Method246(int hiritu, int totyuu, int small1, int small2)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 途中までpseudoItemsを用いて一番軽いグループに入れていく
  drep(i, N - D)
  {
    if (N - i >= totyuu) {
      break;
    }
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = PseudoItemsQuery(countQ);
      l[countQ].clear();
      r[countQ].clear();
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);

  // 一番軽いグループに入れていく
  int tail = N;
  while (tail > 0) {
    if (ans[items[tail - 1]] != -1) {
      tail--;
    }
    else {
      break;
    }
  }
  drep(i, tail)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      int sma = small1;
      if (hiritu == 100) {
        if (Rand() % 20 == 0) {
          sma = 999;
        }
      }
      SwapNeighborSmall1(items, countQ, sma);
    }
    else {
      MoveSmall1(items, countQ, small2);
    }
  }

  DummyQuery(countQ);
}


void Method112(int ikichi = N, int totyuu = 999)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ, ikichi);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 途中までpseudoItemsを用いて一番軽いグループに入れていく
  drep(i, N - D)
  {
    if (N - i >= totyuu) {
      break;
    }
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = PseudoItemsQuery(countQ);
      l[countQ].clear();
      r[countQ].clear();
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  // ここでグループを一度マージソートして正しい順序に並び替える
  MergeSort_Group(groups, countQ);

  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  while (countQ < Q) {
    SwapNeighbor1(items, countQ);
  }

  DummyQuery(countQ);
}

void Method17(int ikichi, int hiritu)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ, ikichi);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // 一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        else if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = Query(countQ);
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  while (countQ < Q) {
    int qu = Rand() % 100;
    if (qu < hiritu) {
      SwapNeighbor1(items, countQ);
    }
    else {
      if (countQ >= Q - 1) {
        if (hiritu < 10) {
          break;
        }
        continue;
      }
      Swap2(items, countQ, 999);
    }
  }

  DummyQuery(countQ);
}

void Method10(int hiritu = 70, int minDiff = 10, bool isMethod9 = false)
{
  vector<int> items;
  rep(i, N) { items.push_back(i); }
  int countQ = 0;

  // アイテムをマージソート(軽い順)
  MergeSort(items, countQ);
  rep(i, N) { karusa[items[i]] = i; }

  // 各グループに1個ずつ入れる
  rep(i, D)
  {
    int id = items[N - 1 - i];
    ans[id] = i;
  }

  vector<int> groups;  // 常に重い順に並んでいるようにする
  rep(i, D) { groups.push_back(i); }

  // pseudoItemsを用いて一番軽いグループに入れていく
  drep(i, N - D)
  {
    int id = items[i];
    int gId = groups[D - 1];
    ans[id] = gId;
    int left = 0;
    int right = D - 1;
    while (left < right) {
      int mid = (left + right) / 2;
      rep(j, N)
      {
        if (ans[j] == gId) {
          l[countQ].push_back(j);
        }
        if (ans[j] == groups[mid]) {
          r[countQ].push_back(j);
        }
      }
      char c = PseudoItemsQuery(countQ);
      l[countQ].clear();
      r[countQ].clear();
      if (c == '=') {
        left = right = mid;
      }
      else if (c == '>') {
        right = mid;
      }
      else {
        left = mid + 1;
      }
    }
    int now = D - 1;
    while (left < now) {
      swap(groups[now - 1], groups[now]);
      now--;
    }
  }

  if (isMethod9) {
    while (countQ < Q) {
      int qu = Rand() % 100;
      if (qu < 100) {
        SwapNeighbor1(items, countQ);
      }
    }
  }
  else {
    while (countQ <= Q - 2) {
      int qu = Rand() % 100;
      if (qu < hiritu) {
        SwapNeighbor1(items, countQ);
      }
      else {
        Swap2(items, countQ, minDiff);
      }
    }
  }

  DummyQuery(countQ);
}

void PrintAns(ofstream& ofs)
{
  if (mode == 0) {
    rep(i, N) { cout << ans[i] << ' '; }
    cout << endl;
  }
  else if (mode == 1) {
    ofs << "# " << haipara[NN][QQ][DD] << endl;
    rep(i, Q)
    {
      ofs << "#c ";
      rep(j, N) { ofs << answers[i][j] << ' '; }
      ofs << endl;
      ofs << comments[i] << endl;
      ofs << l[i].size() << ' ' << r[i].size();
      rep(j, l[i].size()) { ofs << ' ' << l[i][j]; }
      rep(j, r[i].size()) { ofs << ' ' << r[i][j]; }
      ofs << endl;
    }
    rep(i, N) { ofs << ans[i] << ' '; }
    ofs << endl;

    rep(i, N)
    {
      ofs << "# ";
      rep(j, N)
      {
        if (hikaku[i][j] == -1) {
          ofs << "< ";
        }
        if (hikaku[i][j] == 0) {
          ofs << "= ";
        }
        if (hikaku[i][j] == 1) {
          ofs << "> ";
        }
        if (hikaku[i][j] == -2) {
          ofs << "? ";
        }
      }
      ofs << endl;
    }
  }
}

// 複数ケース回すときに内部状態を初期値に戻す
void SetUp()
{
  startTime = clock();
  endTime = clock();
  nowTime = 0.0;

  rep(i, MAX_Q)
  {
    l[i].clear();
    r[i].clear();
    comments[i].clear();
  }
  comments[0] = "# ";
  rep(i, 110) { ans[i] = -1; }
  rep(i, 110)
  {
    rep(j, 110) { hikaku[i][j] = -2; }
    hikaku[i][i] = 0;
  }
  calledMap.clear();
  queryCount = 0;
  query1Count = 0;
  ResetMemory();

  real_max_D = -1;
  real_minScore = INF;
}

ll Solve(int probNum, ll hai2 = D18)
{
  // 複数ケース回すときに内部状態を初期値に戻す
  SetUp();

  // 入力受け取り
  Input(probNum);

  GeneratePseudoItems();

  //if (4.0 < (double)Q / N) {
  //  return 0;
  //}
  // if ((double)Q / N < 4.0 || 8.0 < (double)Q / N) {
  //   return 0;
  // }
  // if ((double)Q / N < 8.0 || 16.0 < (double)Q / N) {
  //   return 0;
  // }
  // if ((double)Q / N < 16.0) {
  //   return 0;
  // }

  // これあるとTLEしない。
  //if (haipara[NN][QQ][DD] >= 1000000) {
  //  return 0;
  //}

  //{
  //  int hai = haipara[NN][QQ][DD];
  //  hai %= 1000000;
  //  int mushi = 1;
  //  if (90000 <= hai && hai <= 99999) {
  //    mushi = 0;
  //  }
  //  if (mushi)return 0;
  //}

  int hai = 8;
  if (mode < 1000000) {
    hai = haipara[NN][QQ][DD];
    hai2 = haipara2[NN][QQ][DD];
  }
  else {
    hai = probNum;
  }
  hai %= 1000000;

  //if (hai != 200316 && hai != 200216 && hai != 200236) {
  //  return 0;
  //}

  if (hai == 200208) {
    Method208(hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200206) {
    Method206(hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200216) {
    Method216(hai2 % D10 / D8, hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200226) {
    Method226(hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200227) {
    Method226(70, 10);
  }
  else if (hai == 200236) {
    Method216(hai2 % D10 / D8, hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200246) {
    Method246(hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200256) {
    Method246(100, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200266) {
    Method266(70, 10, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200366) {
    Method266(70, 10, hai2 % D4 / D2, hai2 % D2, hai2 % D7 / D4);
  }
  else if (hai == 200306) {
    Method306(hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200806) {
    Method806(hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200606) {
    Method606(hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200376) {
    Method306(hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2, hai2 % D10 / D8);
  }
  else if (hai == 200316) {
    Method316(hai2 % D10 / D8, hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200916) {
    Method916(hai2 % D12 / D10, hai2 % D10 / D8, hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200516) {
    Method516(hai2 % D10 / D8, hai2 % D8 / D6, hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (hai == 200706) {
    Method706(hai2 % D6 / D4, hai2 % D4 / D2, hai2 % D2);
  }
  else if (8000 <= hai && hai <= 8100) {
    Method8(hai - 8000);
  }
  else if (70000 <= hai && hai <= 79999) {
    Method6((hai - 70000) / 100, hai % 100);
  }
  else if (80000 <= hai && hai <= 89999) {
    Method17((hai - 80000) / 100, hai % 100);
  }
  else if (1200 <= hai && hai <= 1299) {
    Method12(hai - 1200);
  }
  else if (1900 <= hai && hai <= 1999) {
    Method19(hai - 1900);
  }
  else if (90000 <= hai && hai <= 99999) {
    Method106((hai - 90000) / 100, 10, hai % 100);
  }
  else if (100000 <= hai && hai <= 109999) {
    Method112((hai - 100000) / 100, hai % 100);
  }
  else if (110000 <= hai && hai <= 110100) {
    Method8_Two(hai - 110000);
  }
  else {
    switch (hai) {
    case 6:
      Method6();
      break;
    case 610:
      Method6(70, 10);
      break;
    case 61003:
      Method6(50, 3);
      break;
    case 8:
      Method8();
      break;
    case 9:
      Method10(70, 10, true);
      break;
    case 10:
      Method10();
      break;
    case 1003:
      Method10(50, 3);
      break;
    case 11:
      Method11();
      break;
    case 12:
      Method12();
      break;
    case 13:
      Method13();
      break;
    case 14:
      Method14();
      break;
    case 15:
      Method15();
      break;
    case 16:
      Method16();
      break;
    case 1220:
      Method12(20);
      break;
    default:
      cerr << "NG hai : " << hai << endl;
      Method8();
      break;
    }
  }

  if (true || mode < 1000000) {
    if (!ErrorCheck()) {
      cerr << "ErrorCheck :  haipara = " << haipara[NN][QQ][DD] << ", haiapara2 = " << haipara2[NN][QQ][DD] << endl;
    }
  }

  if (mode != 0) {
    endTime = clock();
    nowTime = ((double)endTime - startTime) / CLOCKS_PER_SEC;
    if (nowTime > 1.95) {
      cerr << "!!!TLE!!! << endl";
      cerr << "NN = " << NN << ", QQ = " << QQ << ", DD = " << DD << endl;
      cerr << "haipara = " << haipara[NN][QQ][DD] << ", haiapara2 = " << haipara2[NN][QQ][DD] << endl;
    }
  }

  // 出力ファイルストリームオープン
  ofstream ofs;
  if (mode == 0 || mode == 1) {
    OpenOfs(probNum, ofs);
    PrintAns(ofs);
  }

  if (ofs.is_open()) {
    ofs.close();
  }

  ll score = 0;
  if (mode != 0) {
    score = CalcScore();
  }
  return score;
}

void PrintHaipara(int loop)
{
  string str = "./haipara/haipara" + to_string(loop) + ".txt";
  std::ofstream file(str);
  file << "vector<int> haipara[14][40] = {" << endl;
  rep(i, 14)
  {
    file << "{" << endl;
    int ii = i * 5 + 30 + 4;
    if (i == 13) ii = 100;
    rep(j, 40)
    {
      file << "{";
      int kk = ii / 4 - 1;
      rep(k, haipara[i][j].size())
      {
        file << setw(7) << haipara[i][j][k];
        if (k < haipara[i][j].size() - 1) {
          file << ",";
        }
      }
      if (j < 39) {
        file << "}," << endl;
      }
      else {
        file << "}" << endl;
      }
    }
    if (i < 13) {
      file << "}," << endl;
    }
    else {
      file << "}" << endl;
    }
  }
  file << "};" << endl;
  file << endl;
  file << "vector<ll> haipara2[14][40] = {" << endl;
  rep(i, 14)
  {
    file << "{" << endl;
    int ii = i * 5 + 30 + 4;
    if (i == 13) ii = 100;
    rep(j, 40)
    {
      file << "{";
      int kk = ii / 4 - 1;
      rep(k, haipara2[i][j].size())
      {
        file << setw(19) << haipara2[i][j][k];
        if (k < haipara2[i][j].size() - 1) {
          file << ",";
        }
      }
      if (j < 39) {
        file << "}," << endl;
      }
      else {
        file << "}" << endl;
      }
    }
    if (i < 13) {
      file << "}," << endl;
    }
    else {
      file << "}" << endl;
    }
  }
  file << "};" << endl;
  file.close();
}

int main()
{
  srand((unsigned)time(NULL));
  while (rand() % 100) {
    Rand();
  }

  //set<int> haiSet;
  //rep(i, 14) {
  //  rep(j, 40) {
  //    rep(k, haipara[i][j].size()) {
  //      haiSet.insert(haipara[i][j][k]);
  //    }
  //  }
  //}
  //for (auto hai : haiSet) {
  //  cout << hai << endl;
  //}
  //return 0;

  mode = 0;

  if (mode == 0) {
    Solve(0);
  }
  else if (mode == 1) {
    ll sum = 0;
    rep(j, 1)
    {
      srep(i, 0, 100)
      {
        ll score = Solve(i);
        sum += score;
        if (score == 0) continue;
        cout << "num = " << setw(2) << i << ", ";
        cout << "N = " << N << ", Q = " << Q << ", D = " << D << ", queryCount = " << queryCount << ", ";
        cout << "nowTime = " << nowTime << ", ";
        cout << "haipara = " << haipara[NN][QQ][DD] << ", ";
        cout << "score = " << setw(7) << score << ", ";
        cout << "sum = " << setw(9) << sum << endl;
      }
    }
  }
  else if (mode == 2) {
    ll sum = 0;
    rep(ii, 100)
    {
      int i = 209;
      ll score = Solve(i);
      sum += score;
      cout << "num = " << i << ", ";
      cout << "score = " << score << ", ";
      cout << "sum = " << sum << endl;
    }
  }
  else if (mode == 3) {
    int loop = 0;
    while (true) {
      loop++;
      GenerateNNDDQQ();

      ll hai = haipara[NN][QQ][DD];
      ll hai2 = haipara2[NN][QQ][DD];

      GeneratecaseFromNNDDQQ();

      //cout << "loop = " << setw(5) << loop << ", ";
      //cout << "N = " << setw(3) << N << ", ";
      //cout << "D = " << setw(2) << D << ", ";
      //cout << "Q = " << setw(4) << Q << ", ";
      //cout << "Q / N = " << fixed << setprecision(2) << setw(5) << (double)Q / N << ", ";
      //cout << "hai = " << setw(7) << hai << ",";
      //cout << "hai2 = " << setw(19) << hai2 << ", ";

      ll score = Solve(2, hai2);
      endTime = clock();
      nowTime = ((double)endTime - startTime) / CLOCKS_PER_SEC;

      //cout << "score = " << setw(7) << score << ", ";
      //cout << "queryCount = " << setw(7) << queryCount << ", ";
      //cout << "time = " << nowTime << endl;

      if (loop % 100 == 0) cout << "loop = " << loop << endl;
    }
  }
  else if (mode == 1000000) {
    int loop = 0;
    int winCount = 0;
    queue<P> winQueue;
    while (true) {
      // if (loop == 20) break;
      // GenerateCase();
      // CalcNNDDQQ();

      int hai = 0;
      int newHai = 0;
      ll hai2 = D18;
      ll newHai2 = D18;
      if (winQueue.size()) {
        int newNNQQDD = winQueue.front().first;
        int challengeNNQQDD = winQueue.front().second;
        winQueue.pop();

        NN = challengeNNQQDD / 10000;
        QQ = challengeNNQQDD % 10000 / 100;
        DD = challengeNNQQDD % 100;
        hai = haipara[NN][QQ][DD];
        hai2 = haipara2[NN][QQ][DD];

        int NNN = newNNQQDD / 10000;
        int QQQ = newNNQQDD % 10000 / 100;
        int DDD = newNNQQDD % 100;
        newHai = haipara[NNN][QQQ][DDD];
        newHai2 = haipara2[NNN][QQQ][DDD];
      }
      else {
        //vector<int> kouho;
        //rep(i, 14) {
        //  rep(j, 40) {
        //    rep(k, haipara[i][j].size()) {
        //      if (haipara[i][j][k] != 200316) continue;
        //      ll hai2 = haipara2[i][j][k];
        //      int bSize = hai2 % D4 / D2;
        //      int miniN = 5 * (i + 6);
        //      int miniBlockSize = (miniN + bSize - 1) / bSize;
        //      if (miniBlockSize < k + 2) {
        //        kouho.push_back(i * D4 + j * D2 + k);
        //        //cout << i << ' ' << j << ' ' << k << ' ' << bSize << ' ' << hai2 << endl;
        //      }
        //    }
        //  }
        //}

        //if (!kouho.empty()) {
        //  GenerateNNDDQQ();
        //}
        //else {
        //  int ijk = kouho[Rand() % kouho.size()];
        //  GenerateNNDDQQ(ijk / D4, ijk % D4 / D2, ijk % D2);
        //}

        GenerateNNDDQQ();

        hai = haipara[NN][QQ][DD];
        hai2 = haipara2[NN][QQ][DD];

        if (hai != 200316 && hai != 200916) {
          continue;
        }

        newHai = 200916;
        newHai2 = hai2 % D10 + Rand() % D2 * D10;
        if (hai == 200916 && Rand() % 2 == 0) {
          newHai2 = hai2 + D10;
        }

        //ll x = newHai2 % D4 / D2;
        //ll y = newHai2 % D2;
        //x += (int)(Rand() % 3) - 1;
        //x = max(2LL, x);
        //x = min(99LL, x);
        //y += (int)(Rand() % 3) - 1;
        //y = max(2LL, y);
        //y = min(99LL, y);

        //newHai2 = newHai2 / D4 * D4;
        //newHai2 = newHai2 + x * D2 + y;

        //newHai = hai;
        //newHai2 = hai2;

        //if (hai == 200216 || hai == 200236 || hai == 200316) {
        //  if (Rand() % 2) {
        //    newHai2 += (Rand() % 3 - 1) * D2;
        //    if (newHai2 % D4 / D2 < 2) {
        //      newHai2 += D2;
        //    }
        //  }
        //  if (Rand() % 2) {
        //    newHai2 += (Rand() % 3 - 1);
        //    if (newHai2 % D2 < 1) {
        //      newHai2 += 1LL;
        //    }
        //  }
        //}
        //else {
        //  continue;
        //}

        //newHai = 200516;
        //newHai2 = hai2;

        //newHai = 1008000 + Rand() % 101;
        //newHai2 = 0;

        if (false) {
          if (Rand() % 2 == 0) {
            int NNN = NN + Rand() % 3 - 1;
            NNN = max(NNN, 0);
            NNN = min(NNN, 13);
            int QQQ = QQ + Rand() % 3 - 1;
            QQQ = max(QQQ, 0);
            QQQ = min(QQQ, 39);
            int DDD = DD + Rand() % 3 - 1;
            DDD = max(0, DDD);
            DDD = min(DDD, (int)haipara[NNN][QQQ].size() - 1);
            newHai = haipara[NNN][QQQ][DDD];
            newHai2 = haipara2[NNN][QQQ][DDD];
            if (newHai != 200916) {
              continue;
            }
          }
        }


        //newHai = hai;

        //if (hai == 200216 || hai == 200236 || hai == 200316) {
        //  newHai2 = hai2;
        //  if (Rand() % 2) {
        //    newHai2 += (Rand() % 3 - 1) * D2;
        //    if (newHai2 % D4 / D2 < 2) {
        //      newHai2 += D2;
        //    }
        //  }
        //  if (Rand() % 2) {
        //    newHai2 += (Rand() % 3 - 1);
        //    if (newHai2 % D2 < 1) {
        //      newHai2 += 1LL;
        //    }
        //  }
        //}
        //else {
        //  continue;
        //}

        //newHai = 200306;
        //newHai2 = 99 * D6 + Rand() % D6;

        //if (QQ >= 20) continue;

        //int ra = Rand() % 100;
        //if (ra < 60) {
        //  newHai = 200366;
        //  newHai2 = Rand() % D3 * D4 + Rand() % D4;
        //}
        //else if (ra < 80) {
        //  newHai = 200266;
        //  newHai2 = Rand() % D4;
        //}
        //else {
        //  newHai = 200226;
        //  newHai2 = Rand() % D4;
        //}

        //if (QQ <= 20) continue;

        //newHai = 200316;
        //newHai2 = 0;
        //newHai2 += (ll)Rand() % 2 * 98 + 1;
        //newHai2 *= 100;
        //newHai2 += (ll)Rand() % 2 * 98 + 1;
        //newHai2 *= 100;
        //newHai2 += (ll)Rand() % 2 * 98 + 1;
        //newHai2 *= 100;
        //newHai2 += (ll)Rand() % 14 + 2;
        //newHai2 *= 100;
        //newHai2 += (ll)Rand() % 10 + 1;

        //if (hai == 200216 || hai == 200236 || hai == 200316) {
        //  newHai2 = hai2;
        //  if (Rand() % 2) {
        //    newHai2 += (Rand() % 3 - 1) * D2;
        //    if (newHai2 % D4 / D2 < 2) {
        //      newHai2 += D2;
        //    }
        //  }
        //  if (Rand() % 2) {
        //    newHai2 += (Rand() % 3 - 1);
        //    if (newHai2 % D2 < 1) {
        //      newHai2 += 1LL;
        //    }
        //  }
        //}
        //else {
        //  continue;
        //}

        //newHai = 200306;
        //newHai2 = 99 * D6 + Rand() % D6;

        //newHai = 200266;
        //newHai2 = Rand() % D4;
        //if (hai != 1000610) {
        //  continue;
        //}

        //newHai = 200227;
        //newHai2 = 7010;
        //if (hai != 1000610) {
        //  continue;
        //}

        //newHai = 200256;
        //newHai2 = Rand() % D6;

        //if (hai != 200246 && hai != 200256 && hai / D4 != 109) {
        //  continue;
        //}

        //newHai = 200236;
        //newHai2 = Rand() % D6 * D4 + (Rand() % 35 + 2) * D2 + Rand() % 20;

        //newHai = 200226;
        //newHai2 = Rand() % D4;

        // newHai = 1090000 + Rand() % 10000;
        // if (Rand() % 2 == 0) {
        //   newHai = 1070000 + Rand() % 10000;
        // }

        // newHai = 1100000 + Rand() % 10000;

        // int ra = Rand() % 20;
        // if (ra < 1) {
        //   newHai = 1000006;
        // }
        // else if (ra < 2) {
        //   newHai = 1000008;
        // }
        // else if (ra < 3) {
        //   newHai = 1000009;
        // }
        // else if (ra < 4) {
        //   newHai = 1000010;
        // }
        // else if (ra < 5) {
        //   newHai = 1000011;
        // }
        // else if (ra < 6) {
        //   newHai = 1000012;
        // }
        // else if (ra < 7) {
        //   newHai = 1000013;
        // }
        // else if (ra < 8) {
        //   newHai = 1001220;
        // }
        // else if (ra < 9) {
        //   newHai = 1001003;
        // }
        // else if (ra < 10) {
        //   newHai = 1000610;
        // }
        // else if (ra < 11) {
        //   newHai = 1061003;
        // }
        // else if (ra < 12) {
        //   newHai = 1008100;
        // }
        // else if (ra < 13) {
        //   newHai = 1000014;
        // }
        // else if (ra < 14) {
        //   newHai = 1000015;
        // }
        // else if (ra < 15) {
        //   newHai = 1000016;
        // }
        // else if (ra < 16) {
        //   newHai = 1070000 + Rand() % 10000;
        // }
        // else if (ra < 17) {
        //   newHai = 1008000 + Rand() % 101;
        // }
        // else if (ra < 18) {
        //   newHai = 1080000 + Rand() % 10000;
        //   newHai -= newHai % 100;
        // }
        // else if (ra < 19) {
        //   newHai = 1001200 + Rand() % 100;
        // }
        // else if (ra < 20) {
        //   newHai = 1001900 + Rand() % 100;
        // }
        // else if (ra < 21) {
        //   newHai = 1090000 + Rand() % 10000;
        // }
      }
      GeneratecaseFromNNDDQQ();

      // if (1000008 != hai) {
      //   continue;
      // }
      if (newHai == hai && newHai2 == hai2) {
        continue;
      }
      //cout << newHai2 << endl;
      bool isWin = true;
      int winSum = 0;
      int loseSum = 0;
      int drawSum = 0;
      rep(aespa, 1)
      {
        int win = 0;
        int lose = 0;
        int draw = 0;

        int WinKijun = 0;
        if (WinKijun == 0) {
          rep(_, 200)
          {
            GeneratecaseFromNNDDQQ();
            ll oldScore = Solve(hai, hai2);
            ll newScore = Solve(newHai, newHai2);
            //cout << oldScore << ' ' << newScore << endl;
            if (newScore < oldScore) {
              win++;
            }
            else if (newScore == oldScore) {
              draw++;
            }
            else {
              lose++;
            }
            if (win - lose <= -10) break;
            if (win >= 120) break;
            if (win >= 60 && lose <= 30) break;
            if (lose >= 80) break;
            if (lose >= 20 && win <= lose) break;
            if (win >= 20 && lose * 11 / 10 >= win) break;
            if (win - lose >= 40) break;
          }
          winSum += win;
          loseSum += lose;
          drawSum += draw;
          if (win == 0 || (double)win / (win + lose) < 0.6) {
            isWin = false;
            break;
          }
          if (draw >= 100 && win <= 10) {
            isWin = false;
            break;
          }
        }
        else {
          rep(_, 1000)
          {
            GeneratecaseFromNNDDQQ();
            ll oldScore = Solve(hai, hai2);
            ll newScore = Solve(newHai, newHai2);
            //cout << oldScore << ' ' << newScore << endl;
            if (newScore < oldScore) {
              win++;
            }
            else if (newScore == oldScore) {
              draw++;
            }
            else {
              lose++;
            }
            if (win - lose <= -10) break;
            if (win >= 550) break;
            if (lose >= 20 && win <= lose) break;
            if (win - lose >= 100) break;
          }
          winSum += win;
          loseSum += lose;
          drawSum += draw;
          if (win <= 30 || (double)win / (win + lose) < 0.55) {
            isWin = false;
            break;
          }
        }
      }

      //cout << N << ' ' << Q << ' ' << D << ' ' << (double)Q / N << ' ';
      //cout << newHai << ' ' << newHai2 << ' ' << winSum << "/" << loseSum << "/" << drawSum << endl;

      if (isWin) {
        if ((double)winSum / (winSum + loseSum) < 0.55) {
          isWin = false;
        }
      }

      if (isWin) {
        winCount++;
        haipara[NN][QQ][DD] = newHai;
        haipara2[NN][QQ][DD] = newHai2;
        cout << "loop = " << setw(5) << loop << ", ";
        cout << "N = " << setw(3) << N << ", ";
        cout << "D = " << setw(2) << D << ", ";
        cout << "Q = " << setw(4) << Q << ", ";
        cout << "Q / N = " << fixed << setprecision(2) << setw(5) << (double)Q / N << ", ";
        cout << "old = " << setw(7) << hai << ", new = " << setw(7) << newHai << ", ";
        cout << "oldHai2 = " << setw(19) << hai2 << ", ";
        cout << "newHai2 = " << setw(19) << newHai2;
        cout << " : " << winSum << "/" << loseSum << "/" << drawSum << endl;

        // winQueueに入れる
        rep(_, 6)
        {
          int NNN = NN;
          int QQQ = QQ;
          int DDD = DD;
          if (_ == 0) {
            NNN = NN - 1;
            if (NNN < 0) continue;
          }
          else if (_ == 1) {
            NNN = NN + 1;
            if (NNN >= 14) continue;
          }
          else if (_ == 2) {
            QQQ = QQ - 1;
            if (QQQ < 0) continue;
          }
          else if (_ == 3) {
            QQQ = QQ + 1;
            if (QQQ >= 40) continue;
          }
          else if (_ == 4) {
            DDD = DD - 1;
            if (DDD < 0) continue;
          }
          else if (_ == 5) {
            DDD = DD + 1;
          }
          if (DDD >= haipara[NNN][QQQ].size()) continue;
          winQueue.push(
            P(NN * 10000 + QQ * 100 + DD, NNN * 10000 + QQQ * 100 + DDD));
        }
      }

      loop++;
      if (loop % 100 == 0) {
        PrintHaipara(loop);
        cout << "PrintHaipara : " << loop << endl;
        winCount = 0;
      }
    }
  }

  return 0;
}
